[
  {
    "file": "addons\\add_curve_ivygen.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\animation_add_corrective_shape_key.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\animation_animall.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\bone_selection_sets.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\camera_dolly_crane_rigs.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\camera_turnaround.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\curve_simplify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\development_api_navigator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\development_edit_operator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\development_icon_get.py",
    "warnings": [],
    "api_suggestions": [
      "Replace all uses of the deprecated bpy.props.StringProperty and bpy.props.BoolProperty assignment with the new annotation-based property definitions. In Blender 4.4, properties must be defined as class annotations using type hints and the bpy.props module. Here is the corrected code block:\n\n```python\nimport bpy\n\nclass MyPanelProperties(bpy.types.PropertyGroup):\n    panel_filter: bpy.props.StringProperty()\n    show_panel_icons: bpy.props.BoolProperty()\n    show_history: bpy.props.BoolProperty()\n    show_brush_icons: bpy.props.BoolProperty()\n    show_matcap_icons: bpy.props.BoolProperty()\n    show_colorset_icons: bpy.props.BoolProperty()\n    copy_on_select: bpy.props.BoolProperty()\n    close_on_select: bpy.props.BoolProperty()\n    auto_focus_filter: bpy.props.BoolProperty()\n    show_panel: bpy.props.BoolProperty()\n```\n\n**Key changes:**\n- Use the colon (:) for type annotations, not equals (=).\n- Place all property definitions inside a class derived from bpy.types.PropertyGroup.\n- Register the PropertyGroup and assign it to a context (not shown here, but required for use).\n\nThis syntax is required for Blender 2.80 and newer, including 4.4[1].",
      "In Blender 4.4, the old `bpy.props.*Property` functions are deprecated in favor of the new `bpy.props.*` classes. The correct migration is as follows:\n\n```python\nshow_header: bpy.props.BoolProperty()\nicon: bpy.props.StringProperty()\nforce_copy_on_select: bpy.props.BoolProperty()\nfilter_auto_focus: bpy.props.StringProperty()\nfilter: bpy.props.StringProperty()\nselected_icon: bpy.props.StringProperty()\n```\n\n**Key changes:**\n- Use type annotations (`:`) instead of assignment (`=`).\n- The property is now defined as a class variable, not an instance variable.\n\nThis is the Blender 4.4+ compatible syntax for property definitions in classes."
    ],
    "errors": []
  },
  {
    "file": "addons\\development_iskeyfree.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\development_ui_classes.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\game_engine_publishing.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old style of defining properties using direct assignment (e.g., name = bpy.props.StringProperty(...)) at the class level is deprecated. Properties must now be defined using type annotations and the new property function syntax. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    name: bpy.props.StringProperty()\n    player_path: bpy.props.StringProperty()\n    publish: bpy.props.BoolProperty()\n    overwrite: bpy.props.BoolProperty()\n    output_path: bpy.props.StringProperty()\n    runtime_name: bpy.props.StringProperty()\n    lib_path: bpy.props.StringProperty()\n    publish_default_platform: bpy.props.BoolProperty()\n    platforms_active: bpy.props.IntProperty()\n```\n\n**Key changes:**\n- Use type annotations (the colon syntax) instead of assignment.\n- All properties must be defined inside a class derived from `bpy.types.PropertyGroup` (or similar Blender types).\n- Do not use assignment (`=`) outside of the annotation context for properties.\n\nThis is the Blender 4.4+ compatible way to define custom properties for use in add-ons and scripts[1].",
      "Replace the deprecated property definitions with the new annotation-based syntax required in Blender 2.80+ (and still current in 4.4):\n\n```python\nasset_paths_active: bpy.props.IntProperty()\nmake_archive: bpy.props.BoolProperty()\n```\n\nThis change uses the **type annotation syntax** (colon and equals) instead of assignment, which is required for all custom properties in Blender 2.80 and later[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\game_engine_save_as_runtime.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_camera.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_after_effects.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_paper_model.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must update the property API usage. The main change is that the options argument now requires the use of the enum, e.g., options={'HIDDEN'} becomes options={'HIDDEN'} or options={bpy.props.PropertyOptions.HIDDEN}, but the preferred modern usage is to use the enum directly. Also, the default for BoolProperty should be specified as a keyword argument, and all properties should use keyword arguments for clarity and future compatibility.\n\nHere are the corrected lines for Blender 4.4:\n\n```python\nimport bpy\n\nedit: bpy.props.BoolProperty(default=False, options={bpy.props.PropertyOptions.HIDDEN})\npriority_effect_convex: bpy.props.FloatProperty()\npriority_effect_concave: bpy.props.FloatProperty()\npriority_effect_length: bpy.props.FloatProperty()\ndo_create_uvmap: bpy.props.BoolProperty()\nouter_style: bpy.props.EnumProperty()\nline_width: bpy.props.FloatProperty()\nouter_width: bpy.props.FloatProperty()\nuse_outbg: bpy.props.BoolProperty()\noutbg_width: bpy.props.FloatProperty()\n```\n\n**Key changes:**\n- Use the colon (:) type annotation syntax for property declarations in Blender 2.8+.\n- Use `bpy.props.PropertyOptions.HIDDEN` for the `options` argument.\n- All property arguments should be keyword arguments.\n- Remove deprecated positional arguments.\n\nIf you need to specify items for EnumProperty or other arguments, ensure you provide them as keyword arguments as well.",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new-style type annotations for properties, as direct assignment (e.g., `convex_style = bpy.props.EnumProperty(...)`) is deprecated. Instead, use type annotations with a class-level assignment, like this:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    convex_style: bpy.props.EnumProperty(\n        name=\"Convex Style\",\n        items=[('STYLE1', \"Style 1\", \"\"), ('STYLE2', \"Style 2\", \"\")]\n    )\n    convex_width: bpy.props.FloatProperty(\n        name=\"Convex Width\"\n    )\n    concave_style: bpy.props.EnumProperty(\n        name=\"Concave Style\",\n        items=[('STYLE1', \"Style 1\", \"\"), ('STYLE2', \"Style 2\", \"\")]\n    )\n    concave_width: bpy.props.FloatProperty(\n        name=\"Concave Width\"\n    )\n    freestyle_style: bpy.props.EnumProperty(\n        name=\"Freestyle Style\",\n        items=[('STYLE1', \"Style 1\", \"\"), ('STYLE2', \"Style 2\", \"\")]\n    )\n    freestyle_width: bpy.props.FloatProperty(\n        name=\"Freestyle Width\"\n    )\n    use_inbg: bpy.props.BoolProperty(\n        name=\"Use InBG\"\n    )\n    inbg_width: bpy.props.FloatProperty(\n        name=\"InBG Width\"\n    )\n    filepath: bpy.props.StringProperty(\n        name=\"File Path\"\n    )\n    filename: bpy.props.StringProperty(\n        name=\"File Name\"\n    )\n```\n\n**Key changes:**\n- Use the colon (`:`) for type annotation, not `=`.\n- Place property definitions inside a class derived from `bpy.types.PropertyGroup`.\n- Register the property group and assign it to a data block as needed.\n\nThis syntax is required for Blender 2.8+ and is fully compatible with Blender 4.4[4][5].",
      "In Blender 4.4, the direct use of property definitions like bpy.props.StringProperty, FloatProperty, BoolProperty, and EnumProperty at the module level is deprecated. Instead, you should define properties as class attributes within a PropertyGroup or directly in the class, and register them using type annotations. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty, EnumProperty, FloatProperty, BoolProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    directory: StringProperty()\n    page_size_preset: EnumProperty(items=[('A4', 'A4', ''), ('A3', 'A3', '')])  # Example items, adjust as needed\n    output_size_x: FloatProperty()\n    output_size_y: FloatProperty()\n    output_margin: FloatProperty()\n    output_type: EnumProperty(items=[('PNG', 'PNG', ''), ('JPG', 'JPG', '')])  # Example items, adjust as needed\n    do_create_stickers: BoolProperty()\n    do_create_numbers: BoolProperty()\n    sticker_width: FloatProperty()\n    angle_epsilon: FloatProperty()\n```\n\n- Each property is now defined as a type-annotated class attribute within a PropertyGroup subclass.\n- EnumProperty requires an items argument; you must specify the possible values.\n- Register this PropertyGroup and assign it to a context (e.g., bpy.types.Scene.my_props: PointerProperty(type=MyProperties)) as needed.\n\nThis approach is fully compatible with Blender 4.4 and follows the current API conventions[3].",
      "In Blender 4.4, the old bpy.props.*Property() API is still supported for backward compatibility, but the recommended usage is to define properties as class annotations using Python's type hinting syntax. This is required for all new add-ons and scripts, and the old assignment style is considered deprecated and will be removed in Blender 5.0[3][4].\n\nHere is how to migrate your property definitions to Blender 4.4+ compatible code:\n\n```python\nimport bpy\n\nclass MyClass(bpy.types.PropertyGroup):\n    output_dpi: bpy.props.FloatProperty()\n    file_format: bpy.props.EnumProperty()\n    image_packing: bpy.props.EnumProperty()\n    scale: bpy.props.FloatProperty()\n    do_create_uvmap: bpy.props.BoolProperty()\n    ui_expanded_document: bpy.props.BoolProperty()\n    ui_expanded_style: bpy.props.BoolProperty()\n    id: bpy.props.IntProperty(name=\"Face ID\")\n    label: bpy.props.StringProperty()\n    abbreviation: bpy.props.StringProperty()\n```\n\n**Key changes:**\n- Use the colon (:) annotation syntax instead of assignment (=).\n- Place property definitions inside a class derived from bpy.types.PropertyGroup, bpy.types.Operator, or bpy.types.Panel as appropriate.\n- Register the class with bpy.utils.register_class() as usual.\n\nThis is the only change required for property definitions to be fully compatible with Blender 4.4 and future versions[3][4].",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new annotation-based syntax for property declarations within classes, and register properties on types using annotations. Direct assignment to bpy.types.Mesh is no longer supported for custom properties; use bpy.props or the new ID property API for custom data.\n\nBelow are the corrected code lines for Blender 4.4:\n\n```python\n# For use inside a class derived from bpy.types.PropertyGroup or bpy.types.Operator:\nauto_label: bpy.props.BoolProperty()\nauto_abbrev: bpy.props.BoolProperty()\ndisplay_islands: bpy.props.BoolProperty()\nislands_alpha: bpy.props.FloatProperty()\nlimit_by_page: bpy.props.BoolProperty()\npage_size_preset: bpy.props.EnumProperty()\noutput_size_x: bpy.props.FloatProperty()\noutput_size_y: bpy.props.FloatProperty()\nscale: bpy.props.FloatProperty()\n```\n\nFor custom properties on Mesh, you should use the new ID property API or define a PropertyGroup and assign it as a pointer property. The old direct assignment is deprecated and will not work:\n\n```python\n# Instead of:\n# bpy.types.Mesh.paper_island_index = bpy.props.IntProperty()\n\n# Use a PropertyGroup:\nclass MyMeshProps(bpy.types.PropertyGroup):\n    paper_island_index: bpy.props.IntProperty()\n\n# Then register and assign:\nbpy.utils.register_class(MyMeshProps)\nbpy.types.Mesh.my_mesh_props = bpy.props.PointerProperty(type=MyMeshProps)\n```\n\n**Key changes:**\n- Use the colon (:) annotation syntax for properties inside classes.\n- For custom data on Blender types, use PropertyGroups and PointerProperty, not direct assignment.\n\nThese changes are required for Blender 2.80+ and fully compatible with Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_export_pc2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_unreal_psk_psa.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, **properties like StringProperty must be defined as class attributes inside a Blender PropertyGroup, Operator, or Panel class, not as standalone assignments**. The following is the correct way to define a StringProperty in Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    actionname: bpy.props.StringProperty(\n        name=\"Action Name\",\n        description=\"Name of the action\"\n    )\n```\n\n**Key changes:**\n- Define the property as a class attribute using the colon (:) syntax inside a class derived from bpy.types.PropertyGroup (or Operator, etc.).\n- Do not assign the result of bpy.props.StringProperty() to a variable at the module level[2].\n\nTo register the property group and add it to, for example, the Scene:\n\n```python\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nThis is the Blender 4.4 compatible approach[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_import_gimp_image_to_scene.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 2.8 and later (including 4.4), the old **scene.layers** API was removed. Instead, Blender uses the **ViewLayer** and **Collections** system. To set the active view layer or manipulate collections, you should use the following approach:\n\n```python\nbpy.context.window.view_layer = bpy.context.scene.view_layers[LayerName]\n```\n\nIf you want to ensure a collection is visible in the current view layer (the closest equivalent to enabling a layer in 2.79):\n\n```python\nbpy.context.view_layer.layer_collection.children[CollectionName].exclude = False\n```\n\nReplace **LayerName** with the name of the view layer (a string), and **CollectionName** with the name of the collection you want to show.\n\n**Note:** There is no direct equivalent to setting a layer by index as in 2.79; you must work with view layers and collections by name in Blender 4.4."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_import_images_as_planes.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_scene_lwo.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_scene_unreal_psa_psk.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\lighting_dynamic_sky.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_auto_mirror.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_bsurfaces.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_carver.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_custom_normals_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_f2.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties must be defined as class annotations using type hints, not as direct assignments. Replace your code with the following:\n\n```python\nadjustuv: bpy.props.BoolProperty()\nautograb: bpy.props.BoolProperty()\n```\n\nThese lines should be placed inside your class definition (e.g., an Operator or PropertyGroup), not at the module level."
    ],
    "errors": []
  },
  {
    "file": "addons\\mesh_looptools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_relax.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_snap_utilities_line.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\node_wrangler.py",
    "warnings": [],
    "api_suggestions": [
      "```python\n# Replace deprecated IntProperty usage (now imported from bpy.types)\nfrom bpy.types import IntProperty\n\nx: IntProperty()\ny: IntProperty()\n\n# For resizing, use the object mode context and set scale directly:\nobj = bpy.context.active_object\nobj.scale = (0.0, 0.0, 0.0)\n```\n\n**Notes:**\n- `bpy.props.IntProperty()` is now accessed as `bpy.types.IntProperty` and used with type annotations for class properties.\n- Directly setting `obj.scale` is the recommended way to resize objects in scripts, rather than using `bpy.ops.transform.resize`, which is intended for interactive use and may not work reliably in scripts or with zero values[1].\n- Ensure you have the correct context and object selection when setting `obj.scale`[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\object_animrenderbake.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_boolean_tools.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated line:\n\n```python\nbpy.ops.transform.resize('INVOKE_DEFAULT')\n```\n\nwith the following Blender 4.4 compatible code, specifying the resize value explicitly (as 'INVOKE_DEFAULT' is no longer used for direct scripting):\n\n```python\nbpy.ops.transform.resize(value=(1.0, 1.0, 1.0))\n```\n\nAdjust the tuple in `value=(...)` to your desired scale factors for each axis."
    ],
    "errors": []
  },
  {
    "file": "addons\\object_cloud_gen.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_edit_linked.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your code from Blender 2.79 to Blender 4.4, you must use the new property registration system. Direct assignment of properties to bpy.types.Scene is deprecated. Instead, use the @classmethod register/unregister pattern with bpy.props in a PropertyGroup, and register it with bpy.utils.register_class.\n\nHere is the Blender 4.4 compatible code block for your properties:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    use_autosave: bpy.props.BoolProperty(\n        name=\"Use Autosave\",\n        description=\"Enable autosave\",\n        default=False\n    )\n    use_instance: bpy.props.BoolProperty(\n        name=\"Use Instance\",\n        description=\"Enable instance\",\n        default=False\n    )\n\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key changes:**\n- Properties are now defined in a subclass of bpy.types.PropertyGroup.\n- Use PointerProperty to attach the group to bpy.types.Scene.\n- Register and unregister the class and property in the appropriate functions.\n\nThis is the recommended and required approach for Blender 4.0+ Python API[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\object_grease_scatter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_skinify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\paint_palette.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions must be assigned as class attributes, not as direct variable assignments. The following are the corrected code lines:\n\n```python\nfilepath: bpy.props.StringProperty(name=\"Path\")\nmenu_idname: bpy.props.StringProperty(name=\"Menu ID Name\")\n```\n\nAssigning properties with a colon (:) as class attributes is required for Blender 2.80 and later, including 4.4."
    ],
    "errors": []
  },
  {
    "file": "addons\\render_auto_tile_size.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_clay.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_freestyle_svg.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_clip_editor_autotracker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_clip_editor_refine_solution.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_3d_navigation.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_copy_attributes.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, properties for classes (such as operators or panels) must be defined as class attributes, not as instance variables, and must use the `bpy.props` module within a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, etc. The old style of assigning properties directly to variables outside a class is deprecated.\n\n**Replace your code with:**\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    mode: bpy.props.StringProperty(name=\"mode\")\n    layer: bpy.props.StringProperty(name=\"layer\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes using the `:` syntax (PEP 526 type annotations).\n- Properties must be inside a class derived from `bpy.types.PropertyGroup` (or another appropriate Blender type).\n\n**Registration example (if needed):**\n```python\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nThis is the Blender 4.4 compatible way to define custom properties[1][2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\space_view3d_modifier_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_spacebar_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\system_blend_info.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\system_property_chart.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ui_layer_manager.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties like IntProperty must be defined as class attributes within a class derived from bpy.types.PropertyGroup, bpy.types.Operator, etc., not as standalone variables. The correct usage is:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    group_idx: bpy.props.IntProperty()\n```\n\nReplace your original line with the above pattern, ensuring the property is defined as a class attribute using the colon (:) syntax."
    ],
    "errors": []
  },
  {
    "file": "addons\\uv_bake_texture_to_vcols.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_texture_atlas.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\add_light_template.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\add_mesh_aggregate.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\arrange_on_curve.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\circle_array.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\copy2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\cubester.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\make_struts.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\mesh_easylattice.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\object_add_chain.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\oscurart_chain_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\pixelate_3d.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated operator-based scaling with direct manipulation of the object's scale property. In Blender 4.4, use:\n\n```python\nobj = bpy.context.active_object\nobj.scale = [sca, sca, sca]\n```\n\nThis sets the object's scale directly and is the recommended, non-operator approach for scripting in modern Blender versions."
    ],
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\random_box_structure.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated operator call:\n\n```python\nbpy.ops.transform.resize(\n```\n\nwith direct data API manipulation, as operator calls like bpy.ops.transform.resize are discouraged in scripts for Blender 4.x. For mesh objects, set the scale directly:\n\n```python\nobj = bpy.context.active_object\nobj.scale = (sx, sy, sz)  # Replace sx, sy, sz with your desired scale factors\n```\n\nIf you need to apply the scale (make it permanent):\n\n```python\nbpy.ops.object.transform_apply(location=False, rotation=False, scale=True)\n```\n\nThis approach is fully compatible with Blender 4.4 and avoids deprecated API usage."
    ],
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\rope_alpha.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated operator-based resize call with direct data manipulation using the object's scale property, which is the recommended approach in Blender 4.4:\n\n```python\nobj = bpy.context.active_object\nobj.scale = (sx, sy, sz)  # Replace sx, sy, sz with your desired scale factors\n```\n\nIf you need to apply the scale (make it permanent):\n\n```python\nbpy.ops.object.transform_apply(location=False, rotation=False, scale=True)\n```\n\nDirectly manipulating the scale property is preferred over using bpy.ops.transform.resize in modern Blender scripting."
    ],
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\scene_objects_bi.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\scene_objects_cycles.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\scene_texture_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\trilighting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_menu\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\DelaunayVoronoi.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\delaunay_voronoi.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\drop_to_ground.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\object_laplace_lightning.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, **custom properties should be defined on classes, not directly on bpy.types.Object**. The correct approach is to define a property inside a class derived from bpy.types.PropertyGroup or bpy.types.Object, and then register it. Here is the migrated code:\n\n```python\nimport bpy\n\nclass MyObjectProperties(bpy.types.PropertyGroup):\n    FSLG_REPORT: bpy.props.StringProperty(\n        name=\"FSLG Report\",\n        description=\"Custom report string\",\n        default=\"\"\n    )\n\ndef register():\n    bpy.utils.register_class(MyObjectProperties)\n    bpy.types.Object.fslg_report = bpy.props.PointerProperty(type=MyObjectProperties)\n\ndef unregister():\n    del bpy.types.Object.fslg_report\n    bpy.utils.unregister_class(MyObjectProperties)\n```\n\n**Key changes:**\n- Use a PropertyGroup to hold the custom property.\n- Register the PropertyGroup and assign it to Object via a PointerProperty.\n- Do not assign properties directly to bpy.types.Object[2].\n\nThis is the Blender 4.4 compatible way to add custom properties to objects."
    ],
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\object_mangle_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\oscurart_constellation.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\unfold_transition.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_advanced_objects_panels\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_aceous_galore.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_braid.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_celtic_links.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_curly.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_simple.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_spirals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_spirofit_bouncespline.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_curve_torus_knots.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\add_surface_plane_cone.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate the deprecated use of bpy.ops.transform.resize from Blender 2.79 to Blender 4.4, you should avoid using operators for programmatic transformations and instead directly set the object's scale property. The modern, recommended approach is:\n\n```python\nimport bpy\n\nobj = bpy.context.active_object  # or specify your object\n\nobj.scale = (size, size, size)\n```\n\nReplace all instances of bpy.ops.transform.resize(...) with direct assignment to the object's .scale property as shown above. This is the Blender 4.4 compatible method for resizing objects via Python[5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\beveltaper_curve.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_extra_objects\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\callistemon.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\douglas_fir.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\japanese_maple.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\quaking_aspen.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\small_maple.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\small_pine.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\weeping_willow.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\white_birch.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_curve_sapling\\presets\\willow.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_BoltFactory\\Boltfactory.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_BoltFactory\\createMesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_BoltFactory\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_empty_as_parent.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_3d_function_surface.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_beam_builder.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_gears.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_gemstones.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_honeycomb.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_menger_sponge.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_pipe_joint.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_pyramid.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_round_brilliant.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_round_cube.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_solid.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_star.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_supertoroid.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_teapot.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_torusknot.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_triangles.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_twisted_torus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\add_mesh_vertex.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\Blocks.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\mesh_discombobulator.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of property definitions has changed: you must now use type annotations for class properties. The old assignment style using `bpy.props.BoolProperty` is deprecated.\n\n**Replace:**\n```python\nremove_all = bpy.props.BoolProperty(\n    name=\"Remove All\",\n    description=\"Remove all items\",\n    default=False\n)\n```\n\n**With:**\n```python\nremove_all: bpy.props.BoolProperty(\n    name=\"Remove All\",\n    description=\"Remove all items\",\n    default=False\n)\n```\n\n**Key change:**  \n- Use a colon (`:`) for type annotation, not an equals sign (`=`), when defining properties in Blender 4.4 Python API[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\Wallfactory.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\geodesic_domes\\add_shape_geodesic.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\geodesic_domes\\forms_271.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\geodesic_domes\\geodesic_classes_271.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\geodesic_domes\\third_domes_panel_271.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\geodesic_domes\\vefm_271.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\add_mesh_extra_objects\\geodesic_domes\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\add_mesh_ant_landscape.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\ant_functions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\ant_noise.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\eroder.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\mesh_ant_displace.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\stats.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ant_landscape\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_books_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_column_maker.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the direct use of property definitions like `bpy.props.FloatProperty`, `BoolProperty`, and `EnumProperty` at the module level is deprecated. Properties must now be defined as class attributes within Blender PropertyGroup, Operator, or Panel classes, and registered accordingly.\n\nBelow is the corrected code block for Blender 4.4 compatibility. Replace your property definitions with the following inside your class (e.g., a PropertyGroup):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    model: bpy.props.EnumProperty(\n        name=\"Model\",\n        items=[\n            ('OPTION1', \"Option 1\", \"\"),\n            ('OPTION2', \"Option 2\", \"\"),\n            # Add more options as needed\n        ]\n    )\n    keep_size: bpy.props.BoolProperty(\n        name=\"Keep Size\",\n        default=False\n    )\n    rad_top: bpy.props.FloatProperty(\n        name=\"Top Radius\",\n        default=1.0\n    )\n    rad_mid: bpy.props.FloatProperty(\n        name=\"Mid Radius\",\n        default=1.0\n    )\n    shift: bpy.props.FloatProperty(\n        name=\"Shift\",\n        default=0.0\n    )\n    rad_bottom: bpy.props.FloatProperty(\n        name=\"Bottom Radius\",\n        default=1.0\n    )\n    col_height: bpy.props.FloatProperty(\n        name=\"Column Height\",\n        default=2.0\n    )\n    col_sx: bpy.props.FloatProperty(\n        name=\"Column SX\",\n        default=1.0\n    )\n    col_sy: bpy.props.FloatProperty(\n        name=\"Column SY\",\n        default=1.0\n    )\n    cir_base: bpy.props.BoolProperty(\n        name=\"Circular Base\",\n        default=False\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not assigned with `=`.\n- All properties must be inside a class derived from `bpy.types.PropertyGroup` (or another appropriate Blender type).\n- Register your class with `bpy.utils.register_class(MyProperties)` and assign it to a context (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`).\n\nThis approach is required for Blender 2.80+ and is fully compatible with Blender 4.4[2][3].",
      "To migrate your property definitions to be compatible with **Blender 4.4**, you must define them as class attributes inside a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar, using **keyword arguments** only. Direct assignment to variables outside a class is no longer supported.\n\nHere is the corrected code block for use inside a class (e.g., a `PropertyGroup`):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    cir_base_r: bpy.props.FloatProperty(name=\"Circle Base Radius\")\n    cir_base_z: bpy.props.FloatProperty(name=\"Circle Base Z\")\n    cir_top: bpy.props.BoolProperty(name=\"Circle Top\")\n    cir_top_r: bpy.props.FloatProperty(name=\"Circle Top Radius\")\n    cir_top_z: bpy.props.FloatProperty(name=\"Circle Top Z\")\n    box_base: bpy.props.BoolProperty(name=\"Box Base\")\n    box_base_x: bpy.props.FloatProperty(name=\"Box Base X\")\n    box_base_y: bpy.props.FloatProperty(name=\"Box Base Y\")\n    box_base_z: bpy.props.FloatProperty(name=\"Box Base Z\")\n    box_top: bpy.props.BoolProperty(name=\"Box Top\")\n```\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not assigned to variables.\n- All parameters to property functions (like `name`) must be passed as keywords[1].\n- Register your class and assign it to a data block (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`).\n\nThis format is fully compatible with Blender 4.4[1].",
      "In Blender 4.4, property definitions must be placed inside a class derived from bpy.types.PropertyGroup (or similar), and registered using annotations. The direct use of bpy.props.*Property at the module level is deprecated. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    box_top_x: bpy.props.FloatProperty()\n    box_top_y: bpy.props.FloatProperty()\n    box_top_z: bpy.props.FloatProperty()\n    arc_top: bpy.props.BoolProperty()\n    arc_radio: bpy.props.FloatProperty()\n    arc_width: bpy.props.FloatProperty()\n    arc_gap: bpy.props.FloatProperty()\n    crt_mat: bpy.props.BoolProperty()\n    crt_array: bpy.props.BoolProperty()\n    array_num_x: bpy.props.IntProperty()\n```\n\nYou must then register this class and assign it to a context (such as bpy.types.Scene, bpy.types.Object, etc.) as needed. The key change is the use of type annotations (:) instead of assignment (=), and placing properties inside a PropertyGroup subclass[1][3].",
      "Replace the deprecated property definitions with the new-style annotation syntax, which is required in Blender 2.80+ and fully compatible with Blender 4.4. The corrected code lines are:\n\n```python\narray_space_x: bpy.props.FloatProperty()\narray_num_y: bpy.props.IntProperty()\narray_space_y: bpy.props.FloatProperty()\narray_space_z: bpy.props.FloatProperty()\nramp: bpy.props.BoolProperty()\narray_space_factor: bpy.props.FloatProperty()\n```\n\nThis uses the **type annotation syntax** (colon, not equals) for property definitions, as required for all Blender Python API code from 2.80 onward and in 4.4[1][3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_curtain_maker.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated direct assignment of property definitions with **annotations** using the `: bpy.props.PropertyType` syntax. In Blender 2.8+ (including 4.4), properties must be defined as class annotations, not as direct assignments. Here is the corrected code block:\n\n```python\nwidth: bpy.props.FloatProperty()\nheight: bpy.props.FloatProperty()\nnum: bpy.props.IntProperty()\npalnum: bpy.props.IntProperty()\nopen01: bpy.props.FloatProperty()\nopen02: bpy.props.FloatProperty()\nopen03: bpy.props.FloatProperty()\nopen04: bpy.props.FloatProperty()\nopen05: bpy.props.FloatProperty()\ncrt_mat: bpy.props.BoolProperty()\n```\n\n**Note:**  \n- These lines should be placed inside your class definition (e.g., a `bpy.types.PropertyGroup` or `bpy.types.Operator` subclass).\n- Do not use `=` for property assignment outside of annotations; use the `:` syntax for Blender 2.8+ compatibility[3].",
      "In Blender 4.4, the direct use of property definitions like `bpy.props.FloatProperty` and `bpy.props.BoolProperty` at the module level is deprecated. Instead, you should use type annotations within a class that inherits from `bpy.types.PropertyGroup` or similar, and register the properties using `bpy.props` as type hints.\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    width: bpy.props.FloatProperty()\n    height: bpy.props.FloatProperty()\n    crt_mat: bpy.props.BoolProperty()\n```\n\nYou must then register this class and assign it to a context (such as `bpy.types.Scene.my_props: PointerProperty(type=MyProperties)`), but the above code block shows the direct migration of the property definitions themselves."
    ],
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_door_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_gltools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_kitchen_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_lamp_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_main_panel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_roof_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_room_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_shelves_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_stairs_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_venetian_maker.py",
    "warnings": [
      "AST parse error in subclass check: invalid non-printable character U+FEFF (<unknown>, line 1)"
    ],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_window_maker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\achm_window_panel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archimesh\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_2d.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_autoboolean.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_cutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_door.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_fence.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_floor.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_gl.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_handle.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_keymaps.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_manipulator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_material.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_object.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_preset.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_progressbar.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_reference_point.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_rendering.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_roof.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_slab.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_snap.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_stair.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_thumbs.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_truss.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_wall2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\archipack_window.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\panel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_door\\160x200_dual.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_door\\400x240_garage.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_door\\80x200.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_fence\\glass_panels.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_fence\\inox_glass_concrete.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_fence\\metal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_fence\\metal_glass.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_fence\\wood.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\boards_200x20.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\herringbone_50x10.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\herringbone_p_50x10.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\hexagon_10.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\hopscotch_30x30.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\parquet_15x3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\stepping_stone_30x30.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\tile_30x60.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_floor\\windmill_30x30.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\braas_1.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\braas_2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\eternit.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\lauze.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\metal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\ondule.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\roman.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\round.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_roof\\square.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_stair\\i_wood_over_concrete.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_stair\\l_wood_over_concrete.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_stair\\o_wood_over_concrete.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_stair\\u_wood_over_concrete.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\120x110_flat_2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\120x110_flat_2_elliptic.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\120x110_flat_2_oblique.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\120x110_flat_2_round.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\180x110_flat_3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\180x210_flat_3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\180x210_rail_2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\240x210_rail_3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\80x80_flat_1.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\archipack\\presets\\archipack_window\\80x80_flat_1_circle.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\blender_id\\communication.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\blender_id\\profiles.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\blender_id\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\btrace\\bTrace.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\btrace\\bTrace_props.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\btrace\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\cycles\\engine.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\cycles\\osl.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\cycles\\presets.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\cycles\\properties.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\cycles\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\cycles\\version_update.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\cycles\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\addon_updater.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\addon_updater_ops.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.0 and later, the old property registration functions like bpy.props.BoolProperty, EnumProperty, and StringProperty are deprecated for direct assignment to class attributes. Instead, you should use the new annotation-based syntax with type hints. Here is how you migrate your code:\n\n```python\nclean_install: bpy.props.BoolProperty()\nignore_enum: bpy.props.EnumProperty()\ntarget: bpy.props.EnumProperty()\nerror: bpy.props.StringProperty()\n```\n\n**Key changes:**\n- Use a colon (:) and type annotation, not an equals sign (=).\n- Do not assign the property to a variable; annotate it as a class attribute.\n\nIf you need to specify parameters (e.g., name, description, default), include them inside the parentheses as before.\n\n**Example with parameters:**\n```python\nclean_install: bpy.props.BoolProperty(\n    name=\"Clean Install\",\n    description=\"Perform a clean installation\",\n    default=False\n)\n```\n\nThis syntax is required for Blender 2.80+ and is fully compatible with Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\articulator.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions like BoolProperty must be assigned as class attributes within a PropertyGroup or similar, not as standalone variables. The direct assignment you provided is deprecated.\n\n**Replace:**\n```python\nhide = bpy.props.BoolProperty(default = False)\n```\n\n**With:**\n```python\nimport bpy\nfrom bpy.props import BoolProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    hide: BoolProperty(default=False)\n```\n\nYou must then register this PropertyGroup and assign it to a data block (e.g., scene, object) as needed. The key change is using the colon (:) for type annotations and defining the property inside a class derived from PropertyGroup."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\articulator_drivers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\articulator_handlers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\articulator_math.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\attachments.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated property definitions with the new-style type annotations and assignment, as required in Blender 2.80+ and still current in Blender 4.4. The properties should be defined as class attributes using type hints, not as direct assignments in the class body. Here is the corrected code block:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    axis: bpy.props.EnumProperty(\n        name='Axis',\n        items=[\n            ('X', 'X', 'X'),\n            ('Y', 'Y', 'Y'),\n            ('Z', 'Z', 'Z'),\n            ('-X', '-X', '-X'),\n            ('-Y', '-Y', '-Y'),\n            ('-Z', '-Z', '-Z')\n        ],\n        default='Z'\n    )\n    mode: bpy.props.EnumProperty(\n        name='Merge Mode',\n        items=[\n            ('BOOLEAN', 'BOOLEAN', 'BOOLEAN'),\n            ('VOLUME', 'VOLUME', 'VOLUME')\n        ],\n        default='VOLUME'\n    )\n    v_res: bpy.props.FloatProperty(\n        name='Voxel Size',\n        min=0.1,\n        max=0.3,\n        default=0.15\n    )\n    optimize: bpy.props.BoolProperty(\n        name='Decimate',\n        default=True\n    )\n    jaw_mode: bpy.props.EnumProperty(\n        name='Merge Mode',\n        items=[\n            ('MAX', 'MAX', 'MAX'),\n            ('MAND', 'MAND', 'MAND'),\n            ('BOTH', 'BOTH', 'BOTH')\n        ],\n        default='BOTH'\n    )\n    all_positions: bpy.props.BoolProperty(\n        name='All Positions',\n        default=True,\n        description='Create a unique shell for all stored positions'\n    )\n```\n\n**Key changes:**\n- Use `axis: bpy.props.EnumProperty(...)` instead of `axis = bpy.props.EnumProperty(...)`.\n- All property definitions must be class attributes with type annotations, not simple assignments[1][3][5].\n- This format is required for Blender 2.80 and newer, including 4.4."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bgl_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_status.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_test_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\blobs.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bmesh_curvature.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bmesh_fns.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bracket_placement.py",
    "warnings": [],
    "api_suggestions": [
      "The correct way to define an **EnumProperty** in Blender 4.4 is to assign it as a class attribute within a class derived from `PropertyGroup`, `Operator`, or similar, or to a type (such as `bpy.types.Scene`). The direct assignment to a variable as in your Blender 2.79 code is deprecated.\n\n**Replace:**\n```python\nob = bpy.props.EnumProperty(name=\"Bracket Library Objects\",\n                            items=[('A', 'A', ''), ('B', 'B', '')])\n```\n\n**With (for example, as a property of a PropertyGroup):**\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    bracket_library_objects: bpy.props.EnumProperty(\n        name=\"Bracket Library Objects\",\n        items=[\n            ('A', 'A', ''),\n            ('B', 'B', '')\n        ]\n    )\n\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\n**Or, if you want to add it directly to a type (e.g., Scene):**\n```python\nbpy.types.Scene.bracket_library_objects = bpy.props.EnumProperty(\n    name=\"Bracket Library Objects\",\n    items=[\n        ('A', 'A', ''),\n        ('B', 'B', '')\n    ]\n)\n```\n**Key changes:**\n- Do not assign the result of `bpy.props.EnumProperty` to a variable; assign it as a class attribute or to a Blender type[3][5].\n- Use the colon (`:`) syntax for class attributes in Python 3.6+.\n\nThis is fully compatible with Blender 4.4."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bridge.py",
    "warnings": [],
    "api_suggestions": [
      "To update your Blender 2.79 property definitions for **Blender 4.4 compatibility**, you need to:\n\n- Remove deprecated arguments: `step` and `precision` are no longer supported in property definitions.\n- The `options={'ANIMATABLE'}` argument is still valid, but you may omit it unless you specifically need animation support.\n- The rest of the property definitions remain largely the same, but ensure you use the current API signatures.\n\nHere are the **corrected property definitions** for Blender 4.4:\n\n```python\n# mvert_adj = bpy.props.FloatProperty(name=\"M. Vertical Adjust\", description=\"\", default=0, min=-2, max=2, options={'ANIMATABLE'})\n# mlat_adj = bpy.props.FloatProperty(name=\"M. Lateral Adjust\", description=\"\", default=0, min=-2, max=2, options={'ANIMATABLE'})\n# dvert_adj = bpy.props.FloatProperty(name=\"D Vertical Adjust\", description=\"\", default=0, min=-2, max=2, options={'ANIMATABLE'})\n# dlat_adj = bpy.props.FloatProperty(name=\"D Lateral Adjust\", description=\"\", default=0, min=-2, max=2, options={'ANIMATABLE'})\nbulbous = bpy.props.FloatProperty(name=\"bulbous\", description=\"\", default=0.5, min=0, max=1.5, options={'ANIMATABLE'})\ntwist = bpy.props.IntProperty(name=\"twist\", description=\"twist\", default=0, min=-5, max=5, options={'ANIMATABLE'})\nsmooth = bpy.props.IntProperty(name=\"smooth\", description=\"smooth\", default=3, min=0, max=20, options={'ANIMATABLE'})\nmethod = bpy.props.EnumProperty(\n    name='Method',\n    items=[\n        ('0', 'DEFORM', '0'),\n        ('1', 'SLICE', '1')\n    ],\n    default='0'\n)\nsep = bpy.props.FloatProperty(name=\"Separation\", description=\"Slice Thickness\", default=0.5, min=-10, max=10, options={'ANIMATABLE'})\napply = bpy.props.BoolProperty(name=\"Apply\", description=\"Apply the deformation and delete lattice\", default=False, options={'ANIMATABLE'})\n```\n\n**Key changes:**\n- Removed `step` and `precision` from all `FloatProperty` and `IntProperty` definitions.\n- The rest of the arguments remain unchanged and are compatible with Blender 4.4[3][4].\n\nIf you need to register these as class properties (e.g., in an `Operator` or `PropertyGroup`), the assignment syntax remains the same.",
      "The options={'ANIMATABLE'} argument in property definitions is deprecated and should be removed in Blender 4.4. The rest of the property definitions remain valid. Here are the corrected lines:\n\n```python\noct = bpy.props.IntProperty(name=\"Resolution\", description=\"Octree Depth\", default=4, min=1, max=10)\ngrid = bpy.props.FloatProperty(name=\"Grid\", description=\"Grid\", default=1, min=.01, max=10)\nsmooth = bpy.props.IntProperty(name=\"smooth\", description=\"# of smooth iterations\", default=5, min=1, max=20)\n```\n\nRemove the options={'ANIMATABLE'} argument for Blender 4.4 compatibility[2][3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bridge_methods.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\button_draw_handler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\button_placement.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\common_drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\common_drawing_view.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\common_utilities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\composite_buttons.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, properties must be defined as class attributes inside a subclass of `bpy.types.PropertyGroup`, and then registered with Blender. The direct assignment to variables as in Blender 2.79 is deprecated. Here is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    wi: bpy.props.FloatProperty(\n        default=2.0, min=1.0, max=6.0, description='Incisal width'\n    )\n    wg: bpy.props.FloatProperty(\n        default=3.0, min=1.0, max=6.0, description='Gingival width'\n    )\n    hg: bpy.props.FloatProperty(\n        default=2.0, description='height at the gingival aspect of the button'\n    )\n    hi: bpy.props.FloatProperty(\n        default=2.0, description='height at the incisal aspect of the button'\n    )\n    dig: bpy.props.FloatProperty(\n        default=4.0, description='incisal gingival length of ramp'\n    )\n    theta_i: bpy.props.IntProperty(\n        default=7, min=-30, max=30, description='incisal angle of the surface'\n    )\n    theta_g: bpy.props.IntProperty(\n        default=7, min=-30, max=30, description='gingival angle of the surface'\n    )\n    theta_m: bpy.props.IntProperty(\n        default=7, min=-30, max=30, description='mesial angle of the surface'\n    )\n    theta_d: bpy.props.IntProperty(\n        default=7, min=-30, max=30, description='distal angle of the surface'\n    )\n    theta_warp: bpy.props.IntProperty(\n        default=0, min=-30, max=30, description='curvature of the attachment'\n    )\n```\n\n**Usage:**  \n- Register the class and assign it to a data block, e.g., `bpy.types.Scene.my_props: bpy.props.PointerProperty(type=MyProperties)`.\n- Access properties via `bpy.context.scene.my_props.wi`, etc.\n\nThis approach is required for Blender 2.80+ and fully compatible with Blender 4.4[3][4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\convex_mask.py",
    "warnings": [],
    "api_suggestions": [
      "height: bpy.props.FloatProperty(\n    name=\"Height\",\n    default=5.0,\n    min=1.0,\n    max=6.0,\n    options={'ANIMATABLE'}\n)"
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\crown.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties must be defined as class attributes using type annotations (the colon syntax), typically inside a subclass of bpy.types.PropertyGroup. The old assignment style is deprecated. Here is the migrated code block:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    abutment: bpy.props.BoolProperty(name=\"abutment\", default=False)\n    for_all: bpy.props.BoolProperty(default=True)\n    keep_orientation: bpy.props.BoolProperty(default=False, name=\"Keep Orientation\")\n    ob_list: bpy.props.EnumProperty(\n        name=\"Tooth Library Objects\",\n        description=\"A List of the tooth library\",\n        items=item_cb\n    )\n    sculpt: bpy.props.BoolProperty(default=True)\n    influence: bpy.props.FloatProperty(\n        name=\"Nearby Influence\",\n        description=\"\",\n        default=1,\n        min=0.1,\n        max=2,\n        step=2,\n        precision=1,\n        options={'ANIMATABLE'}\n    )\n    holy_zone: bpy.props.FloatProperty(\n        name=\"Holy Zone Width\",\n        description=\"\",\n        default=0.4,\n        min=0.2,\n        max=2,\n        step=5,\n        precision=1,\n        options={'ANIMATABLE'}\n    )\n    chamfer: bpy.props.FloatProperty(\n        name=\"Chamfer\",\n        description=\"0 = shoulder 1 = feather\",\n        default=0.2,\n        min=0,\n        max=1,\n        step=2,\n        precision=2,\n        options={'ANIMATABLE'}\n    )\n    gap: bpy.props.FloatProperty(\n        name=\"Gap Thickness\",\n        description=\"thickness required for cement\",\n        default=0.07,\n        min=0.01,\n        max=0.5,\n        step=2,\n        precision=2,\n        options={'ANIMATABLE'}\n    )\n    no_undercuts: bpy.props.BoolProperty(\n        name=\"No Undercuts\",\n        description=\"Uncheck if there are significant undercuts\",\n        default=True\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations (`:`), not assignments (`=`) at the module level[2].\n- Place all properties inside a `PropertyGroup` subclass[2].\n- Register the class and add a `PointerProperty` to the relevant data block (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`) in your register function.\n\nThis is the Blender 4.4 compatible way to define custom properties.",
      "Here are the **Blender 4.4 compatible property definitions**. The main changes are:\n\n- Use the new `bpy.props` API: `step` and `precision` are deprecated and should be removed.\n- Use `subtype='ANGLE'` and `unit='ROTATION'` as before, but ensure the `unit` argument is supported (it is in 4.x).\n- The `options={'ANIMATABLE'}` is still valid.\n- EnumProperty `default` should match the type of the first element in `items` (usually a string, not an int).\n- All properties should be defined as class attributes inside a class derived from `PropertyGroup`, `Operator`, or `Panel`, not as loose variables.\n\n**Corrected code block for Blender 4.4:**\n\n```python\nimport bpy\nimport math\n\nang = bpy.props.FloatProperty(\n    name=\"Angle\",\n    description=\"\",\n    default=math.pi/12,\n    min=0,\n    options={'ANIMATABLE'},\n    subtype='ANGLE',\n    unit='ROTATION'\n)\n\nmethod = bpy.props.IntProperty(\n    default=1\n)\n\nmargin_width = bpy.props.FloatProperty(\n    name=\"Chamfer Depth\",\n    description=\"\",\n    default=0.5,\n    min=0.1,\n    max=2,\n    options={'ANIMATABLE'}\n)\n\nreduction = bpy.props.FloatProperty(\n    name=\"Occlusal Reduction\",\n    description=\"\",\n    default=0.5,\n    min=0.1,\n    max=4,\n    options={'ANIMATABLE'}\n)\n\nmake_inside = bpy.props.BoolProperty(\n    name=\"Make Inside\",\n    description=\"Use if making prefab temp shell\",\n    default=True\n)\n\np_type = bpy.props.EnumProperty(\n    name=\"Pontic Type\",\n    description=\"How To Shape the pontic\",\n    items=p_enum,\n    default='0'  # Ensure this matches the identifier string in p_enum\n)\n\noffset = bpy.props.FloatProperty(\n    name=\"Tissue spacer\",\n    description=\"\",\n    default=1,\n    min=-1,\n    max=4,\n    options={'ANIMATABLE'}\n)\n\nmin_d = bpy.props.FloatProperty(\n    name=\"Touching\",\n    description=\"\",\n    default=0,\n    min=0,\n    max=1,\n    options={'ANIMATABLE'}\n)\n\nmax_d = bpy.props.FloatProperty(\n    name=\"Max D\",\n    description=\"\",\n    default=0.5,\n    min=0.1,\n    max=2,\n    options={'ANIMATABLE'}\n)\n\nmesial = bpy.props.BoolProperty(\n    default=True\n)\n```\n\n**Key changes:**\n- Removed `step` and `precision` (no longer supported).\n- For `EnumProperty`, ensure `default` is a string matching one of the identifiers in `items`.\n- All other arguments are still valid in Blender 4.4.\n\nIf you are defining these inside a class, use them as class attributes:\n\n```python\nclass MyProps(bpy.types.PropertyGroup):\n    ang: bpy.props.FloatProperty(...)\n    # etc.\n```\n\nIf you need the full class example, let me know.",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must now define properties as class annotations using Python's type hinting (PEP 526), rather than assigning them directly to class attributes. The direct assignment style (e.g., myprop = bpy.props.BoolProperty(...)) is deprecated and will not work in Blender 4.x[5].\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty, FloatProperty, EnumProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    distal: BoolProperty(default=True)\n    overlap: FloatProperty(name='Offset', default=0.05)\n    arch_type: EnumProperty(\n        # ... (add your items and other arguments here)\n    )\n    shift: EnumProperty(\n        # ... (add your items and other arguments here)\n    )\n    mirror: BoolProperty(\n        # ... (add your arguments here)\n    )\n    reverse: BoolProperty(\n        # ... (add your arguments here)\n    )\n    link: BoolProperty(\n        # ... (add your arguments here)\n    )\n    limit: BoolProperty(\n        # ... (add your arguments here)\n    )\n```\n\nKey changes:\n- Use **type annotations** (e.g., `distal: BoolProperty(...)`) instead of direct assignment.\n- Only define each property once per class.\n- Place all property definitions inside a class derived from `bpy.types.PropertyGroup`.\n\nYou must also register this PropertyGroup and assign it to a data block (e.g., `bpy.types.Scene.my_props: PointerProperty(type=MyProperties)`) as needed, but the above block covers the migration of the property definitions themselves[5].",
      "In Blender 4.4, the recommended way to define properties is to use type annotations within a class derived from bpy.types.PropertyGroup, rather than assigning bpy.props.BoolProperty directly to variables at the module level. Here is the migrated code block:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    reverse: BoolProperty(\n        name=\"Reverse\",\n        description=\"Reverse the operation\",\n        default=False\n    )\n    link: BoolProperty(\n        name=\"Link\",\n        description=\"Link the operation\",\n        default=False\n    )\n```\n\nYou then register this PropertyGroup and assign it to a context type (e.g., Scene):\n\n```python\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key changes:**\n- Use type annotations (e.g., reverse: BoolProperty(...)) inside a PropertyGroup class.\n- Register the PropertyGroup and assign it as a PointerProperty to a Blender data type (such as Scene)[2][4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\crown_methods.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated `bpy.ops.transform.resize` operator with direct manipulation of the object's scale property, which is the recommended approach in Blender 4.4:\n\n```python\nobj = bpy.context.active_object\nobj.scale = (scale_x, scale_y, scale_z)\n\n# Example: scale by 1.1 on all axes\nobj.scale = (1.1, 1.1, 1.1)\n```\n\nThis method is more robust and compatible with Blender 4.4's Python API."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\curve.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\curve_partition.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of bpy.props.IntProperty and bpy.props.FloatProperty as standalone assignments is deprecated. Properties must be defined within a class derived from bpy.types.PropertyGroup or as class attributes in operator/panel/addon classes. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    n_partitions: bpy.props.IntProperty(default=15)\n    max_edge: bpy.props.FloatProperty(default=15.0)\n```\n\nYou must then register this PropertyGroup and assign it to a context (such as bpy.types.Scene, bpy.types.Object, etc.) as needed. The direct assignment pattern from Blender 2.79 is no longer supported[3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3dual_classes.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old-style property definitions using direct assignment (e.g., cls.prop = bpy.props.StringProperty(...)) are deprecated. Properties must now be defined as class-level annotations using Python's type hinting and the new annotation syntax. Here is the corrected code block for your properties:\n\n```python\nimport bpy\n\nclass YourClassName(bpy.types.PropertyGroup):\n    master: bpy.props.StringProperty()\n    opposing: bpy.props.StringProperty()\n    bone: bpy.props.StringProperty()\n    register_II: bpy.props.BoolProperty()\n    work_log: bpy.props.StringProperty(name=\"Work Log\", default=\"\")\n    work_log_path: bpy.props.StringProperty(name=\"Work Log File\", subtype=\"DIR_PATH\", default=\"\")\n    show_teeth: bpy.props.BoolProperty()\n    show_bridge: bpy.props.BoolProperty()\n    show_implant: bpy.props.BoolProperty()\n    show_splint: bpy.props.BoolProperty()\n```\nReplace YourClassName with the actual class name you are using. This syntax is required for Blender 2.80+ and is fully compatible with Blender 4.4[1][3][5].",
      "Here is the corrected code block for Blender 4.4 compatibility. The main changes are:\n\n- Use the new property registration system: properties must be defined as class annotations (using type hints and assignment), not as direct assignments to class attributes.\n- All property definitions must be at the class level, inside a class that inherits from bpy.types.PropertyGroup, bpy.types.Operator, etc.\n- Remove deprecated direct assignment to bpy.props in the class body.\n- For properties on bpy.types.Scene, use bpy.types.Scene.<property> = bpy.props.<Type>Property(...) as before, but ensure all arguments are keyword arguments.\n\nBelow is the migrated code:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty, StringProperty, IntProperty\n\n# Example PropertyGroup for class-level properties\nclass MySplintProperties(bpy.types.PropertyGroup):\n    show_ortho: BoolProperty(\n        name=\"Show Ortho\"\n    )\n    name: StringProperty(\n        name=\"Splint Name\",\n        default=\"\"\n    )\n    max_model: StringProperty(\n        name=\"Maxillary Model\",\n        default=\"\"\n    )\n    mand_model: StringProperty(\n        name=\"Mandibular Model\",\n        default=\"\"\n    )\n    face_model: StringProperty(\n        name=\"Face Model\",\n        default=\"\"\n    )\n    max_perim_model: StringProperty(\n        name=\"Maxillary Perim Model\",\n        default=\"\"\n    )\n    max_trimmed_model: StringProperty(\n        name=\"Maxillary Trimmed Model\",\n        default=\"\"\n    )\n    link_active: BoolProperty(\n        name=\"Link\",\n        description=\"Link active object as base model for splint\",\n        default=True\n    )\n\n# Register the PropertyGroup and add to Scene if needed\ndef register():\n    bpy.utils.register_class(MySplintProperties)\n    bpy.types.Scene.my_splint_props = bpy.props.PointerProperty(type=MySplintProperties)\n    bpy.types.Scene.odc_splint_index = IntProperty(\n        name=\"Working Splint Index\",\n        min=0,\n        default=0,\n        update=index_update  # Ensure index_update is defined elsewhere\n    )\n\ndef unregister():\n    del bpy.types.Scene.my_splint_props\n    del bpy.types.Scene.odc_splint_index\n    bpy.utils.unregister_class(MySplintProperties)\n```\n\n**Key points:**\n- All property definitions for custom classes must use type annotations (e.g., `show_ortho: BoolProperty(...)`).\n- Scene properties are still assigned directly to `bpy.types.Scene`, but all arguments must be keyword arguments.\n- `PointerProperty` is used to attach the custom property group to the scene.\n\nThis code is compatible with Blender 4.4 and follows the current API requirements.",
      "To migrate your code to **Blender 4.4**, you need to use the new property API, which replaces the old direct assignment of properties to classes. In Blender 4.x, properties must be defined using type annotations and the `bpy.props` module, typically as class variables with type hints.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty\n\nclass YourClassName(bpy.types.PropertyGroup):\n    max_refractory: StringProperty(name=\"Maxillary Refractory Model\", default=\"\")\n    max_axis: StringProperty(name=\"Maxillary Insertion\", default=\"\")\n    max_margin: StringProperty(name=\"Maxillary Margin\", default=\"\")\n    max_shell: StringProperty(name=\"Maxillary Shell\", default=\"\")\n    mand_perim_model: StringProperty(name=\"Mandibular Perim Model\", default=\"\")\n    mand_trimmed_model: StringProperty(name=\"Mandibular Trimmed Model\", default=\"\")\n    mand_refractory: StringProperty(name=\"Mandibular Refractory Model\", default=\"\")\n    mand_axis: StringProperty(name=\"Mandibular Insertion\", default=\"\")\n    mand_margin: StringProperty(name=\"Mandibular Margin\", default=\"\")\n    mand_shell: StringProperty(name=\"Mandibular Shell\", default=\"\")\n```\n\n**Key changes:**\n- Use type annotations (`:`) instead of assignment (`=`).\n- Define properties inside a class derived from `bpy.types.PropertyGroup`.\n- Register the class and assign it as a property group to your target type (e.g., `Scene`, `Object`) as needed.\n\nThis is the Blender 4.x-compliant way to define custom properties for use in add-ons and scripts.",
      "In **Blender 4.4**, the use of `bpy.props.StringProperty` and `bpy.props.BoolProperty` as *class attributes* (e.g., `cls.my_prop = ...`) is deprecated. Instead, properties must be defined directly in the class body, not assigned dynamically. The `maxlen` argument for `StringProperty` is also deprecated and should be removed.\n\nHere is the **corrected code block** for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyClass(bpy.types.PropertyGroup):\n    ops_string: bpy.props.StringProperty(name=\"operators used\", default=\"\")\n    custom_label: bpy.props.StringProperty(name=\"custom_label\", default=\"\")\n    show_stored_positions: bpy.props.BoolProperty(name='show_stored_positions', default=False)\n    stored_positions: bpy.props.StringProperty(name=\"Stored Positions\", default=\"\")\n    max_model_set: bpy.props.BoolProperty(name='max_model_set', default=False)\n    mand_model_set: bpy.props.BoolProperty(name='mand_model_set', default=False)\n    face_model_set: bpy.props.BoolProperty(name=\"face_model_set\", default=False)\n    landmarks_set: bpy.props.BoolProperty(name='landmarks_set', default=False)\n    facial_landmarks_set: bpy.props.BoolProperty(name='landmarks_set', default=False)\n    articulator_make: bpy.props.BoolProperty(name='articulator_made', default=False)\n```\n\n**Key changes:**\n- Use the `:` (type annotation) syntax for property definitions inside the class body.\n- Remove the `maxlen` argument from `StringProperty` (it is no longer supported).\n- Define all properties as class attributes, not via dynamic assignment (e.g., `cls.prop = ...` is no longer valid)[3].\n\nThis code is compatible with Blender 4.4 and follows current API conventions.",
      "In Blender 4.4, the use of class-level assignment for properties (e.g., cls.my_prop = bpy.props.BoolProperty(...)) is deprecated. Instead, properties must be defined as class attributes directly in the class body, not dynamically assigned. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    max_splint_outline: bpy.props.BoolProperty(name='max_splint_outline', default=False)\n    mand_splint_outline: bpy.props.BoolProperty(name='mand_splint_outline', default=False)\n    trim_max: bpy.props.BoolProperty(name='trim_max', default=False)\n    trim_mand: bpy.props.BoolProperty(name='trim_mand', default=False)\n    max_shell_complete: bpy.props.BoolProperty(name='max_shell_complete', default=False)\n    mand_shell_complete: bpy.props.BoolProperty(name='mand_shell_complete', default=False)\n    max_insertion_complete: bpy.props.BoolProperty(name='max_insertion_complete', default=False)\n    mand_insertion_complete: bpy.props.BoolProperty(name='mand_insertion_complete', default=False)\n    max_refractory_model_complete: bpy.props.BoolProperty(name='max_refractory_model_complete', default=False)\n    mand_refractory_model_complete: bpy.props.BoolProperty(name='mand_refractory_model_complete', default=False)\n```\n\n**Key changes:**\n- Use the **colon (:) annotation syntax** for property definitions in the class body.\n- Do not assign properties dynamically to the class (i.e., do not use `cls.prop = ...`).\n\nThis is the required approach for all custom properties in Blender 2.80 and later, including 4.4[3][4].",
      "To migrate these property definitions to **Blender 4.4**, you must use the new `bpy.props` API and the **annotations system**. Properties should be defined as class annotations, not as assignments inside a class or in the register function. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    arch_curves_complete: bpy.props.BoolProperty(name='arch_curves_complete', default=False)\n    # max_curve: bpy.props.BoolProperty(name='curve_max', default=False)\n    # mand_curve: bpy.props.BoolProperty(name='curve_mand', default=False)\n    ramps_generated: bpy.props.BoolProperty(name='ramps_generated', default=False)\n    ramp_array_generated: bpy.props.BoolProperty(name='ramp_array_generated', default=False)\n    finalize_splint_max: bpy.props.BoolProperty(name='finalize_splint_max', default=False)\n    finalize_splint_mand: bpy.props.BoolProperty(name='finalize_splint_mand', default=False)\n    max_shell_thickness: bpy.props.FloatProperty(name='Maxillary Shell Thickness', default=1.25)\n    mand_shell_thickness: bpy.props.FloatProperty(name='Mandibular Shell Thickness', default=1.25)\n    max_passive_value: bpy.props.FloatProperty(name='Maxillary Passive Spacer', default=0.15)\n```\n\n**Key changes:**\n- Use **type annotations** (the colon syntax) instead of assignment (`=`) for property definitions.\n- Define properties directly in the class body, not dynamically or via `cls.` assignment[3].\n\nThis is the required and supported way to define custom properties in Blender 2.80 and later, including 4.4.",
      "Replace the deprecated use of `bpy.props.FloatProperty` and `bpy.props.StringProperty` as class attributes with type annotations and assignment to `bpy.props` properties, as required in Blender 2.80+ and still valid in Blender 4.4[1][2]. The corrected code block is:\n\n```python\nimport bpy\n\nmax_undercut_value: bpy.props.FloatProperty(\n    name='Maxillary Undercut', default=0.05\n)\nmand_passive_value: bpy.props.FloatProperty(\n    name='Mandibular Passive Spacer', default=0.15\n)\nmand_undercut_value: bpy.props.FloatProperty(\n    name='Mandibular Undercut', default=0.05\n)\nmaxillary_offsets: bpy.props.StringProperty(\n    name=\"Maxillary Offsets\", default=\"\"\n)\nmandibular_offsets: bpy.props.StringProperty(\n    name=\"Mandibular Offsets\", default=\"\"\n)\ncase_id: bpy.props.StringProperty(\n    name=\"Case ID\", default=\"\"\n)\nstart_time: bpy.props.FloatProperty(\n    name=\"Start Time\", default=0.0\n)\nend_time: bpy.props.FloatProperty(\n    name=\"Finish Time\", default=0.0\n)\n```\n\nIf these are inside a class (such as a `PropertyGroup`), use:\n\n```python\nclass MyProperties(bpy.types.PropertyGroup):\n    max_undercut_value: bpy.props.FloatProperty(\n        name='Maxillary Undercut', default=0.05\n    )\n    mand_passive_value: bpy.props.FloatProperty(\n        name='Mandibular Passive Spacer', default=0.15\n    )\n    mand_undercut_value: bpy.props.FloatProperty(\n        name='Mandibular Undercut', default=0.05\n    )\n    maxillary_offsets: bpy.props.StringProperty(\n        name=\"Maxillary Offsets\", default=\"\"\n    )\n    mandibular_offsets: bpy.props.StringProperty(\n        name=\"Mandibular Offsets\", default=\"\"\n    )\n    case_id: bpy.props.StringProperty(\n        name=\"Case ID\", default=\"\"\n    )\n    start_time: bpy.props.FloatProperty(\n        name=\"Start Time\", default=0.0\n    )\n    end_time: bpy.props.FloatProperty(\n        name=\"Finish Time\", default=0.0\n    )\n```\n\n**Key changes:**\n- Use type annotations (`:`) instead of assignment (`=`) for property definitions in classes.\n- Do not assign properties directly to the class with `=`, but use the annotation syntax as shown above[1][2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3dual_facial_landmarks.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3dual_pick_face_model.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3dual_pick_models.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3dual_stored_positions.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, operator and property definitions must use type annotations rather than direct assignment. The old style:\n\n```python\nname = bpy.props.StringProperty(name = 'Position Label', default = 'Stored Position')\nreplace = bpy.props.BoolProperty(name = 'Replace', description = 'Overwrite if using the same name')\nposition = bpy.props.EnumProperty(name = 'Position', items = get_items)\nprevious = bpy.props.BoolProperty(default = False)\n```\n\nshould be updated to:\n\n```python\nname: bpy.props.StringProperty(name='Position Label', default='Stored Position')\nreplace: bpy.props.BoolProperty(name='Replace', description='Overwrite if using the same name')\nposition: bpy.props.EnumProperty(name='Position', items=get_items)\nprevious: bpy.props.BoolProperty(default=False)\n```\n\nThis change is required for all property definitions in Blender 2.80 and later, including 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3dual_wax_rim.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your property definitions from Blender 2.79 to Blender 4.4, update the deprecated `bpy.props.FloatProperty`, `IntProperty`, and `EnumProperty` usage as follows:\n\n- In Blender 2.8+ (including 4.4), **all property definitions must be inside a class derived from `bpy.types.PropertyGroup` or similar, not as standalone variables**.\n- The syntax for property definitions remains mostly the same, but you must define them as class attributes.\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    meta_type: bpy.props.EnumProperty(\n        name='Meta Type',\n        items=[\n            ('CUBE', 'CUBE', 'CUBE'),\n            ('ELLIPSOID', 'ELLIPSOID', 'ELLIPSOID')\n        ],\n        default='CUBE',\n        description='What shape gets extruded along the rim, ellipsoid will be a much rounder rim'\n    )\n\n    width_offset: bpy.props.FloatProperty(\n        name='Extra Width',\n        default=0.01,\n        min=-3,\n        max=3,\n        description='Can be used to add extra or remove extra Bucco/Lingual width from the rim'\n    )\n\n    thickness_offset: bpy.props.FloatProperty(\n        name='Extra Thickness',\n        default=0.01,\n        min=-3,\n        max=3,\n        description='Will add extra (or reduce for negative values) thickness to the rim'\n    )\n\n    anterior_projection: bpy.props.FloatProperty(\n        name='Extra Anterior Width',\n        default=0.01,\n        min=-2,\n        max=3,\n        description='Will add more BuccoLingual width to the anterior rim/ramp'\n    )\n\n    anterior_shift: bpy.props.FloatProperty(\n        name='Anterior Shift',\n        default=0.0,\n        min=-5.0,\n        max=50,\n        description='Will Shift the anterior segment of the rim'\n    )\n\n    flare: bpy.props.IntProperty(\n        default=0,\n        min=-60,\n        max=60,\n        description='Angle of anterior ramp from world, can be negative (maxillary prosthesis) or positive (mandibular), try -30'\n    )\n\n    anterior_segment: bpy.props.FloatProperty(\n        name='AP Spread',\n        default=0.3,\n        min=0.15,\n        max=0.85,\n        description='Percentage of AP spread which is considered the anterior rim'\n    )\n\n    ap_segment: bpy.props.EnumProperty(\n        name='Rim Area',\n        items=[\n            ('ANTERIOR_ONLY', 'Anterior Ramp', 'Only builds rim anterior to AP spread')\n        ]\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not as assignments (`=`) at the module level.\n- The class must inherit from `bpy.types.PropertyGroup`.\n- Register your property group and assign it to a data block (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`).\n\nThis structure is required for Blender 2.8+ and is fully compatible with Blender 4.4[4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3splint_view_presets.py",
    "warnings": [],
    "api_suggestions": [
      "The correct way to define an EnumProperty in Blender 4.4+ is to use the annotation syntax and assign the property to a class variable, not a module-level variable. Here is the migrated code block:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    mode: bpy.props.EnumProperty(\n        name=\"mode\",\n        items=[\n            (\"U/O\", \"U/O\", \"U/O\"),\n        ]\n    )\n```\n\nKey changes:\n- Use the annotation syntax (mode: ...).\n- Define the property inside a class derived from bpy.types.PropertyGroup or bpy.types.Operator, not at the module level.\n- Use a list for items, not a tuple (both are accepted, but list is more common in recent Blender versions)[3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\d3_startup.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\denture_base.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, you must define EnumProperty on a class attribute, not as a standalone variable, and you must provide the items argument (either as a static tuple/list or a callback function). The direct assignment like ob = bpy.props.EnumProperty(...) is deprecated and invalid.\n\n**Corrected code for Blender 4.4:**\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    master_cast: bpy.props.EnumProperty(\n        name=\"Master Cast\",\n        description=\"Select the master cast\",\n        items=[\n            ('OPTION1', \"Option 1\", \"Description for option 1\"),\n            ('OPTION2', \"Option 2\", \"Description for option 2\"),\n            # Add more options as needed\n        ],\n        default='OPTION1'\n    )\n```\n\n**Key changes:**\n- Define the EnumProperty as a class attribute (using the colon syntax).\n- Provide the items argument as a list of tuples (identifier, name, description).\n- Register the PropertyGroup and assign it to a data block (e.g., bpy.types.Scene).\n\nThis is the Blender 4.4 compatible way to define an EnumProperty[4][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\design_validation.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\diastemas.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\dual_elements.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must be placed inside a class derived from `bpy.types.PropertyGroup` (or similar), and you must use type annotations rather than direct assignment. The old style of assigning properties directly to variables at the module level is deprecated.\n\nHere is the **corrected code block** for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import FloatProperty, IntProperty\nfrom bpy.types import PropertyGroup\n\nclass MyProperties(PropertyGroup):\n    base_diameter: FloatProperty(default=4, description='diameter of bonding pad')\n    base_height: FloatProperty(default=1.5, description='thickness of bonding pad')\n    stalk_diameter: FloatProperty(default=2, description='diameter of stalk')\n    stalk_height: FloatProperty(default=2, description='height of stalk')\n    button_minor: FloatProperty(default=3, description='Diameter of button')\n    button_major: FloatProperty(default=5, description='Diameter of button tip')\n    button_height: FloatProperty(default=1.5, description='Thickness of button')\n    base_curvature_y: FloatProperty(default=0.2, description='Curvature of base y direction')\n    base_curvature_x: FloatProperty(default=0.2, description='Curvature of base x direction')\n    base_torque: IntProperty(default=0, min=-45, max=45, description='Torque of base')\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations (`:`), not as assignments (`=`) at the module level.\n- All property definitions must be inside a class derived from `PropertyGroup`.\n- Register the property group and assign it to a context (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`) as needed in your registration code[3].\n\nThis code is compatible with Blender 4.4 and follows current API conventions.",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new annotation-based syntax for property declarations inside classes. The old assignment style (e.g., myprop = bpy.props.BoolProperty(...)) is deprecated and will not work in Blender 2.80+.\n\nBelow is the corrected code block for Blender 4.4+ (including 4.0, 4.1, 4.2, 4.3, and 4.4):\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    hold_update: bpy.props.BoolProperty(\n        default=True,\n        description='Pause auto update'\n    )\n    base_diameter: bpy.props.FloatProperty(\n        default=4,\n        description='diameter of bonding pad',\n        update=update_elastic_button\n    )\n    base_height: bpy.props.FloatProperty(\n        default=1.5,\n        description='thickness of bonding pad',\n        update=update_elastic_button\n    )\n    base_curvature_y: bpy.props.FloatProperty(\n        default=0.2,\n        description='Curvature of base y direction',\n        update=update_elastic_button\n    )\n    base_curvature_x: bpy.props.FloatProperty(\n        default=0.2,\n        description='Curvature of base x direction',\n        update=update_elastic_button\n    )\n    stalk_diameter: bpy.props.FloatProperty(\n        default=2,\n        description='diameter of stalk',\n        update=update_elastic_button\n    )\n    stalk_height: bpy.props.FloatProperty(\n        default=2,\n        description='height of stalk',\n        update=update_elastic_button\n    )\n    button_minor: bpy.props.FloatProperty(\n        default=3,\n        description='Diameter of button',\n        update=update_elastic_button\n    )\n    button_major: bpy.props.FloatProperty(\n        default=5,\n        description='Diameter of button tip',\n        update=update_elastic_button\n    )\n```\n\n**Key changes:**\n- Use the annotation syntax (`propname: bpy.props.PropertyType(...)`) inside a class derived from `bpy.types.PropertyGroup`.\n- Register your property group and assign it to a data block (e.g., `bpy.types.Scene.my_props: PointerProperty(type=MyPropertyGroup)`).\n- The `update` callback signature remains the same: it must accept `(self, context)`.\n\n**Note:** If you need the EnumProperty, use the same annotation style:\n\n```python\nmode: bpy.props.EnumProperty(\n    name='New or Modify',\n    items=[('RIGHT', 'RIGHT', 'RIGHT'), ('LEFT', 'LEFT', 'LEFT')],\n    default='RIGHT'\n)\n```\n\nThis code is fully compatible with Blender 4.4 and follows current API conventions[4].",
      "In **Blender 4.4**, property definitions must be declared as class attributes inside a class derived from `PropertyGroup`, `Operator`, or `Panel`, not as standalone assignments. The old usage like `button_height = bpy.props.FloatProperty(...)` is deprecated. Instead, use type annotations and assign the property to a class attribute within a class, then register the class and (for custom properties) assign a `PointerProperty` to the relevant data block (e.g., `Scene`, `Object`).\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\ndef update_elastic_button(self, context):\n    # Your update logic here\n    pass\n\nclass MyProperties(bpy.types.PropertyGroup):\n    button_height: bpy.props.FloatProperty(\n        default=1.5,\n        description='Thickness of button',\n        update=update_elastic_button\n    )\n    base_torque: bpy.props.IntProperty(\n        default=0,\n        min=-45,\n        max=45,\n        description='Torque of base',\n        update=update_elastic_button\n    )\n    # mode: bpy.props.EnumProperty(\n    #     name='New or Modify',\n    #     items=[('RIGHT', 'RIGHT', 'RIGHT'), ('LEFT', 'LEFT', 'LEFT')],\n    #     default='RIGHT'\n    # )\n    my_float: bpy.props.FloatProperty(name=\"Some Floating Point\")\n    my_bool: bpy.props.BoolProperty(name=\"Toggle Option\")\n    my_string: bpy.props.StringProperty(name=\"String Value\")\n\n# Register the PropertyGroup\nbpy.utils.register_class(MyProperties)\n\n# Attach to Scene (or Object, etc.)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations inside a `PropertyGroup` subclass.\n- Register the class with `bpy.utils.register_class`.\n- Attach the property group to a data block (e.g., `Scene`) using `PointerProperty`.\n\nThis is the Blender 4.4-compliant way to define and use custom properties[3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\dual_margin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\dual_visualization.py",
    "warnings": [],
    "api_suggestions": [
      "Replace your deprecated Blender 2.79 EnumProperty line with the following Blender 4.4 compatible code:\n\n```python\nmode: bpy.props.EnumProperty(\n    name=\"mode\",\n    items=[\n        (\"T/T\", \"T/T\", \"T/T\")\n    ]\n)\n```\n\nKey changes:\n- Use **type annotations** (the colon syntax) instead of assignment for class properties[4].\n- Use a **list** for the `items` argument (tuples are still accepted, but lists are now preferred for clarity and future compatibility)[4].\n- The rest of the tuple structure for each item remains the same: `(identifier, name, description)`.\n\nIf this property is inside a class (e.g., an Operator or PropertyGroup), ensure it is defined as a class variable, not inside `__init__` or as an instance variable."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\flexible_tooth.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\full_arch_methods.py",
    "warnings": [],
    "api_suggestions": [
      "The Blender 4.4 compatible code for resizing with local orientation is:\n\n```python\nbpy.ops.transform.resize(\n    value=(1, 1, 0),\n    orient_type='LOCAL'\n)\n```\n\nNote:\n- The parameter constraint_orientation is now orient_type in Blender 4.4[2].\n- All other parameters remain the same unless further customization is needed."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\grids_scaffolds.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old property registration functions like `bpy.props.FloatProperty`, `IntProperty`, `BoolProperty`, and `EnumProperty` are still used, but the syntax for declaring them has changed. Properties must now be defined as class annotations using type hints, not as direct assignments. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    method: bpy.props.EnumProperty(\n        name=\"Method\",\n        items=[\n            ('OPTION1', \"Option 1\", \"\"),\n            ('OPTION2', \"Option 2\", \"\"),\n        ],\n        default='OPTION1'\n    )\n    width: bpy.props.FloatProperty(name='element width', default=4.0, min=0.5, max=10.0)\n    hole_width: bpy.props.FloatProperty(name='hole width', default=1.25, min=0.25, max=9.0)\n    thickness: bpy.props.FloatProperty(name='thickness', default=2.0, min=0.25, max=9.0)\n    grid_repeats: bpy.props.IntProperty(name='repeats', default=10, min=2, max=50)\n    add_bevel: bpy.props.BoolProperty(name='add bevel', default=True)\n    hole_spacing: bpy.props.FloatProperty(name='element width', default=4.0, min=1.5, max=8.0)\n    hole_diameter: bpy.props.FloatProperty(name='hole width', default=1.0, min=0.5, max=3.0)\n    snap: bpy.props.BoolProperty(name='Snap to Source', default=True)\n```\n\n**Key changes:**\n- Use **type annotations** (the colon `:` syntax) instead of assignment (`=`) for property definitions in classes derived from `bpy.types.PropertyGroup`[3][4].\n- Define all properties inside a class, not at the module level.\n- EnumProperty now requires an `items` argument.\n\nThis is the Blender 4.4+ compatible way to declare custom properties for use in panels, operators, etc.",
      "In **Blender 4.4**, the old style of defining properties directly as class variables using `bpy.props` is deprecated. Instead, you should use type annotations and assign the property to the class attribute, typically within a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or `bpy.types.Panel`. Here is the **corrected code block** for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    snap_offset: bpy.props.FloatProperty(\n        name='Snapp Offset',\n        default=0.0\n    )\n    hole_spacing: bpy.props.FloatProperty(\n        name='element width',\n        default=4.0,\n        min=1.5,\n        max=8.0\n    )\n    hole_diameter: bpy.props.FloatProperty(\n        name='Hole Diameter',\n        default=6.0,\n        min=0.5,\n        max=10.0\n    )\n    thickness: bpy.props.FloatProperty(\n        name='thickness',\n        default=2.0,\n        min=0.25,\n        max=9.0\n    )\n    snap: bpy.props.BoolProperty(\n        name='Snap to Source',\n        default=True\n    )\n    wall_thickness: bpy.props.FloatProperty(\n        name='Wall Thicknes',\n        default=2.0,\n        min=0.25,\n        max=9.0\n    )\n    method: bpy.props.EnumProperty(\n        name='Method',\n        items=[\n            ('OPTION1', 'Option 1', ''),\n            ('OPTION2', 'Option 2', ''),\n        ]\n    )\n    grid_repeats: bpy.props.IntProperty(\n        name='Repeats',\n        default=10,\n        min=2,\n        max=50\n    )\n```\n\n**Key changes:**\n- Use **type annotations** (the colon `:`) instead of assignment (`=`) for property definitions.\n- Define properties inside a class derived from `bpy.types.PropertyGroup` (or another appropriate Blender type).\n- Register the property group and assign it to a context (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`), if needed for use.\n\nThis is the Blender 4.4+ compatible way to define custom properties[2].",
      "In **Blender 4.4**, property definitions must be declared as class attributes within a subclass of a Blender type (such as bpy.types.PropertyGroup, bpy.types.Operator, etc.), not as standalone assignments. The use of bpy.props.FloatProperty directly in a variable assignment is deprecated.\n\n**Migrate your code as follows:**\n\n```python\nimport bpy\nfrom bpy.props import FloatProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    resolution: FloatProperty(\n        name='Mesh Resolution',\n        default=0.3,\n        min=0.2,\n        max=3.0\n    )\n```\n\n**Key changes:**\n- Define the property as a class attribute with a colon (:) and not as a direct assignment.\n- Place the property inside a subclass of a Blender type (e.g., PropertyGroup, Operator, Panel, etc.).\n- Register the PropertyGroup and assign it to a context (e.g., bpy.types.Scene) as needed.\n\nThis is the Blender 4.4 compatible way to define custom properties[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\healing_abutment.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions using bpy.props must be declared as class attributes inside a PropertyGroup, Operator, or Panel, not as standalone variables. The direct assignment pattern from Blender 2.79 is deprecated. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import FloatProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    inter_space_x: FloatProperty(name='horizontal', default=2.0)\n    inter_space_y: FloatProperty(name='vertical', default=2.0)\n    middle_space_x: FloatProperty(name='middle', default=2.0)\n    cyl_depth: FloatProperty(name='depth', default=5.0)\n    shape_factor: FloatProperty(name=\"Shape Factor\", default=0.05, step=1)\n    bottom_trim: FloatProperty(name=\"Bottom Trim\", default=0.001)\n```\n\nTo use these properties, register the PropertyGroup and assign it to a data block, for example:\n\n```python\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nThis approach is fully compatible with Blender 4.4 and avoids deprecated API usage[2][3].",
      "In Blender 4.4, property definitions for add-ons and operators must use type annotations and be defined as class attributes, not as direct assignments using bpy.props. The following code block shows the corrected lines for your properties:\n\n```python\nimport bpy\n\nclass MyOperator(bpy.types.Operator):\n    # Use type annotations for properties in Blender 2.80+\n    bevel_width: bpy.props.FloatProperty(name=\"Bevel Width\", default=3.0)\n    border_x: bpy.props.FloatProperty(name=\"Horizontal Border\", default=2.0)\n    border_y: bpy.props.FloatProperty(name=\"Vertical Border\", default=5.0)\n    font_size: bpy.props.FloatProperty(default=3.0, description=\"Text Size\")\n    y_align: bpy.props.EnumProperty(items=items_align_y, name=\"Vertical Alignment\", default='BOTTOM')\n    x_align: bpy.props.EnumProperty(items=items_align_x, name=\"Horizontal Alignment\", default='LEFT')\n```\n\n**Key changes:**\n- Use type annotations (the colon syntax) for property definitions.\n- Define properties as class attributes, not as assignments in the class body.\n- Do not use direct assignment (e.g., `bevel_width = bpy.props.FloatProperty(...)`), as this is deprecated in Blender 2.80+ and removed in 4.4[1].\n\nReplace `MyOperator` with your actual class name, and ensure `items_align_y` and `items_align_x` are defined appropriately elsewhere in your code."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\help.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\image_object_registration.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\image_plane_calibration.py",
    "warnings": [],
    "api_suggestions": [
      "```python\ncalibration_length: bpy.props.FloatProperty(name='Reference Length', default=1.0)\n```\n\nIn Blender 2.8+ (including 4.4), properties must be defined as class annotations using the colon (:) syntax, not as direct assignments[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\implant.py",
    "warnings": [],
    "api_suggestions": [
      "Here are the corrected property definitions for Blender 4.4. The main changes are:\n\n- The step and precision arguments are no longer supported in property definitions and should be removed.\n- The options argument is still supported, but only certain options are valid.\n- EnumProperty definitions must include an items argument.\n- Duplicate property assignments should be avoided.\n\nBelow are the updated lines, with placeholders for the required items argument in EnumProperty (replace ... with your actual enum items):\n\n```python\nthickness: bpy.props.FloatProperty(\n    name=\"Slice Thickness\",\n    description=\"view slice thickness\",\n    default=1,\n    min=1,\n    max=10,\n    options={'ANIMATABLE'}\n)\n\nimp: bpy.props.EnumProperty(\n    name=\"Implant Library Objects\",\n    items=[...],  # Replace with your enum items\n)\n\ndepth: bpy.props.IntProperty(\n    name='Depth',\n    description=\"millimeters below CEJ to place implant\",\n    default=5\n)\n\nhardware: bpy.props.BoolProperty(\n    name=\"Include Hardware\",\n    default=True\n)\n\ndrill: bpy.props.EnumProperty(\n    name=\"Drill/Sleeve Library\",\n    items=[...],  # Replace with your enum items\n)\n\ndepth: bpy.props.FloatProperty(\n    name=\"Depth\",\n    description=\"Top edge to apex of implant\",\n    default=20,\n    min=0,\n    max=30,\n    options={'ANIMATABLE'}\n)\n\ndrill: bpy.props.EnumProperty(\n    name=\"Drill Library\",\n    items=[...],  # Replace with your enum items\n)\n\ndepth: bpy.props.FloatProperty(\n    name=\"Depth\",\n    description=\"Distance tip of drill to implant apex\",\n    default=0,\n    min=-4,\n    max=10,\n    options={'ANIMATABLE'}\n)\n```\n\n**Key changes:**\n- Removed step and precision arguments (no longer supported).\n- Added items argument to EnumProperty (required in Blender 4.x).\n- Used type annotations (e.g., thickness: ...) as per Blender 2.8+ conventions.\n- Avoided duplicate property names in the same scope.\n\nReplace the items=[...] with your actual enum items as needed.",
      "In Blender 4.4, property definitions must use **Python type annotations** (the colon syntax) inside a subclass of bpy.types.PropertyGroup, and the deprecated arguments like step and precision are no longer supported. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    width: bpy.props.FloatProperty(\n        name=\"Width\",\n        description=\"Width of Support\",\n        default=6,\n        min=1,\n        max=10,\n        options={'ANIMATABLE'}\n    )\n    depth: bpy.props.FloatProperty(\n        name=\"Top Edge to Apex of Implant\",\n        description=\"\",\n        default=20,\n        min=10,\n        max=30,\n        options={'ANIMATABLE'}\n    )\n    trim_width: bpy.props.FloatProperty(\n        name=\"Trim Width\",\n        description=\"Amount to shave off sides\",\n        default=0,\n        min=0,\n        max=4,\n        options={'ANIMATABLE'}\n    )\n    use_wedge: bpy.props.BoolProperty(\n        name='Use Wedge',\n        description=\"Make a fraction of a full circle\",\n        default=False\n    )\n    pctg: bpy.props.FloatProperty(\n        name=\"Wedge pctg\",\n        description=\"Fraction of full circle to make\",\n        default=0.65,\n        min=0,\n        max=1,\n        options={'ANIMATABLE'}\n    )\n    use_thickness: bpy.props.BoolProperty(\n        name=\"Manual Diameter\",\n        default=True\n    )\n    thickness: bpy.props.FloatProperty(\n        name=\"Cylinder Diameter\",\n        description=\"diameter of the hole\",\n        default=5,\n        min=1,\n        max=7,\n        options={'ANIMATABLE'}\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes using the colon (:) syntax inside a PropertyGroup subclass[2].\n- The arguments step and precision are removed, as they are no longer supported in Blender 4.x[2].\n- Use options={'ANIMATABLE'} as before if animation is needed.\n- Register the PropertyGroup and add a PointerProperty to e.g. bpy.types.Scene to use these properties in your add-on[2].\n\nThis code is compatible with Blender 4.4 and follows the current API conventions."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\implant_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\import_export.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\incremental_save.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\insertion_axis.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\inter_occlusal_plane.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\landmarks_p_picker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\library_screenshots.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\loops_tools.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions must use the new annotation syntax and be defined as class attributes, not as direct assignments. Replace your old property definitions with the following code block:\n\n```python\nimport bpy\n\nclass YourClassName(bpy.types.PropertyGroup):\n    cubic_strength: bpy.props.FloatProperty(name=\"Strength\")\n    interpolation: bpy.props.EnumProperty(name=\"Interpolation mode\")\n    loft: bpy.props.BoolProperty(name=\"Loft\")\n    loft_loop: bpy.props.BoolProperty(name=\"Loop\")\n    min_width: bpy.props.IntProperty(name=\"Minimum width\")\n    mode: bpy.props.EnumProperty(name=\"Mode\")\n    remove_faces: bpy.props.BoolProperty(name=\"Remove faces\")\n    reverse: bpy.props.BoolProperty(name=\"Reverse\")\n    segments: bpy.props.IntProperty(name=\"Segments\")\n    twist: bpy.props.IntProperty(name=\"Twist\")\n```\n\nKey changes:\n- Use the colon (:) annotation syntax for all properties.\n- Define properties as class attributes inside a class derived from bpy.types.PropertyGroup.\n- Do not assign properties directly to variables outside a class.\n\nThis syntax is required for Blender 2.80 and newer, including 4.4[2][3].",
      "Here are the corrected property definitions for Blender 4.4. The old `bpy.props.BoolProperty`, `FloatProperty`, and `EnumProperty` APIs are now used as type annotations within a class derived from `bpy.types.PropertyGroup`, and properties are defined as class variables. Registration is also required.\n\nReplace your property definitions with the following code block:\n\n```python\nimport bpy\nfrom bpy.props import (\n    BoolProperty,\n    EnumProperty,\n    FloatProperty,\n)\nfrom bpy.types import PropertyGroup\n\nclass MyProperties(PropertyGroup):\n    custom_radius: BoolProperty(name=\"Radius\")\n    fit: EnumProperty(\n        name=\"Method\",\n        items=[\n            ('OPTION1', \"Option 1\", \"\"),\n            ('OPTION2', \"Option 2\", \"\"),\n            # Add your actual enum items here\n        ]\n    )\n    flatten: BoolProperty(name=\"Flatten\")\n    influence: FloatProperty(name=\"Influence\")\n    lock_x: BoolProperty(name=\"Lock X\")\n    lock_y: BoolProperty(name=\"Lock Y\")\n    lock_z: BoolProperty(name=\"Lock Z\")\n    radius: FloatProperty(name=\"Radius\")\n    regular: BoolProperty(name=\"Regular\")\n    boundaries: BoolProperty(name=\"Boundaries\")\n\n# Register the property group (required in Blender 2.80+)\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_tool = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_tool\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class variables with type annotations inside a `PropertyGroup` subclass.\n- Use `bpy.props.PointerProperty` to add the property group to a data block (e.g., `Scene`).\n- Registration functions are required for add-ons and scripts in Blender 2.80+ and remain so in 4.4.\n\n**Note:** Replace the `items` in `EnumProperty` with your actual options.",
      "To migrate the property definitions from Blender 2.79 to Blender 4.4, you must use the new-style type annotations for properties in Blender 2.8+ (including 4.4). The old bpy.props.*Property assignment is deprecated. Instead, define properties as class attributes with type annotations.\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    influence: bpy.props.FloatProperty(name=\"Influence\")\n    interpolation: bpy.props.EnumProperty(name=\"Interpolation\")\n    lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    regular: bpy.props.BoolProperty(name=\"Regular\")\n    restriction: bpy.props.EnumProperty(name=\"Restriction\")\n```\n\nKey changes:\n- Use **type annotations** (the colon syntax) instead of assignment.\n- Define all properties inside a class derived from bpy.types.PropertyGroup.\n- Register the PropertyGroup and assign it to a data block (not shown here).\n\nThis is the Blender 4.4 compatible way to define custom properties[3].",
      "In Blender 4.4, the old bpy.props.*Property() functions are deprecated in favor of the new annotation-based property definitions using type hints. The correct migration is to use Python class annotations with bpy.props, as shown below:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    plane: bpy.props.EnumProperty(name=\"Plane\")\n    restriction: bpy.props.EnumProperty(name=\"Restriction\")\n    conversion: bpy.props.EnumProperty(name=\"Conversion\")\n    conversion_distance: bpy.props.FloatProperty(name=\"Distance\")\n    conversion_max: bpy.props.IntProperty(name=\"Max Vertices\")\n    conversion_min: bpy.props.IntProperty(name=\"Min Vertices\")\n    conversion_vertices: bpy.props.IntProperty(name=\"Vertices\")\n    delete_strokes: bpy.props.BoolProperty(name=\"Delete strokes\")\n    influence: bpy.props.FloatProperty(name=\"Influence\")\n```\n\n- Each property is now defined as a class attribute with a type hint and assigned the corresponding bpy.props function.\n- This is the required and supported way to define custom properties in Blender 2.80 and later, including 4.4[1].",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new annotation syntax with type hints and assign properties as class attributes, not as direct assignments. The old assignment style is deprecated and will raise errors in Blender 4.x.\n\nReplace your code lines with the following (assuming these are inside a class derived from bpy.types.PropertyGroup, Operator, or Panel):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    method: bpy.props.EnumProperty(name=\"Method\")\n    input: bpy.props.EnumProperty(name=\"Input\")\n    interpolation: bpy.props.EnumProperty(name=\"Interpolation\")\n    iterations: bpy.props.EnumProperty(name=\"Iterations\")\n    regular: bpy.props.BoolProperty(name=\"Regular\")\n    influence: bpy.props.FloatProperty(name=\"Influence\")\n```\n\n**Key changes:**\n- Use the colon (:) annotation syntax, not equals (=).\n- Place property definitions inside a class body, not at the module level.\n- Do not repeat property names (e.g., only define input once per class).\n\nThis syntax is required for Blender 2.80+ and is fully compatible with Blender 4.4[1].",
      "Here are the corrected property definitions for Blender 4.4. The main change is to use the new-style annotation syntax for properties, as direct assignment to class attributes (e.g., lock_x = bpy.props.BoolProperty(...)) is deprecated. Instead, use:\n\n- __annotations__ with type hints and assignment to bpy.props.*Property.\n\nCorrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyClass(bpy.types.PropertyGroup):\n    interpolation: bpy.props.EnumProperty(\n        name=\"Interpolation\",\n        # ... (other EnumProperty arguments)\n    )\n    lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    display_bridge: bpy.props.BoolProperty(name=\"Bridge settings\")\n    display_circle: bpy.props.BoolProperty(name=\"Circle settings\")\n    display_curve: bpy.props.BoolProperty(name=\"Curve settings\")\n    display_flatten: bpy.props.BoolProperty(name=\"Flatten settings\")\n    display_gstretch: bpy.props.BoolProperty(name=\"Gstretch settings\")\n    display_loft: bpy.props.BoolProperty(name=\"Loft settings\")\n```\n\nKey changes:\n- Use the annotation syntax (:) instead of direct assignment (=) for property definitions in classes derived from bpy.types.PropertyGroup or bpy.types.Operator[3].\n- This is required for Blender 2.80+ and is fully compatible with Blender 4.4[3].\n\nNo other changes are needed for these property definitions.",
      "In **Blender 4.4**, property definitions using `bpy.props` must be declared as class annotations (using `:` and type hints) inside the class, not as direct assignments. The old style (direct assignment at the module level) is deprecated and will not work.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty, FloatProperty, EnumProperty, IntProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    display_relax: BoolProperty(name=\"Relax settings\")\n    display_space: BoolProperty(name=\"Space settings\")\n    bridge_cubic_strength: FloatProperty(name=\"Strength\")\n    bridge_interpolation: EnumProperty(name=\"Interpolation mode\", items=[('LINEAR', \"Linear\", \"\"), ('CUBIC', \"Cubic\", \"\")])\n    bridge_loft: BoolProperty(name=\"Loft\")\n    bridge_loft_loop: BoolProperty(name=\"Loop\")\n    bridge_min_width: IntProperty(name=\"Minimum width\")\n    bridge_mode: EnumProperty(name=\"Mode\", items=[('DEFAULT', \"Default\", \"\"), ('CUSTOM', \"Custom\", \"\")])\n    bridge_remove_faces: BoolProperty(name=\"Remove faces\")\n    bridge_reverse: BoolProperty(name=\"Reverse\")\n```\n\n**Key changes:**\n- Use `:` and type hints for property declarations inside a class derived from `bpy.types.PropertyGroup`.\n- Do not assign properties at the module level.\n- EnumProperty requires an `items` argument (replace with your actual options).\n\nThis is the required migration for Blender 4.4 compatibility[1].",
      "To migrate your property definitions from Blender 2.79 to Blender 4.4, you must use the new annotation syntax with type hints. The old assignment style (e.g., bridge_segments = bpy.props.IntProperty(...)) is deprecated and will not work in Blender 4.x. Instead, use:\n\n```python\nbridge_segments: bpy.props.IntProperty(name=\"Segments\")\nbridge_twist: bpy.props.IntProperty(name=\"Twist\")\ncircle_custom_radius: bpy.props.BoolProperty(name=\"Radius\")\ncircle_fit: bpy.props.EnumProperty(name=\"Method\")\ncircle_flatten: bpy.props.BoolProperty(name=\"Flatten\")\ncircle_influence: bpy.props.FloatProperty(name=\"Influence\")\ncircle_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\ncircle_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\ncircle_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\ncircle_radius: bpy.props.FloatProperty(name=\"Radius\")\n```\n\nThis syntax is required for all property definitions in Blender 2.8 and later, including 4.4[1].",
      "In Blender 4.4, the old property registration API (e.g., assigning bpy.props.*Property directly to module-level variables) is deprecated. Properties must now be defined as class attributes within a class derived from bpy.types.PropertyGroup, and then registered using bpy.utils.register_class, with the property group assigned to bpy.types.Scene or another data block using bpy.props.PointerProperty.\n\nBelow is the corrected code block for Blender 4.4 compatibility, showing how to migrate your properties:\n\n```python\nimport bpy\n\nclass MyCurveProperties(bpy.types.PropertyGroup):\n    circle_regular: bpy.props.BoolProperty(name=\"Regular\")\n    curve_boundaries: bpy.props.BoolProperty(name=\"Boundaries\")\n    curve_influence: bpy.props.FloatProperty(name=\"Influence\")\n    curve_interpolation: bpy.props.EnumProperty(\n        name=\"Interpolation\",\n        items=[\n            ('LINEAR', \"Linear\", \"\"),\n            ('BEZIER', \"Bezier\", \"\"),\n            # Add other interpolation types as needed\n        ]\n    )\n    curve_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    curve_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    curve_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    curve_regular: bpy.props.BoolProperty(name=\"Regular\")\n    curve_restriction: bpy.props.EnumProperty(\n        name=\"Restriction\",\n        items=[\n            ('NONE', \"None\", \"\"),\n            ('LIMIT', \"Limit\", \"\"),\n            # Add other restriction types as needed\n        ]\n    )\n    flatten_influence: bpy.props.FloatProperty(name=\"Influence\")\n\n# Register the property group\nbpy.utils.register_class(MyCurveProperties)\n\n# Attach to Scene (or another data block as needed)\nbpy.types.Scene.my_curve_props = bpy.props.PointerProperty(type=MyCurveProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes inside a PropertyGroup subclass.\n- Use the colon (:) syntax for type annotations, not assignment (=).\n- Register the class and attach it to a data block (e.g., Scene) via PointerProperty.\n\nThis approach is required for Blender 2.80+ and fully compatible with Blender 4.4[2][3].",
      "In **Blender 4.4**, property definitions must be declared as class attributes inside a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar, and registered with Blender. The old style of assigning properties directly to variables at the module level is deprecated.\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    flatten_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    flatten_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    flatten_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    flatten_plane: bpy.props.EnumProperty(name=\"Plane\", items=[('X', \"X\", \"\"), ('Y', \"Y\", \"\"), ('Z', \"Z\", \"\")])\n    flatten_restriction: bpy.props.EnumProperty(name=\"Restriction\", items=[('NONE', \"None\", \"\"), ('SOME', \"Some\", \"\")])\n    gstretch_conversion: bpy.props.EnumProperty(name=\"Conversion\", items=[('A', \"A\", \"\"), ('B', \"B\", \"\")])\n    gstretch_conversion_distance: bpy.props.FloatProperty(name=\"Distance\")\n    gstretch_conversion_max: bpy.props.IntProperty(name=\"Max Vertices\")\n    gstretch_conversion_min: bpy.props.IntProperty(name=\"Min Vertices\")\n    gstretch_conversion_vertices: bpy.props.IntProperty(name=\"Vertices\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not assigned at the module level.\n- All properties must be inside a class derived from `bpy.types.PropertyGroup` (or similar).\n- Enum properties require an `items` argument (replace with your actual items as needed).\n\nTo use these properties, register the class and assign it to a context, e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`.\n\nThis is the Blender 4.4 compatible way to define custom properties[1].",
      "In Blender 4.4, the old property registration functions like `bpy.props.BoolProperty`, `bpy.props.FloatProperty`, and `bpy.props.EnumProperty` are deprecated for use as direct assignments to class attributes. Instead, you should use type annotations with the property functions as default values. Here is how you should update your code:\n\n```python\nimport bpy\n\nclass YourPropertyGroup(bpy.types.PropertyGroup):\n    gstretch_delete_strokes: bpy.props.BoolProperty(name=\"Delete strokes\")\n    gstretch_influence: bpy.props.FloatProperty(name=\"Influence\")\n    gstretch_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    gstretch_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    gstretch_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    gstretch_method: bpy.props.EnumProperty(name=\"Method\")\n    relax_input: bpy.props.EnumProperty(name=\"Input\")\n    relax_interpolation: bpy.props.EnumProperty(name=\"Interpolation\")\n    relax_iterations: bpy.props.EnumProperty(name=\"Iterations\")\n    relax_regular: bpy.props.BoolProperty(name=\"Regular\")\n```\n\n**Key changes:**\n- Use a colon (`:`) for type annotation, not `=`.\n- The property function (e.g., `bpy.props.BoolProperty(...)`) is used as the default value.\n- All properties must be defined inside a class derived from `bpy.types.PropertyGroup` (or similar Blender types).\n\nThis is the required migration for Blender 4.4 compatibility[2].",
      "Replace the deprecated property definitions from Blender 2.79 with the updated Blender 4.4 API syntax, using the new-style annotation system. In Blender 2.80 and later, properties must be defined as class annotations using type hints.\n\nHere are the corrected code lines for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyClass(bpy.types.PropertyGroup):\n    space_influence: bpy.props.FloatProperty(name=\"Influence\")\n    space_input: bpy.props.EnumProperty(name=\"Input\")\n    space_interpolation: bpy.props.EnumProperty(name=\"Interpolation\")\n    space_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    space_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    space_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n```\n\nKey changes:\n- Use the colon (:) annotation syntax instead of assignment (=) for property definitions.\n- Place property definitions inside a class derived from bpy.types.PropertyGroup (or another appropriate Blender type).\n- Register the class as needed in your add-on or script.\n\nThis syntax is required for Blender 2.80 and newer, including 4.4[2][3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\margin.py",
    "warnings": [],
    "api_suggestions": [
      "Here are the corrected code lines for Blender 4.4 compatibility:\n\n```python\nresolution: bpy.props.IntProperty(\n    name=\"Resolution\",\n    description=\"Number of sample points\",\n    default=50,\n    min=0,\n    max=100,\n    animatable=True\n)\n\nextra: bpy.props.IntProperty(\n    name=\"Extra\",\n    description=\"Extra Steps\",\n    default=4,\n    min=0,\n    max=10,\n    animatable=True\n)\n\nsearch: bpy.props.FloatProperty(\n    name=\"Width of Search Band\",\n    description=\"\",\n    default=1.25,\n    min=0.2,\n    max=2,\n    step=5,\n    precision=2,\n    animatable=True\n)\n\nradius: bpy.props.FloatProperty(\n    name=\"Radius\",\n    description=\"\",\n    default=1.0,\n    min=0.0,\n    max=10.0,\n    animatable=True\n)\n\nspokes: bpy.props.IntProperty(\n    name=\"Spokes\",\n    description=\"\",\n    default=8,\n    min=1,\n    max=64,\n    animatable=True\n)\n\n# For transform.resize, use keyword arguments and ensure correct context\nbpy.ops.transform.resize(value=(0, 0, 1))\nbpy.ops.transform.resize(value=(0, 0, zscale))\n```\n\n**Key changes:**\n- Use type annotations (`name: bpy.props.TypeProperty(...)`) for property definitions.\n- Replace `options={'ANIMATABLE'}` with `animatable=True` (the `options` argument is deprecated).\n- Ensure all property arguments are compatible with Blender 4.4's API.\n- The `bpy.ops.transform.resize` calls remain valid, but ensure the context is correct when calling operators in scripts[1][2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\mesh_cut.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\meta_modelling.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must define properties as class attributes within a bpy.types.PropertyGroup, Operator, or Panel, and use the annotation syntax. The direct assignment to bpy.props is deprecated.\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    world: bpy.props.BoolProperty(\n        default=True,\n        name=\"Use world coordinate for calculation...almost always should be true.\"\n    )\n    # smooth: bpy.props.BoolProperty(\n    #     default=True,\n    #     name=\"Smooth the outline. Slightly less accurate in some situations but more accurate in others. Default True for best results\"\n    # )\n    angle: bpy.props.IntProperty(\n        default=30,\n        name=\"Crease Angle\",\n        min=25,\n        max=50,\n        description=\"How sharp a crevice needs to be to fill, bigger number means only really sharp creases\"\n    )\n```\nThis code uses the required annotation syntax (the colon :), and places the properties inside a PropertyGroup subclass, as required by Blender 4.4[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\min_thickness.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\model_labels.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must use the `bpy.props` functions as *annotations* (with a colon, not assignment) inside classes derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or `bpy.types.Panel`. The old assignment style is deprecated and will raise warnings or errors.\n\nHere is the **corrected code block** for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    message: bpy.props.StringProperty(default='')\n    font_size: bpy.props.FloatProperty(default=3.0, description=\"Text Size\", min=1, max=7)\n    depth: bpy.props.FloatProperty(default=1.0, description=\"Text Depth\", min=0.2, max=7)\n    y_align: bpy.props.EnumProperty(items=items_align_y, name=\"Vertical Alignment\", default='BOTTOM')\n    x_align: bpy.props.EnumProperty(items=items_align_x, name=\"Horizontal Alignment\", default='LEFT')\n    invert: bpy.props.BoolProperty(default=False, description=\"Mirror text\")\n    spin: bpy.props.BoolProperty(default=False, description=\"Spin text 180\")\n    positive: bpy.props.BoolProperty(default=True, description='Add text vs subtract text')\n    remesh: bpy.props.BoolProperty(default=True, description='Remesh text vs subtract text')\n    solver: bpy.props.EnumProperty(\n        description=\"Boolean Method\",\n        items=(\n            (\"BMESH\", \"Bmesh\", \"Faster/More Errors\"),\n            (\"CARVE\", \"Carve\", \"Slower/Less Errors\")\n        ),\n        default=\"BMESH\"\n    )\n```\n\n**Key changes:**\n- Use `:` (annotation) instead of `=` for property definitions inside the class.\n- Place all properties inside a `bpy.types.PropertyGroup` subclass.\n- Register the property group and assign it to a data block (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`) as needed for access.\n\nThis is the required style for Blender 2.80+ and is fully compatible with Blender 4.4[4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\model_work.py",
    "warnings": [],
    "api_suggestions": [
      "Here is the corrected code for Blender 4.4 compatibility. In Blender 2.8+ (including 4.4), property definitions must be class attributes inside a class derived from bpy.types.PropertyGroup, Operator, Panel, etc., not as standalone assignments. The property function names remain the same, but the usage context changes.\n\nBelow is the migrated code block, ready for use inside a class definition (e.g., a PropertyGroup or Operator):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    iterations: bpy.props.IntProperty(\n        name=\"Expansion/Dilation Iterations\",\n        default=20,\n        min=3,\n        max=100\n    )\n    remesh_depth: bpy.props.IntProperty(\n        default=9,\n        min=5,\n        max=10,\n        description='Remesh Modifier depth 9 is usually good, 10 is slow, 8 for quick prints'\n    )\n    detail_level: bpy.props.IntProperty(\n        default=3,\n        min=1,\n        max=8,\n        description='Sculpt remesh triangulation detail, 3 to 4 is fine for splints'\n    )\n    # target_resolution: bpy.props.IntProperty(\n    #     default=150,\n    #     min=30,\n    #     max=300,\n    #     step=10,\n    #     description='Target number of verts in thousands'\n    # )\n    method: bpy.props.EnumProperty(\n        items=[\n            ('BMESH', 'BMESH', 'BMESH'),\n            ('MESH', 'MESH', 'MESH')\n        ],\n        default='BMESH'\n    )\n    invert: bpy.props.BoolProperty(\n        default=False,\n        name='Invert'\n    )\n    preview_selection: bpy.props.IntProperty(\n        name='Preview Selection',\n        default=0,\n        min=0,\n        max=10\n    )\n    base_height: bpy.props.FloatProperty(\n        name='Base Height',\n        default=3,\n        min=0,\n        max=50,\n        description='Base height added in mm'\n    )\n    # smooth_zone: bpy.props.FloatProperty(\n    #     name='Smooth Zone',\n    #     default=0.5,\n    #     min=0.2,\n    #     max=2.0,\n    #     description='Width of border smoothing zone in mm'\n    # )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations (`:`) inside a class derived from `bpy.types.PropertyGroup` (or Operator, Panel, etc.)[4].\n- The old assignment style (`iterations = bpy.props.IntProperty(...)`) at the module level is no longer valid in Blender 2.8+.\n- The `step` argument is not supported for `IntProperty` in Blender 4.4 and should be omitted.\n- Commented-out properties remain commented for reference.\n\n**To use these properties:**\n- Register the class and assign it to a data block, e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`.\n\nThis approach is fully compatible with Blender 4.4[4].",
      "In **Blender 4.4**, property definitions must be declared as class attributes inside a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar, using type annotations. The old style of assigning properties directly to variables at the module level is deprecated.\n\nHere is the **migrated code block** for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    smooth_iterations: bpy.props.IntProperty(\n        name='Smooth Iterations',\n        default=10,\n        min=0,\n        max=50,\n        description='Iterations to smooth the smoothing zone'\n    )\n    # reverse: bpy.props.BoolProperty(\n    #     name='Reverse Z direction',\n    #     default=False,\n    #     description='Use if auto detection detects base direction wrong'\n    # )\n    mode: bpy.props.EnumProperty(\n        name='Base Mode',\n        items=mode_items\n    )\n    batch_mode: bpy.props.BoolProperty(\n        name='Batch Mode',\n        default=False,\n        description='Will do all selected models, may take 1 minute per model, '\n    )\n    triangulate: bpy.props.BoolProperty(\n        name='Triangulate',\n        default=True,\n        description='Will triangluate the extuded base and faces (use for BSP Ortho!)'\n    )\n    detail_level: bpy.props.FloatProperty(\n        name='Detail Level',\n        default=1.5,\n        min=0.75,\n        max=5.0,\n        description='Base Triangualtion detail, bigger = more triangles, bigger file'\n    )\n    base_height: bpy.props.FloatProperty(\n        name='Base Height',\n        default=1,\n        min=-50,\n        max=50,\n        description='Base height added in mm'\n    )\n    maxilla: bpy.props.BoolProperty(\n        name='Maxilla',\n        default=False,\n        description='Is this the upper or lower jaw'\n    )\n    base_thickness: bpy.props.FloatProperty(\n        name='Base Thickness',\n        default=10,\n        min=-50,\n        max=50,\n        description='Base height added in mm'\n    )\n    molar_width: bpy.props.FloatProperty(\n        name='Molar Width',\n        default=60,\n        min=10,\n        max=100,\n        description='Molar Width'\n    )\n```\n\n**Key changes:**\n- Properties are now class attributes with type annotations (`:`), not assigned as variables.\n- All property definitions are inside a class derived from `bpy.types.PropertyGroup`.\n- Register this class and assign it to a data block (e.g., `bpy.types.Scene.my_props: PointerProperty(type=MyProperties)`) as needed[3].\n\nThis is the Blender 4.4+ compatible way to define custom properties.",
      "In **Blender 4.4**, property definitions must be placed inside a class derived from `bpy.types.PropertyGroup` (or similar), and you must use type annotations instead of direct assignment. The old style of assigning properties as class variables is deprecated.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import FloatProperty, IntProperty, BoolProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    molar_bevel: FloatProperty(\n        name='Molar Bevel', default=10, min=2, max=20, description='Molar Bevel'\n    )\n    molar_height: FloatProperty(\n        name='Molar Height', default=20, min=2, max=50, description='Molar Height'\n    )\n    bevel_angle: IntProperty(\n        name='Bevel Angle', default=45, min=35, max=70, description='Bevel Angle'\n    )\n    posterior_length: FloatProperty(\n        name='Posterior Length', default=40, min=15, max=100, description='Posterior Length'\n    )\n    canine_width: FloatProperty(\n        name='Canine Width', default=45, min=10, max=100, description='Canine Bevel'\n    )\n    canine_height: FloatProperty(\n        name='Canine Height', default=10, min=5, max=100, description='Canine Height'\n    )\n    anterior_length: FloatProperty(\n        name='Anterior Length', default=15, min=5, max=25, description='Anterior Length'\n    )\n    anterior_height: FloatProperty(\n        name='Anterior Height', default=10, min=5, max=25, description='Anterior Length'\n    )\n    maxilla: BoolProperty(\n        name='Maxilla', default=False, description='Is this the upper or lower jaw'\n    )\n    solidify: BoolProperty(\n        name='Solidify', default=False, description='Solidify the top surface for boolean joining'\n    )\n```\n\n**Key changes:**\n- Properties are now defined with type annotations (`:`) inside a `PropertyGroup` subclass.\n- Use `FloatProperty`, `IntProperty`, and `BoolProperty` from `bpy.props` as before, but with the new annotation syntax.\n- Register your `PropertyGroup` and assign it to a data block (e.g., `bpy.types.Scene.my_props: PointerProperty(type=MyProperties)`), as needed for your add-on or script.",
      "To migrate your property definitions from Blender 2.79 to Blender 4.4, you must use **type annotations** (the colon syntax) and define properties inside a class derived from PropertyGroup. Then, register that class and use a PointerProperty to attach it to, for example, the Scene or Object. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyAddonProperties(bpy.types.PropertyGroup):\n    land: bpy.props.BoolProperty(\n        name='Land',\n        default=False,\n        description='Make a Land/Dish like an actual base former'\n    )\n    solver: bpy.props.EnumProperty(\n        name='Solver',\n        items=[\n            ('OPTION1', 'Option 1', ''),\n            ('OPTION2', 'Option 2', ''),\n        ],\n        description='Solver options'\n    )\n    radius: bpy.props.FloatProperty(\n        default=2.5,\n        description='Thickness Offset',\n        min=1.0,\n        max=5.0\n    )\n    resolution: bpy.props.FloatProperty(\n        default=0.7,\n        description='Mesh resolution.  1 coarse, .6 medium to .3 high_res'\n    )\n    base_at_cursor: bpy.props.BoolProperty(\n        default=True,\n        description='Will use 3d cursor to auto plane cut the result'\n    )\n    decimate: bpy.props.BoolProperty(\n        default=False,\n        description='Will decimate mesh first, faster for dense meshes'\n    )\n    use_grid: bpy.props.BoolProperty(\n        default=False,\n        description='Adds a grid structure to support'\n    )\n    grid_method: bpy.props.EnumProperty(\n        name='Grid Method',\n        items=[\n            ('METHOD1', 'Method 1', ''),\n            ('METHOD2', 'Method 2', ''),\n        ],\n        description='Grid method options'\n    )\n\n# Register the PropertyGroup and add it to the Scene\ndef register():\n    bpy.utils.register_class(MyAddonProperties)\n    bpy.types.Scene.my_addon_props = bpy.props.PointerProperty(type=MyAddonProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_addon_props\n    bpy.utils.unregister_class(MyAddonProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes using the colon (:) syntax inside a PropertyGroup subclass[2].\n- EnumProperty requires an items argument (replace with your actual options).\n- Register the PropertyGroup and attach it to the Scene (or another data block) using PointerProperty[2][4].\n\nThis is the Blender 4.4+ compatible way to define and register custom properties.",
      "In **Blender 4.4**, property definitions must be placed inside a subclass of `bpy.types.PropertyGroup` and use type annotations, not direct assignment. The old `bpy.props.FloatProperty` and `bpy.props.BoolProperty` assignments at the module level are deprecated.\n\nHere is the **corrected code block** for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import FloatProperty, BoolProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    grid_hole_size: FloatProperty(\n        default=3.0,\n        description='Grid Hole Size'\n    )\n    grid_wall_size: FloatProperty(\n        default=2.0,\n        description='Grid Wall Size'\n    )\n    grid_depth: FloatProperty(\n        default=2.0,\n        description='depth of grid into model'\n    )\n    finalize: BoolProperty(\n        default=True,\n        description='Will Apply Modifier and delete inner object, uncheck to help diagnose problems'\n    )\n    perimeter_offset: FloatProperty(\n        name='Lateral Offset',\n        default=0.5,\n        description='Lateral offset from the base',\n        min=-0.5,\n        max=1.0\n    )\n    # vertical_offset: FloatProperty(\n    #     name='Vertical Offset',\n    #     default=0.5,\n    #     description='Vertical offset from the base',\n    #     min=0.2,\n    #     max=1.0\n    # )\n    vertical_thickness: FloatProperty(\n        name='Vertical Thickness',\n        default=3.0,\n        description='Vertical thickness of the base',\n        min=1.5,\n        max=8.0\n    )\n    # grid: BoolProperty(\n    #     default=True,\n    #     description='Add a grid pattern to aid plaster retention when mounting'\n    # )\n    # grid_major_size: FloatProperty(\n    #     name='Grid Major Size',\n    #     default=6.0,\n    #     description='Size of grid unit',\n    #     min=2.0,\n    #     max=10.0\n    # )\n    # grid_minor_size: FloatProperty(\n    #     name='Grid Minor Size',\n    #     default=2.0,\n    #     description='Size of grid hole unit',\n    #     min=0.5,\n    #     max=4.0\n    # )\n```\n\n**To use these properties**, register the property group and assign it to a data block (e.g., `Scene`):\n\n```python\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Access example:**  \n`bpy.context.scene.my_props.grid_hole_size`\n\nThis approach is required for Blender 2.80+ and fully compatible with Blender 4.4[4][3].",
      "In **Blender 4.4**, property definitions must be placed inside a class derived from bpy.types.PropertyGroup or directly on a Blender type (such as bpy.types.Scene, bpy.types.Object, etc.), not as standalone variables. The old style (as in your code) is deprecated. Here is the corrected code block for Blender 4.4, using a PropertyGroup:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    fast: bpy.props.BoolProperty(\n        default=False,\n        description='Use Faster but more error prone solver?'\n    )\n    cleanup: bpy.props.BoolProperty(\n        default=True,\n        description='Remove all the components, uncheck for help debugging'\n    )\n    max_gap: bpy.props.FloatProperty(\n        name='Max Gap',\n        default=3.0,\n        min=0.5,\n        max=5.0,\n        description='Largest gap to close a diastema'\n    )\n    wax_drop_size: bpy.props.FloatProperty(\n        name='Wax Droplet Size',\n        default=0.75,\n        min=0.25,\n        max=1.5,\n        description='Size of wax droplets to use to blockout'\n    )\n    max_tangential: bpy.props.FloatProperty(\n        name='Embrasure Exension',\n        default=0.65,\n        min=0.3,\n        max=0.9,\n        description='how directly the teeth must be opposed, this is really an angle.'\n    )\n    finalize: bpy.props.BoolProperty(\n        name='Finalize',\n        default=False,\n        description='You must check this once you are satisfied with the result'\n    )\n    resolution: bpy.props.FloatProperty(\n        default=0.8,\n        min=0.5,\n        max=1.25,\n        description='Mesh resolution.  Dont play with this setting too much.'\n    )\n    over_pack: bpy.props.IntProperty(\n        default=4,\n        min=2,\n        max=5,\n        description='How much to overlap wax droplets.'\n    )\n    base_height: bpy.props.FloatProperty(\n        name='Base Height',\n        default=3.0,\n        min=0.0,\n        max=50.0,\n        description='Base height added in mm'\n    )\n    # smooth_zone: bpy.props.FloatProperty(\n    #     name='Smooth Zone',\n    #     default=0.5,\n    #     min=0.2,\n    #     max=2.0,\n    #     description='Width of border smoothing zone in mm'\n    # )\n\n# Registration example:\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_tool = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_tool\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (:) and type annotation.\n- Properties must be part of a PropertyGroup or attached directly to a Blender type[4].\n- Use PointerProperty to attach the PropertyGroup to a data block (e.g., Scene).\n\nThis is the Blender 4.4 compatible way to define and register custom properties.",
      "The following code migrates your Blender 2.79 property definitions to the Blender 4.4 API. In Blender 2.8 and later, properties must be defined as class attributes inside a bpy.types.PropertyGroup, bpy.types.Operator, or similar, not as standalone assignments. The property function names are now lowercase (e.g., IntProperty \u2192 int_property).\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    smooth_iterations: bpy.props.IntProperty(\n        name='Smooth Iterations',\n        default=10,\n        min=0,\n        max=50,\n        description='Iterations to smooth the smoothing zone'\n    )\n    # reverse: bpy.props.BoolProperty(\n    #     name='Reverse Z direction',\n    #     default=False,\n    #     description='Use if auto detection detects base direction wrong'\n    # )\n    mode: bpy.props.EnumProperty(\n        name='Base Mode',\n        items=mode_items,\n        default='WORLD_Z'\n    )\n    batch_mode: bpy.props.BoolProperty(\n        name='Batch Mode',\n        default=False,\n        description='Will do all selected models, may take 1 minute per model, '\n    )\n```\n\nKey changes:\n- Properties are now defined as class attributes with a colon (:) and not assigned directly.\n- Property function names are lowercase (e.g., IntProperty \u2192 int_property, but the old names are still supported as aliases for backward compatibility).\n- Properties must be inside a class derived from bpy.types.PropertyGroup, bpy.types.Operator, etc.[3]\n\nYou must also register the PropertyGroup and assign it to a context (e.g., scene, object) as needed."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\notch_cut.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your property definitions from Blender 2.79 to **Blender 4.4**, you must use the new `bpy.props` API, which now requires properties to be defined as class annotations using Python's `typing` module and the `: bpy.props.*Property(...)` syntax. The old assignment style is deprecated.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty, FloatProperty\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    hold_update: BoolProperty(\n        default=True,\n        description='Pause auto update'\n    )\n    bend: FloatProperty(\n        default=0,\n        description='bend',\n        min=-3.0,\n        max=3.0,\n        update=update_elastic_notch\n    )\n    length: FloatProperty(\n        default=5,\n        description='length of notch',\n        update=update_elastic_notch\n    )\n    tip_diameter: FloatProperty(\n        default=0.75,\n        description='tip diameter',\n        update=update_elastic_notch\n    )\n    base_width: FloatProperty(\n        default=1.25,\n        description='base width of notch',\n        update=update_elastic_notch\n    )\n    depth: FloatProperty(\n        default=4,\n        description='depth of cut',\n        update=update_elastic_notch\n    )\n    tab_width: FloatProperty(\n        default=1.75,\n        description='tab width',\n        update=update_elastic_notch\n    )\n```\n\n**Key changes:**\n- Use **type annotations** (`:`) instead of assignment (`=`) for property definitions inside classes.\n- Properties must be defined inside a class derived from `bpy.types.PropertyGroup`.\n- Register your property group and assign it to a data block (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyPropertyGroup)`).\n\nThis is the Blender 4.4+ compatible way to define custom properties[3][4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\occlusion.py",
    "warnings": [],
    "api_suggestions": [
      "```python\nmin_d: bpy.props.FloatProperty(\n    name=\"Touching\",\n    description=\"\",\n    default=0.0,\n    min=0.0,\n    max=1.0,\n    step=5,\n    precision=2,\n    options={'ANIMATABLE'}\n)\nmax_d: bpy.props.FloatProperty(\n    name=\"Max D\",\n    description=\"\",\n    default=0.5,\n    min=0.1,\n    max=2.0,\n    step=5,\n    precision=2,\n    options={'ANIMATABLE'}\n)\nmin_d: bpy.props.FloatProperty(\n    name=\"Occlusion Mark Distance\",\n    description=\"\",\n    default=0.2,\n    min=0.001,\n    max=1.0,\n    step=5,\n    precision=2,\n    options={'ANIMATABLE'}\n)\n```\n\n**Key changes for Blender 4.4:**\n- Use **type annotations** (e.g., `min_d: bpy.props.FloatProperty(...)`) instead of assignment (`min_d = ...`) when defining properties in classes[4].\n- Ensure all numeric literals use decimal points for clarity and compatibility.\n- The `step`, `precision`, and `options` arguments remain valid in Blender 4.4[4].\n- Remove duplicate property definitions with the same name in the same class.\n\nIf these are meant to be class properties (e.g., in a `PropertyGroup`), place them inside the class body using the annotation syntax as shown."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\odcutils.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated operator call:\n\n```python\nbpy.ops.transform.resize(value = (scl, scl, scl))\n```\n\nwith direct matrix scaling for Blender 4.4 compatibility:\n\n```python\nimport mathutils\n\nobj = bpy.context.active_object\nobj.scale = (scl, scl, scl)\n```\n\nThis approach sets the object's scale directly, which is the recommended and robust method in modern Blender versions. If you need to apply the scale (make it permanent), add:\n\n```python\nbpy.ops.object.transform_apply(location=False, rotation=False, scale=True)\n```\n\nEnsure the object is selected and active before applying the transformation."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\offset_utilities.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, properties must be defined as class attributes inside a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar, not as standalone variables. The use of `bpy.props.FloatProperty` is still correct, but the assignment must be as a class attribute, not a variable. Here is the **migrated code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    radius: bpy.props.FloatProperty(\n        name='Offset',\n        default=0.5,\n        description='Lateral offset from the base',\n        min=0.3,\n        max=2.0\n    )\n    scaffold_density: bpy.props.FloatProperty(\n        name='Scaffold Density',\n        default=3.0,\n        description='density of metaball placement',\n        min=1.0,\n        max=7.0\n    )\n    meta_resolution: bpy.props.FloatProperty(\n        name='Remesh Resolution',\n        default=0.5,\n        description='Smaller is more detail and slower',\n        min=0.05,\n        max=1.0\n    )\n    pre_offset: bpy.props.FloatProperty(\n        name='Pre Offset',\n        default=0.0,\n        description='pre-offsetting the surface can allow for smaller offsets without using high resolution',\n        min=-1.0,\n        max=1.0\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not as variables.\n- All property definitions are inside a class derived from `bpy.types.PropertyGroup`.\n\nTo use these properties, you must register the class and assign it to a data block, such as `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\optimize_model.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old bpy.props.FloatProperty assignment style is deprecated. Properties must be defined as class attributes within a class derived from bpy.types.PropertyGroup, bpy.types.Operator, or similar, and registered using type annotations. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import FloatProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    wax_droplet_size: FloatProperty(\n        name='Volume Element Size',\n        default=0.7,\n        min=0.25,\n        max=2.0\n    )\n    pre_offset: FloatProperty(\n        name='Pre Offset',\n        default=0.4,\n        min=0.001,\n        max=0.5\n    )\n    wax_resolution: FloatProperty(\n        name='resolution',\n        default=0.3,\n        min=0.25,\n        max=0.6\n    )\n```\n\nKey changes:\n- Use type annotations (:) instead of assignment (=).\n- Define properties inside a PropertyGroup or similar class, not at the module level.\n- Register the PropertyGroup with bpy.utils.register_class and assign it to a context (e.g., bpy.types.Scene).\n\nThis is the Blender 4.4+ compatible way to define custom properties."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\ortho.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4 and later, the direct use of bpy.props.*Property at the module level is deprecated. Properties must be defined as class attributes within a subclass of bpy.types.PropertyGroup, bpy.types.Operator, or similar Blender types. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    base_height: bpy.props.FloatProperty(\n        name='Base Height',\n        default=10,\n        min=-50,\n        max=50,\n        description='Base height added in mm'\n    )\n    link_to_cast: bpy.props.BoolProperty(default=False)\n    show_master: bpy.props.BoolProperty(default=False)\n    buc_ling: bpy.props.FloatProperty(name='Facial/Lingual', default=2)\n    mes_dis: bpy.props.FloatProperty(name='Mesial/Distal', default=2)\n    occlusal: bpy.props.FloatProperty(name='Occluso/Gingival', default=0)\n```\n\nKey changes:\n- Properties are now defined as class attributes inside a PropertyGroup subclass, using the annotation syntax (the colon :).\n- Duplicate property definitions have been removed.\n- Register the PropertyGroup and assign it to a context (e.g., bpy.types.Scene) as needed in your add-on or script[1][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\panel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\panel_register.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\plane_cut.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4 and later, the direct use of bpy.props.*Property at the module level is deprecated. Properties must now be defined as class attributes within a bpy.types.PropertyGroup, bpy.types.Operator, or similar Blender type. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    simple_base: bpy.props.BoolProperty(\n        default=False,\n        description='Extrude open edge downward before cutting'\n    )\n    simple_base_height: bpy.props.FloatProperty(\n        default=8.0,\n        description='Amount to add to extrude the border edges'\n    )\n    hollow: bpy.props.BoolProperty(\n        default=False,\n        description='Hollow the model after cutting'\n    )\n    wall_thickness: bpy.props.FloatProperty(\n        default=3.5,\n        description='Wall thickness'\n    )\n    cut_method: bpy.props.EnumProperty(\n        name='Mode',\n        items=[\n            ('SURFACE', 'SURFACE', 'SURFACE'),\n            ('SOLID', 'SOLID', 'SOLID')\n        ],\n        default='SURFACE'\n    )\n    do_bool: bpy.props.BoolProperty(\n        default=True\n    )\n```\n\nKey changes:\n- Properties are now defined as class attributes inside a PropertyGroup subclass, using the annotation syntax (e.g., simple_base: bpy.props.BoolProperty(...)).\n- The old assignment syntax (simple_base = bpy.props.BoolProperty(...)) is no longer valid at the module level in Blender 4.4+[1][5].\n\nYou must then register this PropertyGroup and assign it to a context (such as bpy.types.Scene) as needed."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\p_picker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\refracotry_example.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\refractory_new.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your property definitions from Blender 2.79 to Blender 4.4, you must use the new annotation syntax for properties inside classes (using `:` and not assignment), and ensure you define them within a class derived from `bpy.types.PropertyGroup`, `Operator`, or `Panel` as appropriate. The old assignment style is deprecated and will not work in Blender 2.8+ and especially not in 4.x.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    use_offset: bpy.props.BoolProperty(\n        default=True,\n        name=\"Use Spacer\",\n        description=\"Use offset spacer on the mesh\"\n    )\n    use_undercut: bpy.props.BoolProperty(\n        default=True,\n        name=\"Allow Undercuts\",\n        description=\"Allow undercuts up to a certain amount\"\n    )\n    offset_value: bpy.props.FloatProperty(\n        default=0.12,\n        min=0.01,\n        max=5.0,\n        name='Offset'\n    )\n    undercut_value: bpy.props.FloatProperty(\n        default=0.05,\n        min=0.01,\n        max=1.0,\n        name='Undercut'\n    )\n    method: bpy.props.EnumProperty(\n        items=[\n            ('1', 'Standard', '1'),\n            ('2', 'Fast (Beta)', '2')\n        ]\n    )\n```\n\n**Key changes:**\n- Use the `:` annotation syntax, not `=`.\n- Place properties inside a class derived from `bpy.types.PropertyGroup`.\n- Register the property group and assign it to a data block (e.g., `Scene`, `Object`) as needed in your `register()` function.\n\n**Example registration:**\n```python\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_tool = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_tool\n    bpy.utils.unregister_class(MyProperties)\n```\n\nThis is the Blender 4.4+ compatible way to define and register custom properties[3].",
      "To migrate your property definitions from Blender 2.79 to **Blender 4.4**, you must use the new `bpy.props` API style, which requires properties to be defined as class attributes within a `PropertyGroup` or directly in an `Operator`/`Panel` class. The old style of assigning properties directly to classes at the module level is deprecated.\n\nBelow is the **Blender 4.4 compatible code block** for your properties, assuming you are defining them in a `PropertyGroup` (the recommended modern approach):\n\n```python\nimport bpy\n\nclass MyAddonProperties(bpy.types.PropertyGroup):\n    use_offset: bpy.props.BoolProperty(\n        default=True,\n        name=\"Use Spacer\",\n        description=\"Use offset spacer on the mesh\"\n    )\n    use_undercut: bpy.props.BoolProperty(\n        default=True,\n        name=\"Allow Undercuts\",\n        description=\"Allow undercuts up to a certain amount\"\n    )\n    offset_value: bpy.props.FloatProperty(\n        default=0.12,\n        min=0.01,\n        max=5.0,\n        name='Offset'\n    )\n    undercut_value: bpy.props.FloatProperty(\n        default=0.05,\n        min=0.01,\n        max=1.0,\n        name='Undercut'\n    )\n    method: bpy.props.EnumProperty(\n        items=[\n            ('1', 'Standard', '1'),\n            ('2', 'Fast', '2')\n        ],\n        default='2'\n    )\n\n# Register the PropertyGroup and add it to a context, e.g., Scene\ndef register():\n    bpy.utils.register_class(MyAddonProperties)\n    bpy.types.Scene.my_addon_props = bpy.props.PointerProperty(type=MyAddonProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_addon_props\n    bpy.utils.unregister_class(MyAddonProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and type annotation.\n- Properties must be inside a `PropertyGroup` (or directly in an Operator/Panel class).\n- Use `PointerProperty` to attach your `PropertyGroup` to `Scene`, `Object`, etc.\n\nThis is the modern, Blender 4.4-compliant way to define and register custom properties.",
      "```python\nimport bpy\nfrom bpy.props import FloatProperty, EnumProperty\n\noffset_value: FloatProperty(\n    name=\"Offset\",\n    default=0.12,\n    min=0.01,\n    max=5.0,\n    description=\"Offset\"\n)\n\nundercut_value: FloatProperty(\n    name=\"Undercut\",\n    default=0.05,\n    min=0.01,\n    max=1.0,\n    description=\"Undercut\"\n)\n\nmethod: EnumProperty(\n    name=\"Method\",\n    items=[\n        ('1', 'Standard', '1'),\n        ('2', 'Fast (Beta)', '2')\n    ],\n    default='2'\n)\n```\n\n**Key changes:**\n- Use type annotations (`offset_value: FloatProperty(...)`) instead of assignment (`offset_value = bpy.props.FloatProperty(...)`).\n- Import property types directly from `bpy.props`.\n- Provide `name` and `description` as keyword arguments, not positional.\n- This syntax is required for Blender 2.80+ and fully compatible with Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\refractory_numpy.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\remesh_utilities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\reports.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\splint.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your **BoolProperty** definitions to Blender 4.4, you must define them as class attributes inside a class derived from `bpy.types.PropertyGroup` (or another Blender RNA class), or attach them to Blender types (like `bpy.types.Scene`) during registration. The old style of assigning properties to variables directly is deprecated.\n\nBelow is the **corrected code block** for Blender 4.4, assuming you want to define these as part of a custom PropertyGroup:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    clear: bpy.props.BoolProperty(\n        name=\"Clear\",\n        description=\"Replace existing units with selected, \\n else add selected to existing\",\n        default=False\n    )\n    finalize: bpy.props.BoolProperty(\n        name=\"Finalize\",\n        description=\"Apply all modifiers to splint before adding guides?  may take longer, less risk of crashing\",\n        default=True\n    )\n    world: bpy.props.BoolProperty(\n        name=\"Use world coordinate for calculation...almost always should be true.\",\n        default=True\n    )\n    smooth: bpy.props.BoolProperty(\n        name=\"Smooth the outline.  Slightly less acuurate in some situations but more accurate in others.  Default True for best results\",\n        default=True\n    )\n\n# Register the property group and add it to the scene\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not assigned to variables.\n- Use a `PropertyGroup` to group related properties.\n- Register the property group and attach it to a Blender type (e.g., `Scene`) using a `PointerProperty`[4].\n\n**Note:**  \n- Remove duplicate or misspelled property definitions (e.g., multiple `finalize` and `world`).\n- If you want to add these properties directly to `Scene` or another type, do so in the `register()` function, not as standalone variables[4].\n\nThis code is compatible with Blender 4.4 and follows current API conventions.",
      "Here are the corrected property definitions for Blender 4.4. In Blender 2.8 and later, including 4.4, property definitions must be assigned as class attributes inside a class derived from bpy.types.PropertyGroup, bpy.types.Operator, or similar, not as standalone variables. The options argument is also deprecated for most property types.\n\nBelow is the updated code block for use inside a class (e.g., a PropertyGroup):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    thickness: bpy.props.FloatProperty(\n        name=\"Thickness\",\n        description=\"Splint Thickness\",\n        default=2.0,\n        min=0.3,\n        max=5.0\n    )\n    cleanup: bpy.props.BoolProperty(\n        name=\"Cleanup\",\n        description=\"Apply Modifiers and cleanup models \\nDo not use if planning bone support\",\n        default=True\n    )\n    smooth_iterations: bpy.props.IntProperty(\n        name='Smooth',\n        default=5\n    )\n    detail: bpy.props.FloatProperty(\n        name=\"Detail\",\n        description=\"Edge length detail\",\n        default=0.8,\n        min=0.025,\n        max=1.0\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) instead of assignment (`=`).\n- The `options` argument is removed, as it is no longer supported for these property types.\n- Only one definition for `detail` is included (duplicate removed).\n- All numeric literals use floats where appropriate (e.g., `2.0` instead of `2`).\n\nTo register this property group, use:\n\n```python\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nThis is the Blender 4.4 compatible way to define and register custom properties."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\splint_booleans.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must use the new-style annotation syntax with type hints and assignment to class attributes, not direct assignment to variables. The old `bpy.props.*Property` assignment outside of a class is deprecated. Here is the corrected code block for defining these properties in a Blender 4.4-compatible way, assuming they are part of a class (e.g., a PropertyGroup or Operator):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    resolution: bpy.props.FloatProperty(\n        name=\"Detail Level\",\n        min=0.1,\n        max=0.5,\n        default=0.175,\n        description=\"Smaller numbers = higher precision and slower calc time\"\n    )\n    jaw_mode: bpy.props.EnumProperty(\n        name=\"Jaw Mode\",\n        default='MAX',\n        items=[\n            ('MAX', 'MAX', 'MAX'),\n            ('MAND', 'MAND', 'MAND')\n        ]\n    )\n    all_positions: bpy.props.BoolProperty(\n        name=\"All Positions\",\n        default=False,\n        description=\"Create a unique shell for all stored positions\"\n    )\n```\n\n**Key changes:**\n- Use **type annotations** (`:`) and assign to class attributes inside a class derived from `bpy.types.PropertyGroup` or similar.\n- Do not assign properties to variables at the module level.\n- Use only one definition per property name within the class.\n\nThis is the required approach for Blender 2.80+ and is fully compatible with Blender 4.4[2][4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\splint_cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\splint_face_bow.py",
    "warnings": [],
    "api_suggestions": [
      "calibration_length: bpy.props.FloatProperty(\n    name='Reference Length',\n    default=1.0\n)"
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\splint_metaball.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\splint_occlusal_surfaces.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old property registration style using direct assignment to bpy.props (e.g., bpy.props.BoolProperty) is deprecated. Properties should now be defined as class annotations using Python's type hinting and the bpy.props module. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyOperator(bpy.types.Operator):\n    # Use class annotations for properties in Blender 2.80+ (including 4.4)\n    sculpt_to: bpy.props.BoolProperty(\n        default=False,\n        description=\"Not only remove but pull some of the shell down to touch\"\n    )\n    snap_limit: bpy.props.FloatProperty(\n        default=2.0,\n        min=0.25,\n        max=5.0,\n        description=\"Max distance the shell will snap to\"\n    )\n    remesh: bpy.props.BoolProperty(\n        default=True,\n        description=\"Remesh Afterward\"\n    )\n    operation: bpy.props.EnumProperty(\n        name='Subtract Mode',\n        items=mode_items,\n        default='SURFACE_FROM_BOTH'\n    )\n```\n\n**Key changes:**\n- Use class-level annotations (e.g., `sculpt_to: bpy.props.BoolProperty(...)`) instead of assigning properties to variables.\n- Do not assign properties directly to variables outside of a class.\n- Remove duplicate property definitions.\n\nThis is the required and supported way to define custom properties for operators and panels in Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\splint_shell.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\survey_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\textbox.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\tooth_library.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\tracking.py",
    "warnings": [],
    "api_suggestions": [
      "Replace your deprecated Blender 2.79 EnumProperty line:\n\n```python\ntracking = bpy.props.EnumProperty(\n```\n\nwith the Blender 4.4 compatible syntax, which uses the new annotation system and type hints:\n\n```python\ntracking: bpy.props.EnumProperty(\n```\n\nIf this is inside a class, it should look like:\n\n```python\nclass MyClass(bpy.types.PropertyGroup):\n    tracking: bpy.props.EnumProperty(\n        name=\"Tracking\",\n        description=\"Tracking mode\",\n        items=[\n            ('OPTION1', \"Option 1\", \"Description 1\"),\n            ('OPTION2', \"Option 2\", \"Description 2\"),\n        ]\n    )\n```\n\n**Key changes:**\n- Use the type annotation syntax (`tracking: bpy.props.EnumProperty(...)`) instead of assignment (`tracking = ...`).\n- This is required for all property definitions in Blender 2.8+ and is fully compatible with Blender 4.4[4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\undercut_utilities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\validation.py",
    "warnings": [],
    "api_suggestions": [
      "The correct Blender 4.4+ code for defining a password-style string property is:\n\n```python\nkey: bpy.props.StringProperty(\n    name=\"User Key\",\n    subtype='PASSWORD',\n    default=\"\"\n)\n```\n\nKey changes:\n- Use the **annotation syntax** (key: ...) instead of assignment (key = ...).\n- All arguments remain the same, as subtype='PASSWORD' is still valid in Blender 4.4+.\n\nThis syntax is required for all property definitions in Blender 2.8 and later."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\vertex_color_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\vertical_base.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\vis_help_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\v_tools.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use **Python type annotations** (the colon syntax) and define properties inside a class derived from `bpy.types.PropertyGroup`. Properties are then registered as a pointer property on the target type (e.g., `Scene`, `Object`, etc.)[2].\n\nBelow is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    combine_type: bpy.props.EnumProperty(\n        name=\"Type\",\n        items=[\n            ('DIFFERENCE', \"Difference\", \"\"),\n            # Add other enum items as needed\n        ],\n        default=\"DIFFERENCE\"\n    )\n    res: bpy.props.FloatProperty(\n        name='Voxel Size',\n        default=0.2,\n        min=0.05,\n        max=1.0\n    )\n    smooth_iters: bpy.props.IntProperty(\n        name=\"Smooth Iters\",\n        default=0,\n        min=0,\n        max=20\n    )\n    iso: bpy.props.FloatProperty(\n        name='Iso Value',\n        default=0.0,\n        min=-0.5,\n        max=1.0\n    )\n    adapt: bpy.props.FloatProperty(\n        name='Adaptivity',\n        default=0.0,\n        min=0.0,\n        max=2.0\n    )\n    target: bpy.props.EnumProperty(\n        name=\"Target\",\n        items=[\n            ('MAX', \"Max\", \"\"),\n            # Add other enum items as needed\n        ],\n        default=\"MAX\"\n    )\n    world: bpy.props.BoolProperty(\n        default=True,\n        name=\"Use world coordinate for calculation...almost always should be true.\"\n    )\n    # smooth: bpy.props.BoolProperty(\n    #     default=True,\n    #     name=\"Smooth the outline. Slightly less accurate in some situations but more accurate in others. Default True for best results\"\n    # )\n    resolution: bpy.props.FloatProperty(\n        default=0.3,\n        min=0.075,\n        max=1.0,\n        description='Mesh resolution. Lower numbers are slower, bigger numbers less accurate'\n    )\n\n# Register the property group and add it to the Scene (or another type as needed)\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key changes:**\n- Use **type annotations** (colon syntax) inside a `PropertyGroup` subclass[2].\n- Define `items` for `EnumProperty` (required in 2.8+).\n- Register the property group and add it to the desired Blender type (e.g., `Scene`)[2].\n- Remove duplicate or conflicting property names.\n\nThis structure is compatible with Blender 4.4 and follows current API conventions.",
      "In **Blender 4.4**, property definitions for custom classes (such as operators or PropertyGroups) must use the new type annotation syntax, and properties must be defined as class variables, not as assignments. The old assignment style (e.g., `threshold = bpy.props.FloatProperty(...)`) is deprecated and will raise errors.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    threshold: bpy.props.FloatProperty(\n        default=0.05,\n        min=0.001,\n        max=0.2,\n        description='angle to blockout.  .09 is about 5 degrees, .17 is 10degrees.0001 no undercut allowed.'\n    )\n    target: bpy.props.EnumProperty(\n        name=\"Target\",\n        items=[\n            ('MAX', \"Max\", \"\"),\n            ('MIN', \"Min\", \"\"),\n            # Add other items as needed\n        ],\n        default=\"MAX\"\n    )\n    # smooth: bpy.props.BoolProperty(\n    #     default=True,\n    #     name=\"Smooth the outline.  Slightly less accurate in some situations but more accurate in others.  Default True for best results\"\n    # )\n    resolution: bpy.props.FloatProperty(\n        default=0.25,\n        min=0.05,\n        max=1.0,\n        description='Mesh resolution. Lower numbers are slower, bigger numbers less accurate'\n    )\n    smmooth_iters: bpy.props.IntProperty(\n        default=0,\n        min=0,\n        max=10,\n        description='Amount of smoothing'\n    )\n    vol_correction: bpy.props.FloatProperty(\n        default=0.05,\n        min=0.00,\n        max=0.2,\n        description='Inflate Mesh to compensate for volume loss when smoothing'\n    )\n```\n\n**Key changes:**\n- Use **type annotations** (`name: bpy.props.PropertyType(...)`) instead of assignments.\n- EnumProperty now requires an **items** argument (a list of tuples).\n- All properties are defined as **class variables** inside a class derived from `bpy.types.PropertyGroup` (or `Operator`, etc.), not as module-level variables.\n\nThis syntax is required for Blender 2.80+ and is fully compatible with Blender 4.4."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new annotation syntax for properties inside classes, and register them as class attributes using type annotations. The direct assignment to bpy.props outside of classes is deprecated.\n\nBelow are the corrected code lines for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty, BoolProperty, EnumProperty\n\nclass MyAddonProperties(bpy.types.PropertyGroup):\n    cork_lib: StringProperty()\n    dev: BoolProperty(name=\"Development Mode\")\n    non_clinical_use: BoolProperty(\n        default=False,\n        name='Not For Clinical Use',\n        description='By checking this box you certify that you are using this for non-clinical, training or educational purposes'\n    )\n    # auto_use_background: BoolProperty(\n    #     default=True,\n    #     name='Auto Background',\n    #     description='allow D3Splint to do some tasks automatically based on user preferences'\n    # )\n    # auto_optimize: BoolProperty(\n    #     default=False,\n    #     name='Auto Optimize Models',\n    #     description='allow D3Splint to do some tasks automatically based on user preferences'\n    # )\n    auto_blockout: BoolProperty(\n        default=False,\n        name='Auto BLockout Large Concavities',\n        description='Always automatically blockout concavities after rim fusion'\n    )\n    auto_remesh_smooth: BoolProperty(\n        default=False,\n        name='Auto Remesh Smooth',\n        description='Always automatically do remesh and smooth after rim fusion'\n    )\n    default_jaw_type: EnumProperty(\n        name='Jaw Type',\n        # ... (add items and other parameters as needed)\n    )\n    default_workflow_type: EnumProperty(\n        name='Workflow Type',\n        # ... (add items and other parameters as needed)\n    )\n    show_picking: BoolProperty(\n        default=False,\n        name='Show Picking'\n    )\n\n# Register the property group and add it to a type, e.g., Scene\ndef register():\n    bpy.utils.register_class(MyAddonProperties)\n    bpy.types.Scene.my_addon = bpy.props.PointerProperty(type=MyAddonProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_addon\n    bpy.utils.unregister_class(MyAddonProperties)\n```\n\nKey changes:\n- Use **type annotations** (e.g., `cork_lib: StringProperty()`) inside a subclass of `bpy.types.PropertyGroup`.\n- Register the property group and attach it to a Blender data type (e.g., `Scene`) using a `PointerProperty`.\n- Do not assign properties directly to `bpy.props` or Blender types outside of a class definition[4].\n\nThis is the Blender 4.4+ standard for custom properties.",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new property function syntax and assign properties as class annotations (not as direct class attributes). The old bpy.props.*Property assignment is deprecated. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty, EnumProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    show_articulator: BoolProperty(default=False, name='Show Articulator')\n    show_wax: BoolProperty(default=False, name='Show Wax')\n    show_shape_refinement: BoolProperty(default=False, name='Show Shape Refinement')\n    show_deprogrammer: BoolProperty(default=False, name='Show Deprogrammer')\n    show_shell: BoolProperty(default=False, name='Show Shell')\n    show_fit_and_retention: BoolProperty(default=False, name='Show Fit and Retention')\n    show_occlusion: BoolProperty(default=False, name='Show Occlusion')\n    show_finalize: BoolProperty(default=False, name='Show Finalize')\n    show_outdated_tools: BoolProperty(default=False, name='Show Outdated')\n    attachment_lib: EnumProperty(name='Attachment Library', items=[('A', 'A', ''), ('B', 'B', '')])\n```\n\n**Key changes:**\n- Use **type annotations** (the colon syntax) instead of direct assignment.\n- Define properties inside a class derived from `bpy.types.PropertyGroup`.\n- Register this class and assign it to a data block (e.g., `bpy.types.Scene.my_props = PointerProperty(type=MyProperties)`).\n\nThis syntax is required for Blender 2.80+ and is fully compatible with Blender 4.4[2][5].",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must now define properties as class attributes within a bpy.types.PropertyGroup or similar class, and register them using type annotations. The direct assignment to bpy.props at the module level is deprecated.\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import (\n    EnumProperty,\n    BoolProperty,\n    IntProperty,\n)\n\nclass MyProperties(bpy.types.PropertyGroup):\n    attachment_ob: EnumProperty(name='Attachment Object')\n    tooth_lib: EnumProperty(name='Tooth Library')\n    tooth_lib_ob: EnumProperty(name='Tooth Object')\n    use_alpha_tools: BoolProperty(name='Use Alpha Tools')\n    use_poly_cut: BoolProperty(name='Use Poly Cut')\n    auto_check_update: BoolProperty(name='Auto Check Update')\n    updater_intrval_months: IntProperty(name='Updater Interval Months')\n    updater_intrval_days: IntProperty(name='Updater Interval Days')\n    updater_intrval_hours: IntProperty(name='Updater Interval Hours')\n    updater_intrval_minutes: IntProperty(name='Updater Interval Minutes')\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations inside a PropertyGroup subclass.\n- Use the colon (:) syntax, not equals (=), for property definitions.\n- Register your PropertyGroup and assign it to a context (e.g., bpy.types.Scene) as needed.\n\nThis approach is required for Blender 2.8+ and fully compatible with Blender 4.4[3].",
      "In **Blender 4.4**, the use of `bpy.props.BoolProperty` for class-level property definitions is deprecated. You should now use Python's type annotations with `bpy.props` as the value. Here is how to migrate your code:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    show_occlusal_mod: bpy.props.BoolProperty(\n        name=\"Show Occlusal Mod\",\n        description=\"Show the occlusal modification\",\n        default=False\n    )\n    show_survey_functions: bpy.props.BoolProperty(\n        name=\"Show Survey Functions\",\n        description=\"Show the survey functions\",\n        default=False\n    )\n```\n\n**Key changes:**\n- Use type annotations (`:`) instead of assignment (`=`) for property definitions at the class level.\n- The rest of the property definition (name, description, default) remains the same.\n\nThis is the Blender 4.4 compatible way to define properties in a `PropertyGroup` or similar class."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\classes\\AddJob.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\classes\\JobManager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\classes\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\demo_scripts\\test1.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\demo_scripts\\test2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\demo_scripts\\test3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\demo_scripts\\test4.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_processing\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_scripts\\bg_dynamic_surface.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_scripts\\bg_min_thickness.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_scripts\\bg_refractory_model.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_scripts\\bg_refractory_model2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\bg_scripts\\bg_splint_shell.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cork\\cork_fns.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cork\\exceptions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cork\\init.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties must be defined as class annotations using type hints, not as direct assignments. Replace:\n\nshow_help = bpy.props.BoolProperty(\n\nwith:\n\nshow_help: bpy.props.BoolProperty("
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cork\\io_mesh_off.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cork\\lib.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cork\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\bmesh_fns.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\common_drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\common_utilities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\convenience.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\cut_algorithms.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\geodesic.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\modaloperator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_geopath\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_geopath\\geopath_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_geopath\\geopath_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_geopath\\geopath_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_geopath\\geopath_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_geopath\\geopath_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_geopath\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\hole_filler_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\hole_filler_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\hole_filler_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\hole_filler_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\hole_filler_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\hole_filler_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_hole_filler\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\polytrim_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\polytrim_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\polytrim_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\polytrim_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\polytrim_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\polytrim_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_polytrim\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\p_geopath_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\p_geopath_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\p_geopath_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\p_geopath_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\p_geopath_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\p_geopath_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_poly_geopath\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_slice\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_slice\\slice_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_slice\\slice_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_slice\\slice_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_slice\\slice_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_slice\\slice_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_slice\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\splint_outline_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\splint_outline_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\splint_outline_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\splint_outline_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\splint_outline_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\splint_outline_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_splint_outline\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\cut_mesh\\op_triangle_fill\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\odcmenus\\button_data.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\odcmenus\\menu_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\odcmenus\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\panels\\articulator_panel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\panels\\panel_michigan.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\panels\\stored_positions_panel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\panels\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\grease_pencil.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\modal_draw_image_editor.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\modal_draw_imgeditor_view3d.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\modal_draw_multi_area.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\modal_draw_quadview_region.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\modal_draw_raycast_multi_area.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\transformation_matrix.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\py_examples\\windows_screen_areas.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\ambient_occlusion.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of property definitions like bpy.props.FloatProperty, BoolProperty, and IntProperty directly as class attributes is deprecated. Instead, you must use type annotations and assign the property to the annotation, as shown below:\n\n```python\nimport bpy\n\nclass MyOperator(bpy.types.Operator):\n    min_threshold: bpy.props.FloatProperty(default=0.0)\n    max_threshold: bpy.props.FloatProperty(default=0.95)\n    dilate_first: bpy.props.BoolProperty(default=True)\n    dilation_steps: bpy.props.IntProperty(default=2)\n    erosion_steps: bpy.props.IntProperty(default=2)\n    finalize: bpy.props.BoolProperty(default=False)\n    allow_tails: bpy.props.BoolProperty(\n        name='Allow Tails',\n        default=False,\n        description='If False, will only allow loops'\n    )\n    separate: bpy.props.BoolProperty(\n        default=False,\n        description=\"Split out regions into new objects\"\n    )\n```\n\n**Key changes:**\n- Use type annotations (the colon :) instead of assignment (=) for property definitions.\n- Do not assign the property to a variable; instead, annotate the class attribute with the property type and assign the property function to it.\n\nThis is the required migration for Blender 4.4 compatibility[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\bmesh_fns.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common_drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\convenience.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\cut_algorithms.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\geodesic.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\modaloperator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\polytrim_instance.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\rays.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\simplify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\ext\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\livecurves.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\livecurves_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\livecurves_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\livecurves_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\livecurves_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\livecurves_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\mark_curves\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\livecurves.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\livecurves_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\livecurves_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\livecurves_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\livecurves_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\livecurves_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_curve_network\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\livebar.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\smargin_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\smargin_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\smargin_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\smargin_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\smargin_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_live_bar\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\polytrim.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\polytrim_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\polytrim_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\polytrim_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\polytrim_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\polytrim_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_polytrim\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\smargin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\smargin_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\smargin_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\smargin_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\smargin_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\smargin_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\op_splint_margin\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\wax_curve\\wax_curve.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\wax_curve\\wax_curve_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\wax_curve\\wax_curve_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\wax_curve\\wax_curve_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\wax_curve\\wax_curve_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\wax_curve\\wax_curve_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\segmentation\\wax_curve\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\classes\\AddJob.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\classes\\JobManager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\classes\\KillJob.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\classes\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\demo_scripts\\test1.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\demo_scripts\\test2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\demo_scripts\\test3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\demo_scripts\\test4.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\paths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\python_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\reporting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\transform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\wrappers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\functions\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\ui\\bginfo.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\ui\\bgtests.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\back_proc\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_updater.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_updater_ops.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions have moved from `bpy.props` to the `blender` module's `bpy.types` class annotations. You should now define properties as class annotations using type hints, not as direct assignments. Here is how to migrate your code:\n\n```python\n# For use inside a Blender PropertyGroup, Operator, or Panel class:\n\nclean_install: bpy.props.BoolProperty()\nignore_enum: bpy.props.EnumProperty()\ntarget: bpy.props.EnumProperty()\nerror: bpy.props.StringProperty()\n```\n\n**Key changes:**\n- Use **type annotations** (with a colon) instead of assignment (`=`).\n- Place these lines inside your class definition (e.g., a subclass of `bpy.types.PropertyGroup` or `bpy.types.Operator`).\n\n**Example usage:**\n```python\nclass MyProperties(bpy.types.PropertyGroup):\n    clean_install: bpy.props.BoolProperty()\n    ignore_enum: bpy.props.EnumProperty()\n    target: bpy.props.EnumProperty()\n    error: bpy.props.StringProperty()\n```\n\nDirect assignment (e.g., `clean_install = bpy.props.BoolProperty(...)`) is deprecated and will not work in Blender 4.4[5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\addon_common\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\bmesh_fns_common.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\paths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\python_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\reporting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\transform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\wrappers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\functions\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\lib\\classesToRegister.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\lib\\preferences.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\lib\\reportError.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\lib\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\operators\\sculpt_instance.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\operators\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\operators\\custom_sculpt_mode\\sculpt_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\operators\\custom_sculpt_mode\\sculpt_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\operators\\custom_sculpt_mode\\sculpt_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\operators\\custom_sculpt_mode\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\ui\\app_handlers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\custom_sculpt_mode\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_updater.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_updater_ops.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old way of defining properties using direct assignment like `bpy.props.BoolProperty(...)` is deprecated. Properties should now be defined as class annotations using Python's type hinting syntax. Here is how you should migrate your code:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty, EnumProperty, StringProperty\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    clean_install: bpy.props.BoolProperty(\n        name=\"Clean Install\",\n        description=\"Perform a clean installation\",\n        default=False\n    )\n    ignore_enum: bpy.props.EnumProperty(\n        name=\"Ignore Enum\",\n        description=\"Enum for ignoring something\",\n        items=[\n            ('OPTION1', \"Option 1\", \"\"),\n            ('OPTION2', \"Option 2\", \"\")\n        ]\n    )\n    target: bpy.props.EnumProperty(\n        name=\"Target\",\n        description=\"Target enum\",\n        items=[\n            ('TARGET1', \"Target 1\", \"\"),\n            ('TARGET2', \"Target 2\", \"\")\n        ]\n    )\n    error: bpy.props.StringProperty(\n        name=\"Error\",\n        description=\"Error message\",\n        default=\"\"\n    )\n```\n\n**Key changes:**\n- Use class annotations (`:`) instead of assignment (`=`) for property definitions.\n- Define all properties inside a class derived from `bpy.types.PropertyGroup`.\n- Register the property group and assign it to a data block (e.g., `bpy.types.Scene.my_props = PointerProperty(type=MyPropertyGroup)`), if needed.\n\nThis syntax is required for Blender 2.80+ and is fully compatible with Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\addon_common\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\functions\\common.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\lib\\classesToRegister.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\lib\\preferences.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated direct use of `bpy.props.*Property` with **annotations** on class attributes using the `:` syntax, as required in Blender 2.80+ and still current in 4.4. The corrected code block is:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    auto_check_update: bpy.props.BoolProperty()\n    updater_intrval_months: bpy.props.IntProperty()\n    updater_intrval_days: bpy.props.IntProperty()\n    updater_intrval_hours: bpy.props.IntProperty()\n    updater_intrval_minutes: bpy.props.IntProperty()\n```\n\n**Key changes:**\n- Use the `:` annotation syntax for property definitions inside classes derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, etc.\n- Do not assign properties directly (i.e., do not use `=` outside of the annotation context).\n\nThis is the required and supported method for property definitions in Blender 4.4[1][2][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\lib\\reportError.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\operators\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\operators\\points_picker\\points_picker_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\operators\\points_picker\\points_picker_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\operators\\points_picker\\points_picker_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\operators\\points_picker\\points_picker_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\operators\\points_picker\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\ui\\app_handlers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\submodules\\pts_picker\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\common_drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\offset_utilities.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your property definitions to **Blender 4.4**, you must define them as class attributes inside a class derived from `bpy.types.PropertyGroup` (or an operator/panel class), not as standalone assignments. The use of `bpy.props.FloatProperty` is still valid, but the context of definition has changed since Blender 2.8+.\n\nHere is the **Blender 4.4 compatible code block** for your properties, assuming you want to use a `PropertyGroup` (the recommended modern approach):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    radius: bpy.props.FloatProperty(\n        name='Offset',\n        default=0.5,\n        description='Lateral offset from the base',\n        min=0.3,\n        max=2.0\n    )\n    scaffold_density: bpy.props.FloatProperty(\n        name='Scaffold Density',\n        default=3.0,\n        description='density of metaball placement',\n        min=1.0,\n        max=7.0\n    )\n    meta_resolution: bpy.props.FloatProperty(\n        name='Remesh Resolution',\n        default=0.5,\n        description='Smaller is more detail and slower',\n        min=0.05,\n        max=1.0\n    )\n    pre_offset: bpy.props.FloatProperty(\n        name='Pre Offset',\n        default=0.0,\n        description='pre-offsetting the surface can allow for smaller offsets without using high resolution',\n        min=-1.0,\n        max=1.0\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not as assignments.\n- The class must be registered with Blender, and you typically assign an instance to a data block, e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`.\n\n**If you are defining these inside an Operator or Panel:**\n\n```python\nclass MyOperator(bpy.types.Operator):\n    bl_idname = \"object.my_operator\"\n    bl_label = \"My Operator\"\n\n    radius: bpy.props.FloatProperty(\n        name='Offset',\n        default=0.5,\n        description='Lateral offset from the base',\n        min=0.3,\n        max=2.0\n    )\n    # ... repeat for other properties\n```\n\n**Do not use assignment (`=`) outside of a class definition for properties in Blender 2.8+**. Use the colon syntax inside the class body."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\remesh_utilities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\survey_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\undercut_utilities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\vertex_color_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\rays.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\simplify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\addon_common\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\classes\\add_job.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\classes\\job_manager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\classes\\kill_job.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\classes\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\demo_scripts\\test1.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\demo_scripts\\test2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\demo_scripts\\test3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\demo_scripts\\test4.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\bmesh_generators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\images.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\paths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\python_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\reporting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\transform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\wrappers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\functions\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\ui\\bginfo.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\ui\\bgtests.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\background_processing\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\bmesh_utils\\bmesh_delete.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\bmesh_utils\\bmesh_utilities_common.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\bmesh_utils\\bmesh_utilities_cut_mesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\bmesh_utils\\bmesh_utilities_d3g.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\bmesh_utils\\bmesh_utilities_segmentation.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\addon_updater.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\addon_updater_ops.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new annotation-based syntax for properties. The direct assignment to class attributes using bpy.props is deprecated. Instead, use type annotations with a colon and assign the property as a default value.\n\nHere are the corrected code lines for Blender 4.4:\n\n```python\nclean_install: bpy.props.BoolProperty()\nignore_enum: bpy.props.EnumProperty()\ntarget: bpy.props.EnumProperty()\nerror: bpy.props.StringProperty()\n```\n\n**Key changes:**\n- Use a colon (:) for type annotation instead of equals (=).\n- Do not assign the property to a variable; annotate it as a class attribute within your operator or property group class.\n\n**Example usage in a class:**\n```python\nclass MyOperator(bpy.types.Operator):\n    bl_idname = \"object.my_operator\"\n    bl_label = \"My Operator\"\n\n    clean_install: bpy.props.BoolProperty()\n    ignore_enum: bpy.props.EnumProperty()\n    target: bpy.props.EnumProperty()\n    error: bpy.props.StringProperty()\n```\n\nThis syntax is required for Blender 2.8+ and is fully compatible with Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\bmesh_fns_common.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\paths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\python_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\reporting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\transform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\wrappers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\functions\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\lib\\classesToRegister.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\lib\\preferences.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\lib\\reportError.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\lib\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\operators\\sculpt_instance.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\operators\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\operators\\custom_sculpt_mode\\sculpt_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\operators\\custom_sculpt_mode\\sculpt_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\operators\\custom_sculpt_mode\\sculpt_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\operators\\custom_sculpt_mode\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\subtrees\\addon_common\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\ui\\interface.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\custom_sculpt\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\ambient_occlusion.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of `bpy.props.*Property` directly at the module level is deprecated. Properties must now be defined as class attributes within Blender PropertyGroup, Operator, or Panel classes, using type annotations. The correct migration is as follows:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    min_threshold: bpy.props.FloatProperty(default=0.0)\n    max_threshold: bpy.props.FloatProperty(default=0.95)\n    dilate_first: bpy.props.BoolProperty(default=True)\n    dilation_steps: bpy.props.IntProperty(default=2)\n    erosion_steps: bpy.props.IntProperty(default=2)\n    finalize: bpy.props.BoolProperty(default=False)\n    allow_tails: bpy.props.BoolProperty(\n        name='Allow Tails',\n        default=False,\n        description='If False, will only allow loops'\n    )\n    separate: bpy.props.BoolProperty(\n        default=False,\n        description=\"Split out regions into new objects\"\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations inside a subclass of `bpy.types.PropertyGroup`.\n- The old assignment style (`foo = bpy.props.*Property(...)`) at the module level is no longer supported in Blender 4.4."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\bmesh_fns.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common_drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\convenience.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\cut_algorithms.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\geodesic.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\modaloperator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\polytrim_instance.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\rays.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\simplify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\ext\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_geopath\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_geopath\\geopath_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_geopath\\geopath_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_geopath\\geopath_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_geopath\\geopath_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_geopath\\geopath_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_geopath\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\polytrim.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\polytrim_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\polytrim_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\polytrim_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\polytrim_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\polytrim_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_polytrim\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\p_geopath_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\p_geopath_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\p_geopath_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\p_geopath_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\p_geopath_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\p_geopath_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_poly_geopath\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_slice\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_slice\\slice_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_slice\\slice_modal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_slice\\slice_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_slice\\slice_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_slice\\slice_ui_modalwait.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_slice\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\cut_mesh\\op_triangle_fill\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\d3tool_datastructures\\line_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\d3tool_datastructures\\textbox.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\geometry_utils\\bound_box_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\geometry_utils\\grids_scaffolds.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated property definitions with the new-style type annotations, which are required for Blender 2.80+ and fully compatible with Blender 4.4. The properties should be defined as class attributes using type annotations, not as assignments inside the class body.\n\nBelow is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import (\n    EnumProperty,\n    FloatProperty,\n    IntProperty,\n    BoolProperty,\n)\n\nclass MyProperties(bpy.types.PropertyGroup):\n    method: EnumProperty(\n        name=\"Method\",\n        items=[\n            ('OPTION1', \"Option 1\", \"\"),\n            ('OPTION2', \"Option 2\", \"\"),\n        ],\n        default='OPTION1'\n    )\n    width: FloatProperty(name='element width', default=4.0, min=0.5, max=10.0)\n    hole_width: FloatProperty(name='hole width', default=1.25, min=0.25, max=9.0)\n    thickness: FloatProperty(name='thickness', default=2.0, min=0.25, max=9.0)\n    grid_repeats: IntProperty(name='repeats', default=10, min=2, max=50)\n    add_bevel: BoolProperty(name='add bevel', default=True)\n    hole_spacing: FloatProperty(name='element width', default=4.0, min=1.5, max=8.0)\n    hole_diameter: FloatProperty(name='hole width', default=1.0, min=0.5, max=3.0)\n    snap: BoolProperty(name='Snap to Source', default=True)\n```\n\nKey changes:\n- Use **type annotations** (e.g., `width: FloatProperty(...)`) instead of assignment (`width = bpy.props.FloatProperty(...)`).\n- Import property types directly from `bpy.props`.\n- Define all properties as class attributes inside a subclass of `bpy.types.PropertyGroup`.\n\nThis is the required and supported style for Blender 4.4 and all Blender versions since 2.80[2][3].",
      "In Blender 4.4, property definitions for add-ons and custom properties must use the new type annotation syntax within classes derived from bpy.types.PropertyGroup, bpy.types.Operator, or bpy.types.Panel. The direct assignment to variables at the module level (as in Blender 2.79) is deprecated.\n\nBelow is the corrected code block for Blender 4.4, using type annotations and the appropriate property definitions inside a PropertyGroup class:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    snap_offset: bpy.props.FloatProperty(\n        name='Snapp Offset',\n        default=0.0\n    )\n    hole_spacing: bpy.props.FloatProperty(\n        name='element width',\n        default=4.0,\n        min=1.5,\n        max=8.0\n    )\n    hole_diameter: bpy.props.FloatProperty(\n        name='Hole Diameter',\n        default=6.0,\n        min=0.5,\n        max=10.0\n    )\n    thickness: bpy.props.FloatProperty(\n        name='thickness',\n        default=2.0,\n        min=0.25,\n        max=9.0\n    )\n    snap: bpy.props.BoolProperty(\n        name='Snap to Source',\n        default=True\n    )\n    wall_thickness: bpy.props.FloatProperty(\n        name='Wall Thicknes',\n        default=2.0,\n        min=0.25,\n        max=9.0\n    )\n    method: bpy.props.EnumProperty(\n        name='Method',\n        items=[\n            ('OPTION1', 'Option 1', ''),\n            ('OPTION2', 'Option 2', '')\n        ]\n    )\n    grid_repeats: bpy.props.IntProperty(\n        name='Repeats',\n        default=10,\n        min=2,\n        max=50\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations (`:`) inside a subclass of `bpy.types.PropertyGroup`.\n- The old assignment style (`snap_offset = bpy.props.FloatProperty(...)`) at the module level is no longer supported in Blender 4.4.\n- EnumProperty requires an `items` argument; you must define the possible options explicitly.\n\nTo use these properties, register the PropertyGroup and assign it to a context (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`), but the above block covers only the property definitions as requested.",
      "In **Blender 4.4**, property definitions must be assigned as class attributes within a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar, not as standalone variables. The old usage is deprecated.\n\n**Replace:**\n```python\nresolution = bpy.props.FloatProperty(name = 'Mesh Resolution', default = .3, min = .2, max = 3.0)\n```\n\n**With:**\n```python\nimport bpy\nfrom bpy.props import FloatProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    resolution: FloatProperty(\n        name='Mesh Resolution',\n        default=0.3,\n        min=0.2,\n        max=3.0\n    )\n```\n\n**Register the property group and add it to a context (e.g., scene):**\n```python\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nThis approach is fully compatible with Blender 4.4 and follows the current API requirements[2][3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\geometry_utils\\loops_tools.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate the property definitions from Blender 2.79 to Blender 4.4, you must use the new-style type annotations for properties in classes derived from bpy.types.PropertyGroup, bpy.types.Operator, or bpy.types.Panel. The direct assignment via bpy.props.*Property is deprecated.\n\nReplace your old code lines like:\n\n```python\ncubic_strength = bpy.props.FloatProperty(name = \"Strength\")\ninterpolation = bpy.props.EnumProperty(name = \"Interpolation mode\")\nloft = bpy.props.BoolProperty(name = \"Loft\")\nloft_loop = bpy.props.BoolProperty(name = \"Loop\")\nmin_width = bpy.props.IntProperty(name = \"Minimum width\")\nmode = bpy.props.EnumProperty(name = \"Mode\")\nremove_faces = bpy.props.BoolProperty(name = \"Remove faces\")\nreverse = bpy.props.BoolProperty(name = \"Reverse\")\nsegments = bpy.props.IntProperty(name = \"Segments\")\ntwist = bpy.props.IntProperty(name = \"Twist\")\n```\n\nwith the following Blender 4.4 compatible code (inside your class definition):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    cubic_strength: bpy.props.FloatProperty(name=\"Strength\")\n    interpolation: bpy.props.EnumProperty(name=\"Interpolation mode\")\n    loft: bpy.props.BoolProperty(name=\"Loft\")\n    loft_loop: bpy.props.BoolProperty(name=\"Loop\")\n    min_width: bpy.props.IntProperty(name=\"Minimum width\")\n    mode: bpy.props.EnumProperty(name=\"Mode\")\n    remove_faces: bpy.props.BoolProperty(name=\"Remove faces\")\n    reverse: bpy.props.BoolProperty(name=\"Reverse\")\n    segments: bpy.props.IntProperty(name=\"Segments\")\n    twist: bpy.props.IntProperty(name=\"Twist\")\n```\n\nKey changes:\n- Use **type annotations** (the colon syntax) instead of assignment.\n- Place property definitions **inside a class** derived from bpy.types.PropertyGroup (or Operator/Panel as appropriate)[3].\n- Register the PropertyGroup and assign it to bpy.types.Scene or another RNA type as needed.\n\nThis is required for Blender 2.80+ and is fully compatible with Blender 4.4[3].",
      "Here are the corrected property definitions for Blender 4.4. The old bpy.props.*Property API is deprecated for direct assignment; instead, use type annotations with bpy.props in class definitions:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    custom_radius: bpy.props.BoolProperty(name=\"Radius\")\n    fit: bpy.props.EnumProperty(name=\"Method\", items=[('OPTION1', \"Option 1\", \"\"), ('OPTION2', \"Option 2\", \"\")])\n    flatten: bpy.props.BoolProperty(name=\"Flatten\")\n    influence: bpy.props.FloatProperty(name=\"Influence\")\n    lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    radius: bpy.props.FloatProperty(name=\"Radius\")\n    regular: bpy.props.BoolProperty(name=\"Regular\")\n    boundaries: bpy.props.BoolProperty(name=\"Boundaries\")\n```\n\n**Key changes:**\n- Use type annotations (:) instead of direct assignment (=) for properties.\n- Define properties inside a class derived from bpy.types.PropertyGroup.\n- EnumProperty now requires an items argument (replace with your actual options).\n\nThis is the Blender 4.4 compatible way to define custom properties[1].",
      "Replace the deprecated property definitions from Blender 2.79 with the updated syntax for Blender 4.4. In Blender 2.8+ (including 4.4), property definitions should be assigned as class attributes, not as variables, and the old direct assignment to variables is no longer supported.\n\nHere are the corrected code lines for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import FloatProperty, EnumProperty, BoolProperty\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    influence: FloatProperty(name=\"Influence\")\n    interpolation: EnumProperty(\n        name=\"Interpolation\",\n        items=[\n            ('LINEAR', \"Linear\", \"\"),\n            ('CONSTANT', \"Constant\", \"\"),\n            ('BEZIER', \"Bezier\", \"\")\n        ]\n    )\n    lock_x: BoolProperty(name=\"Lock X\")\n    lock_y: BoolProperty(name=\"Lock Y\")\n    lock_z: BoolProperty(name=\"Lock Z\")\n    regular: BoolProperty(name=\"Regular\")\n    restriction: EnumProperty(\n        name=\"Restriction\",\n        items=[\n            ('NONE', \"None\", \"\"),\n            ('LIMIT', \"Limit\", \"\"),\n            ('FORBID', \"Forbid\", \"\")\n        ]\n    )\n```\n\n**Key changes:**\n- Use the `:` (colon) syntax for class attributes, not `=`.\n- Define all properties inside a class derived from `bpy.types.PropertyGroup`.\n- Use `items` for `EnumProperty` to specify possible values.\n- Register the property group and assign it to a data block (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyPropertyGroup)`) as needed in your add-on or script.\n\nThis code is compatible with Blender 4.4 and follows the current API conventions[2][3].",
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new annotation syntax for class properties. The old assignment style (e.g., lock_z = bpy.props.BoolProperty(...)) is deprecated and will raise errors in Blender 4.x.\n\nReplace your property definitions as follows:\n\n```python\nlock_z: bpy.props.BoolProperty(name=\"Lock Z\")\nplane: bpy.props.EnumProperty(name=\"Plane\")\nrestriction: bpy.props.EnumProperty(name=\"Restriction\")\nconversion: bpy.props.EnumProperty(name=\"Conversion\")\nconversion_distance: bpy.props.FloatProperty(name=\"Distance\")\nconversion_max: bpy.props.IntProperty(name=\"Max Vertices\")\nconversion_min: bpy.props.IntProperty(name=\"Min Vertices\")\nconversion_vertices: bpy.props.IntProperty(name=\"Vertices\")\ndelete_strokes: bpy.props.BoolProperty(name=\"Delete strokes\")\ninfluence: bpy.props.FloatProperty(name=\"Influence\")\n```\n\n**Key change:**  \n- Use a colon (:) instead of an equals sign (=) to define properties as class annotations[1].\n\nThis syntax is required for all property definitions in Blender 2.8 and later, including Blender 4.4.",
      "In Blender 4.4, the old style of property definitions using direct assignment (e.g., lock_x = bpy.props.BoolProperty(...)) is deprecated. Properties must now be defined using type annotations and the new property function syntax. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    method: bpy.props.EnumProperty(name=\"Method\", items=[('A', 'A', ''), ('B', 'B', '')])\n    input: bpy.props.EnumProperty(name=\"Input\", items=[('A', 'A', ''), ('B', 'B', '')])\n    interpolation: bpy.props.EnumProperty(name=\"Interpolation\", items=[('A', 'A', ''), ('B', 'B', '')])\n    iterations: bpy.props.IntProperty(name=\"Iterations\")\n    regular: bpy.props.BoolProperty(name=\"Regular\")\n    influence: bpy.props.FloatProperty(name=\"Influence\")\n```\n\n**Key changes:**\n- Use type annotations (e.g., `lock_x: bpy.props.BoolProperty(...)`).\n- Define properties inside a class derived from `bpy.types.PropertyGroup`.\n- Use `IntProperty` for integer values (e.g., `iterations`).\n- Enum properties require an `items` argument (replace with your actual items).\n\nThis is the Blender 4.4+ compatible way to define custom properties[1].",
      "In **Blender 4.4**, property definitions must use the new-style type annotations with assignment, not the old function-call assignment. Replace your code lines as follows:\n\n```python\nimport bpy\nfrom bpy.props import EnumProperty, BoolProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    interpolation: EnumProperty(\n        name=\"Interpolation\",\n        # ... (other EnumProperty arguments)\n    )\n    lock_x: BoolProperty(name=\"Lock X\")\n    lock_y: BoolProperty(name=\"Lock Y\")\n    lock_z: BoolProperty(name=\"Lock Z\")\n    display_bridge: BoolProperty(name=\"Bridge settings\")\n    display_circle: BoolProperty(name=\"Circle settings\")\n    display_curve: BoolProperty(name=\"Curve settings\")\n    display_flatten: BoolProperty(name=\"Flatten settings\")\n    display_gstretch: BoolProperty(name=\"Gstretch settings\")\n    display_loft: BoolProperty(name=\"Loft settings\")\n```\n\n**Key changes:**\n- Use the colon (:) annotation syntax for each property.\n- Do not assign the property to a variable; instead, annotate the class attribute.\n- Place all properties inside a class derived from `bpy.types.PropertyGroup`[2].\n\nThis is the Blender 4.4 compatible way to define properties.",
      "In Blender 4.4, the old property registration functions like `bpy.props.BoolProperty`, `FloatProperty`, `IntProperty`, and `EnumProperty` are now used as type annotations within classes derived from `bpy.types.PropertyGroup` or similar, and are registered as class attributes, not as standalone variables. The direct assignment to variables as in Blender 2.79 is deprecated.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    display_relax: bpy.props.BoolProperty(name=\"Relax settings\")\n    display_space: bpy.props.BoolProperty(name=\"Space settings\")\n    bridge_cubic_strength: bpy.props.FloatProperty(name=\"Strength\")\n    bridge_interpolation: bpy.props.EnumProperty(name=\"Interpolation mode\", items=[('LINEAR', \"Linear\", \"\"), ('CUBIC', \"Cubic\", \"\")])\n    bridge_loft: bpy.props.BoolProperty(name=\"Loft\")\n    bridge_loft_loop: bpy.props.BoolProperty(name=\"Loop\")\n    bridge_min_width: bpy.props.IntProperty(name=\"Minimum width\")\n    bridge_mode: bpy.props.EnumProperty(name=\"Mode\", items=[('DEFAULT', \"Default\", \"\"), ('CUSTOM', \"Custom\", \"\")])\n    bridge_remove_faces: bpy.props.BoolProperty(name=\"Remove faces\")\n    bridge_reverse: bpy.props.BoolProperty(name=\"Reverse\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations inside a subclass of `bpy.types.PropertyGroup`.\n- `items` must be provided for `EnumProperty` (replace with your actual enum items).\n- Do not assign properties to module-level variables; always use class attributes for registration.\n\nTo use these properties, register the class and assign it to a context (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`).\n\nThis is the Blender 4.4+ standard for property definitions[1].",
      "In Blender 4.4, the old way of declaring properties using direct assignment (e.g., `myprop = bpy.props.IntProperty(...)`) is deprecated. Properties must now be declared as class annotations using Python's type hinting and the `bpy.props` functions. Here is how you should migrate your code:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    bridge_segments: bpy.props.IntProperty(name=\"Segments\")\n    bridge_twist: bpy.props.IntProperty(name=\"Twist\")\n    circle_custom_radius: bpy.props.BoolProperty(name=\"Radius\")\n    circle_fit: bpy.props.EnumProperty(name=\"Method\")\n    circle_flatten: bpy.props.BoolProperty(name=\"Flatten\")\n    circle_influence: bpy.props.FloatProperty(name=\"Influence\")\n    circle_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    circle_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    circle_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    circle_radius: bpy.props.FloatProperty(name=\"Radius\")\n```\n\n**Key changes:**\n- Use the colon (`:`) syntax for type annotations.\n- Place all property definitions inside a class derived from `bpy.types.PropertyGroup`.\n- Register the property group and assign it to a data block (e.g., `bpy.types.Scene.my_props: PointerProperty(type=MyProperties)`), if needed.\n\nThis is the Blender 4.4 compatible way to define custom properties[2].",
      "In Blender 4.4, the old style of defining properties directly on classes using assignment (e.g., myprop = bpy.props.BoolProperty(...)) is deprecated. Instead, you must use Python type annotations with bpy.props, as per the new API conventions. Here are your corrected property definitions for Blender 4.4+:\n\n```python\ncircle_regular: bpy.props.BoolProperty(name=\"Regular\")\ncurve_boundaries: bpy.props.BoolProperty(name=\"Boundaries\")\ncurve_influence: bpy.props.FloatProperty(name=\"Influence\")\ncurve_interpolation: bpy.props.EnumProperty(name=\"Interpolation\")\ncurve_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\ncurve_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\ncurve_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\ncurve_regular: bpy.props.BoolProperty(name=\"Regular\")\ncurve_restriction: bpy.props.EnumProperty(name=\"Restriction\")\nflatten_influence: bpy.props.FloatProperty(name=\"Influence\")\n```\n\nReplace your old assignments with these annotated lines inside your class definition (e.g., inside a bpy.types.PropertyGroup, Operator, or Panel class)[3].",
      "In **Blender 2.8+ (including 4.4)**, property definitions like `bpy.props.BoolProperty` must be assigned as class attributes inside a class derived from `PropertyGroup`, `Operator`, or `Panel`, not as standalone variables. The old style (assigning to module-level variables) is deprecated and will not work.\n\nHere is the **corrected code block** for Blender 4.4, assuming these are properties for a PropertyGroup or Operator (replace `MyProperties` with your actual class name):\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    flatten_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    flatten_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    flatten_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n    flatten_plane: bpy.props.EnumProperty(name=\"Plane\", items=[('X', \"X\", \"\"), ('Y', \"Y\", \"\"), ('Z', \"Z\", \"\")])\n    flatten_restriction: bpy.props.EnumProperty(name=\"Restriction\", items=[('NONE', \"None\", \"\"), ('SOME', \"Some\", \"\")])\n    gstretch_conversion: bpy.props.EnumProperty(name=\"Conversion\", items=[('A', \"A\", \"\"), ('B', \"B\", \"\")])\n    gstretch_conversion_distance: bpy.props.FloatProperty(name=\"Distance\")\n    gstretch_conversion_max: bpy.props.IntProperty(name=\"Max Vertices\")\n    gstretch_conversion_min: bpy.props.IntProperty(name=\"Min Vertices\")\n    gstretch_conversion_vertices: bpy.props.IntProperty(name=\"Vertices\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not assigned as variables.\n- All property definitions must be inside a class derived from `bpy.types.PropertyGroup` (or `Operator`, etc.).\n- For `EnumProperty`, you must provide an `items` argument (replace with your actual options).\n\n**Register your PropertyGroup as usual:**\n```python\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nThis is the Blender 4.4 compatible way to define custom properties[2].",
      "In Blender 4.4, the old property registration functions like `bpy.props.BoolProperty`, `FloatProperty`, and `EnumProperty` are now used as type annotations within class properties, not as direct assignments. The correct migration is to use the new annotation-based registration system.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty, FloatProperty, EnumProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    gstretch_delete_strokes: BoolProperty(name=\"Delete strokes\")\n    gstretch_influence: FloatProperty(name=\"Influence\")\n    gstretch_lock_x: BoolProperty(name=\"Lock X\")\n    gstretch_lock_y: BoolProperty(name=\"Lock Y\")\n    gstretch_lock_z: BoolProperty(name=\"Lock Z\")\n    gstretch_method: EnumProperty(name=\"Method\", items=[('A', \"A\", \"\"), ('B', \"B\", \"\")])\n    relax_input: EnumProperty(name=\"Input\", items=[('A', \"A\", \"\"), ('B', \"B\", \"\")])\n    relax_interpolation: EnumProperty(name=\"Interpolation\", items=[('A', \"A\", \"\"), ('B', \"B\", \"\")])\n    relax_iterations: EnumProperty(name=\"Iterations\", items=[('A', \"A\", \"\"), ('B', \"B\", \"\")])\n    relax_regular: BoolProperty(name=\"Regular\")\n```\n\n**Key changes:**\n- Use type annotations (`:`) instead of assignment (`=`).\n- Place all properties inside a `bpy.types.PropertyGroup` subclass.\n- Register the property group and assign it to e.g. `bpy.types.Scene` as needed.\n\nThis is the required migration for Blender 4.4+ Python API[1].",
      "In Blender 4.4, the old property registration functions like `bpy.props.FloatProperty`, `bpy.props.EnumProperty`, and `bpy.props.BoolProperty` are now used as type annotations within class definitions, rather than as direct assignments to variables. The correct way is to define them as class attributes inside your `PropertyGroup`, `Operator`, or `Panel` classes.\n\nHere is the migrated code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    space_influence: bpy.props.FloatProperty(name=\"Influence\")\n    space_input: bpy.props.EnumProperty(name=\"Input\", items=[('OPTION1', \"Option 1\", \"\"), ('OPTION2', \"Option 2\", \"\")])\n    space_interpolation: bpy.props.EnumProperty(name=\"Interpolation\", items=[('LINEAR', \"Linear\", \"\"), ('CONSTANT', \"Constant\", \"\")])\n    space_lock_x: bpy.props.BoolProperty(name=\"Lock X\")\n    space_lock_y: bpy.props.BoolProperty(name=\"Lock Y\")\n    space_lock_z: bpy.props.BoolProperty(name=\"Lock Z\")\n```\n\n**Key changes:**\n- Use a colon (`:`) and type annotation, not an equals sign, for property definitions.\n- Place property definitions inside a class derived from `bpy.types.PropertyGroup` (or another appropriate Blender type).\n- Enum properties require an `items` argument specifying the possible options.\n\nThis format is required for Blender 2.80 and newer, including 4.4[2][3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\geometry_utils\\offset_utilities.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions using bpy.props (such as FloatProperty) must be assigned as class attributes within a class derived from bpy.types.PropertyGroup, Operator, Panel, etc., not as standalone variables. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    radius: bpy.props.FloatProperty(\n        name='Offset',\n        default=0.5,\n        description='Lateral offset from the base',\n        min=0.3,\n        max=2.0\n    )\n    scaffold_density: bpy.props.FloatProperty(\n        name='Scaffold Density',\n        default=3.0,\n        description='density of metaball placement',\n        min=1.0,\n        max=7.0\n    )\n    meta_resolution: bpy.props.FloatProperty(\n        name='Remesh Resolution',\n        default=0.5,\n        description='Smaller is more detail and slower',\n        min=0.05,\n        max=1.0\n    )\n    pre_offset: bpy.props.FloatProperty(\n        name='Pre Offset',\n        default=0.0,\n        description='pre-offsetting the surface can allow for smaller offsets without using high resolution',\n        min=-1.0,\n        max=1.0\n    )\n```\n\nTo use these properties, register the PropertyGroup and assign it to a data block (e.g., Scene):\n\n```python\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\nThis approach is fully compatible with Blender 4.4 and avoids deprecated API usage[4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\geometry_utils\\transformations.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\metaballs\\vdb_remesh.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old property registration functions like `bpy.props.EnumProperty`, `IntProperty`, `FloatProperty`, and `BoolProperty` are still valid, but their usage syntax has changed: they must now be assigned as class-level annotations using Python's type hinting system. The direct assignment style is deprecated.\n\n**Replace your property definitions with the following code block:**\n\n```python\nimport bpy\nfrom bpy.props import EnumProperty, IntProperty, FloatProperty, BoolProperty\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    voxel_size_def: EnumProperty(\n        name=\"Voxel Size Definition\",\n        items=[\n            ('WORLD', \"World\", \"\"),\n            ('OBJECT', \"Object\", \"\")\n        ]\n    )\n    voxel_resolution_world: IntProperty(\n        name=\"Voxel Resolution World\"\n    )\n    voxel_resolution_object: IntProperty(\n        name=\"Voxel Resolution Object\"\n    )\n    isovalue: FloatProperty(\n        name=\"Isovalue\"\n    )\n    adaptivity: FloatProperty(\n        name=\"Adaptivity\"\n    )\n    filter_iterations: IntProperty(\n        name=\"Filter Iterations\"\n    )\n    filter_width: IntProperty(\n        name=\"Filter Width\"\n    )\n    filter_sigma: FloatProperty(\n        name=\"Filter Sigma\"\n    )\n    only_quads: BoolProperty(\n        name=\"Only Quads\"\n    )\n    smooth: BoolProperty(\n        name=\"Smooth\"\n    )\n```\n\n**Key changes:**\n- Use the `:` (colon) annotation syntax for all properties.\n- Place all property definitions inside a class derived from `bpy.types.PropertyGroup`.\n- Register the class with `bpy.utils.register_class()` as usual.\n\nThis is the Blender 4.4 compatible way to define custom properties[2][3].",
      "In Blender 4.4, the use of bpy.props directly to assign properties to existing types (like bpy.types.Scene) is deprecated. Instead, you should define a PropertyGroup and register it, then assign an instance of that group to the Scene. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.types import PropertyGroup\nfrom bpy.props import BoolProperty, PointerProperty\n\nclass MyVDBSettings(PropertyGroup):\n    nearest: BoolProperty(\n        name=\"Nearest\",\n        description=\"Use nearest value\",\n        default=False\n    )\n\n# Register the PropertyGroup\nbpy.utils.register_class(MyVDBSettings)\n\n# Add the property group to the Scene type\nbpy.types.Scene.openvdb_from_panel = PointerProperty(type=MyVDBSettings)\n```\n\n**Key changes:**\n- Define a PropertyGroup subclass for your custom properties.\n- Register the PropertyGroup.\n- Use PointerProperty to add the group to bpy.types.Scene.\n\nThis approach is fully compatible with Blender 4.4\u2019s Python API[4][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\metaballs\\vdb_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\metaballs\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use the new annotation syntax for properties. The old assignment style (e.g., add = bpy.props.BoolProperty()) is deprecated and will not work in Blender 4.x. Here are the corrected code lines:\n\n```python\nimport bpy\n\n# For class properties (inside bpy.types.PropertyGroup, Operator, etc.):\nadd: bpy.props.BoolProperty(default=True)\nactive: bpy.props.BoolProperty()\nid: bpy.props.IntProperty()\nobj: bpy.props.StringProperty()\npsys: bpy.props.StringProperty()\n\n# For custom properties on existing Blender types:\nbpy.types.Object.IsoSurf_index: bpy.props.IntProperty()\nbpy.types.Object.IsoSurf_res: bpy.props.FloatProperty()\nbpy.types.Object.IsoSurf_preview: bpy.props.BoolProperty()\nbpy.types.Scene.IsoSurf_context: bpy.props.StringProperty(default=\"WINDOW\")\nbpy.types.Scene.isosurface_voxelsize: bpy.props.FloatProperty()\n```\n\n**Key changes:**\n- Use the annotation syntax (`name: bpy.props.PropertyType(...)`) instead of assignment (`name = bpy.props.PropertyType(...)`).\n- This applies both to class attributes and to properties added to Blender types like `bpy.types.Object` and `bpy.types.Scene`[1].\n\nNo other code changes are required for these property definitions in Blender 4.4.",
      "```python\nimport bpy\n\nbpy.types.Scene.isosurface_sphereradius: bpy.props.FloatProperty()\nbpy.types.Scene.isosurface_smoothsteps: bpy.props.IntProperty()\n```\n\n**Key changes:**\n- Use the **annotation syntax** (`:`) instead of assignment (`=`) for property registration on Blender types, as required by Blender 2.8+ and still current in 4.4[4].\n- The rest of the property definition (e.g., arguments to `FloatProperty` or `IntProperty`) can be added as needed."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\metaballs\\pyopenvdb_mac\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\metaballs\\pyopenvdb_win\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\addon_updater.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\addon_updater_ops.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old property registration style using direct assignment (e.g., `myvar = bpy.props.BoolProperty(...)`) is deprecated. Properties must now be defined as class annotations using Python's `: bpy.props.*Property` syntax within a class, typically an `Operator`, `Panel`, or `PropertyGroup`. Here is how to migrate your code:\n\n```python\n# Example for use in a class (e.g., PropertyGroup, Operator, Panel)\n\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    clean_install: bpy.props.BoolProperty(\n        name=\"Clean Install\",\n        description=\"Perform a clean installation\",\n        default=False\n    )\n    ignore_enum: bpy.props.EnumProperty(\n        name=\"Ignore Enum\",\n        description=\"Enum property example\",\n        items=[\n            ('OPTION_A', \"Option A\", \"\"),\n            ('OPTION_B', \"Option B\", \"\")\n        ]\n    )\n    target: bpy.props.EnumProperty(\n        name=\"Target\",\n        description=\"Target property example\",\n        items=[\n            ('TARGET_1', \"Target 1\", \"\"),\n            ('TARGET_2', \"Target 2\", \"\")\n        ]\n    )\n    error: bpy.props.StringProperty(\n        name=\"Error\",\n        description=\"Error message\",\n        default=\"\"\n    )\n```\n\n**Key changes:**\n- Use the `:` annotation syntax (e.g., `clean_install: bpy.props.BoolProperty(...)`).\n- Define properties inside a class derived from `bpy.types.PropertyGroup`, `Operator`, or `Panel`.\n- Register the class with `bpy.utils.register_class(MyProperties)` and assign it to a data path (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`), if needed.\n\n**Do not use direct assignment** (e.g., `clean_install = bpy.props.BoolProperty(...)`) at the module level in Blender 4.4."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\utilities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\paths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\python_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\reporting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\transform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\wrappers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\functions\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\lib\\classesToRegister.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\lib\\preferences.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\lib\\reportError.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\lib\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\align_add_exclude.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\align_add_include.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\align_exclude_clear.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\align_include_clear.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\align_pick_points.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\icp_align.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\icp_align_feedback.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\cc_operator_skeleton\\skeleton_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\cc_operator_skeleton\\skeleton_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\cc_operator_skeleton\\skeleton_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\operators\\cc_operator_skeleton\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\ui\\app_handlers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\object_alignment\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\addon_updater.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\addon_updater_ops.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of property definitions like `bpy.props.BoolProperty`, `bpy.props.EnumProperty`, and `bpy.props.StringProperty` directly as variable assignments is deprecated. Instead, properties must be defined as class attributes within a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar, using type annotations.\n\nHere is the **migrated code** for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    clean_install: bpy.props.BoolProperty()\n    ignore_enum: bpy.props.EnumProperty()\n    target: bpy.props.EnumProperty()\n    error: bpy.props.StringProperty()\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations (`:`), not as variable assignments (`=`) at the module level.\n- All properties must be inside a class derived from `bpy.types.PropertyGroup` (or `Operator`, etc.), not as standalone variables.\n\nIf you are registering these properties to, for example, `Scene`, you would do:\n\n```python\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nReplace `MyProperties` and property names/types as needed for your actual use case."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\bmesh_generators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\images.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\paths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\python_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\reporting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\transform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\wrappers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\functions\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\lib\\classes_to_register.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\lib\\preferences.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your property definitions from Blender 2.79 to Blender 4.4, replace the deprecated direct assignment of properties with the recommended use of type annotations inside a class derived from bpy.types.PropertyGroup. Register the class and use bpy.props in the annotation, not as a direct assignment.\n\n**Blender 4.4 compatible code:**\n\n```python\nimport bpy\n\nclass MyAddonProperties(bpy.types.PropertyGroup):\n    auto_check_update: bpy.props.BoolProperty(\n        name=\"Auto Check Update\",\n        description=\"Automatically check for updates\",\n        default=False\n    )\n    updater_interval_months: bpy.props.IntProperty(\n        name=\"Updater Interval Months\",\n        description=\"Months between update checks\",\n        default=0\n    )\n    updater_interval_days: bpy.props.IntProperty(\n        name=\"Updater Interval Days\",\n        description=\"Days between update checks\",\n        default=0\n    )\n    updater_interval_hours: bpy.props.IntProperty(\n        name=\"Updater Interval Hours\",\n        description=\"Hours between update checks\",\n        default=0\n    )\n    updater_interval_minutes: bpy.props.IntProperty(\n        name=\"Updater Interval Minutes\",\n        description=\"Minutes between update checks\",\n        default=0\n    )\n\n# Register the property group (required)\nbpy.utils.register_class(MyAddonProperties)\n\n# Assign to a context, e.g., scene\nbpy.types.Scene.my_addon = bpy.props.PointerProperty(type=MyAddonProperties)\n```\n\n**Key changes:**\n- Use type annotations (`:`) instead of direct assignment (`=`).\n- Define properties inside a `PropertyGroup` subclass.\n- Register the class and assign it as a `PointerProperty` to a Blender data block (e.g., `Scene`).\n\nThis approach is required for Blender 2.80+ and fully compatible with Blender 4.4[2][3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\lib\\report_error.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\operators\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\operators\\points_picker\\points_picker_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\operators\\points_picker\\points_picker_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\operators\\points_picker\\points_picker_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\operators\\points_picker\\points_picker_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\operators\\points_picker\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\subtrees\\addon_common\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\ui\\interface.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\points_picker\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\ambient_occlusion.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, you must use type annotations and assign the property to the class attribute, not as a direct assignment. The old API (bpy.props.FloatProperty, etc.) is now used as a type hint with a colon, and the property is assigned in the class body.\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nmin_threshold: bpy.props.FloatProperty(default=0.0)\nmax_threshold: bpy.props.FloatProperty(default=0.95)\ndilate_first: bpy.props.BoolProperty(default=True)\ndilation_steps: bpy.props.IntProperty(default=2)\nerosion_steps: bpy.props.IntProperty(default=2)\nfinalize: bpy.props.BoolProperty(default=False)\nallow_tails: bpy.props.BoolProperty(\n    name='Allow Tails',\n    default=False,\n    description='If False, will only allow loops'\n)\nseparate: bpy.props.BoolProperty(\n    default=False,\n    description=\"Split out regions into new objects\"\n)\n```\n\n**Key changes:**\n- Use `:` (type annotation) instead of `=`.\n- Do not assign the result of `bpy.props.*Property` to a variable; instead, annotate the class attribute.\n- This code must be inside a class derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar.\n\nThis is the Blender 4.4 compatible way to define properties for add-ons and scripts[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\bmesh_fns.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common_drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\convenience.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\cut_algorithms.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\geodesic.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\modaloperator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\polytrim_instance.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\rays.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\simplify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\ext\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\mark_curves\\livecurves.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\mark_curves\\livecurves_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\mark_curves\\livecurves_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\mark_curves\\livecurves_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\mark_curves\\livecurves_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\mark_curves\\livecurves_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\mark_curves\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\holemargin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\holemargin_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\holemargin_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\holemargin_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\holemargin_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\holemargin_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_hole_margin\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\livebar.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\smargin_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\smargin_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\smargin_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\smargin_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\smargin_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_live_bar\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\polytrim.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\polytrim_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\polytrim_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\polytrim_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\polytrim_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\polytrim_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_polytrim\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\smargin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\smargin_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\smargin_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\smargin_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\smargin_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\smargin_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_splint_margin\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\cache.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\smargin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\smargin_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\smargin_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\smargin_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\smargin_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\smargin_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\op_tray_margin\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\wax_curve\\wax_curve.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\wax_curve\\wax_curve_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\wax_curve\\wax_curve_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\wax_curve\\wax_curve_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\wax_curve\\wax_curve_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\wax_curve\\wax_curve_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\segmentation\\wax_curve\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\addon_updater.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\addon_updater_ops.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions have moved from the old `bpy.props` module to the `blender.types` module, and properties should be defined as class attributes within classes derived from `bpy.types.PropertyGroup`, `bpy.types.Operator`, or similar. The direct assignment to variables as in Blender 2.79 is deprecated.\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.types import PropertyGroup\n\nclass MyProperties(PropertyGroup):\n    clean_install: bpy.props.BoolProperty(\n        name=\"Clean Install\",\n        description=\"Perform a clean installation\",\n        default=False\n    )\n    ignore_enum: bpy.props.EnumProperty(\n        name=\"Ignore Enum\",\n        description=\"Enum property example\",\n        items=[\n            ('OPTION_A', \"Option A\", \"\"),\n            ('OPTION_B', \"Option B\", \"\")\n        ]\n    )\n    target: bpy.props.EnumProperty(\n        name=\"Target\",\n        description=\"Target property example\",\n        items=[\n            ('TARGET_1', \"Target 1\", \"\"),\n            ('TARGET_2', \"Target 2\", \"\")\n        ]\n    )\n    error: bpy.props.StringProperty(\n        name=\"Error\",\n        description=\"Error message\",\n        default=\"\"\n    )\n\n# Register the property group (if not already registered)\nbpy.utils.register_class(MyProperties)\n\n# Attach to scene or another data block as needed\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations (`:`) inside a `PropertyGroup` subclass.\n- Use `bpy.props` for property definitions, but do not assign them directly to variables.\n- Register the property group and attach it to a data block (e.g., `Scene`) using a `PointerProperty`.\n\nThis approach is fully compatible with Blender 4.4 and avoids all deprecated API usage[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\bmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common_drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\cut_algorithms.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\general.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\geodesic.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\rays.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\simplify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\bmesh_generators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\images.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\paths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\python_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\reporting.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\transform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\wrappers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\functions\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\lib\\classes_to_register.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\lib\\preferences.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old style of defining properties directly with assignment (e.g., bpy.props.BoolProperty) at the module level is deprecated. Properties must now be defined as class annotations using Python's type hinting syntax within a bpy.types.PropertyGroup or similar class.\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    auto_check_update: bpy.props.BoolProperty()\n    updater_intrval_months: bpy.props.IntProperty()\n    updater_intrval_days: bpy.props.IntProperty()\n    updater_intrval_hours: bpy.props.IntProperty()\n    updater_intrval_minutes: bpy.props.IntProperty()\n```\n\n- Use **class annotations** (the colon syntax) instead of assignment.\n- Place properties inside a subclass of **bpy.types.PropertyGroup** (or another appropriate Blender type).\n- Register the class with `bpy.utils.register_class(MyPropertyGroup)` as needed in your add-on.\n\nThis approach is required for Blender 2.80+ and fully compatible with Blender 4.4[1][3][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\lib\\report_error.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\lib\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\operators\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\operators\\wax_dropper\\wax_drop_datastructure.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\operators\\wax_dropper\\wax_drop_states.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\operators\\wax_dropper\\wax_drop_ui_draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\operators\\wax_dropper\\wax_drop_ui_init.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\operators\\wax_dropper\\wax_drop_ui_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\operators\\wax_dropper\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\bezier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\blender.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\bmesh_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\bmesh_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\debug.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\decorators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\fontmanager.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\globals.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\hasher.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\irc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\logger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\maths.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\metaclasses.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\profiler.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\shaders.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\useractions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\xmesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\common\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\cookiecutter\\cookiecutter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\cookiecutter\\cookiecutter_fsm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\cookiecutter\\cookiecutter_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\cookiecutter\\cookiecutter_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\cookiecutter\\test.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\cookiecutter\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\ext\\bgl_ext.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\subtrees\\addon_common\\ext\\png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\ui\\interface.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\subtrees\\wax_dropper\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\d3guard\\update_authenticate\\authenticate.py",
    "warnings": [],
    "api_suggestions": [
      "The correct way to define properties in Blender 4.4+ is to use the annotation syntax with bpy.props. Here is the migrated code block:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    username: bpy.props.StringProperty(default='')\n    password: bpy.props.StringProperty(default='', subtype='PASSWORD')\n```\n\nReplace your old property definitions with the above annotation-based syntax inside a class derived from bpy.types.PropertyGroup. This is required for Blender 2.80 and later, including 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\d3guard\\update_authenticate\\update.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties like StringProperty must be defined as class attributes inside a class derived from bpy.types.PropertyGroup, Operator, or Panel, and not as standalone variables. The correct migration is:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    username: bpy.props.StringProperty(default='')\n    password: bpy.props.StringProperty(default='', subtype='PASSWORD')\n    # package_filename: bpy.props.StringProperty(default='')\n    # package_download_dir: bpy.props.StringProperty(default='')\n```\n\nKey changes:\n- Properties are now defined as class attributes with a colon (:) and not assigned directly.\n- Properties must be inside a class derived from bpy.types.PropertyGroup (or similar).\n- Register the PropertyGroup and assign it to a data path (e.g., bpy.types.Scene).\n\nExample registration (not required if you only want the property definitions):\n\n```python\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n```\n\nThis is the Blender 4.4 compatible way to define and use custom properties[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_anim_acclaim\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_bvh\\export_bvh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_bvh\\import_bvh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_bvh\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_c3d\\import_c3d.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_c3d\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "The code line\n\n```python\nbpy.ops.transform.resize(value=empty_size)\n```\n\nremains valid in Blender 4.4, as the operator and its parameters are unchanged according to the current API documentation[4]. No migration is needed for this specific line.\n\nIf you are running this operator outside of a 3D View context (such as from a script or addon), you may need to use a context override in Blender 4.x. Here is the updated usage pattern for Blender 4.4:\n\n```python\nwith bpy.context.temp_override(area=bpy.context.area, region=bpy.context.region):\n    bpy.ops.transform.resize(value=empty_size)\n```\n\nReplace `bpy.context.area` and `bpy.context.region` with the appropriate area and region objects if running from a non-3D View context[2]. If you are running this from the 3D View, the original line is still correct."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_anim_nuke_chan\\export_nuke_chan.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_nuke_chan\\import_nuke_chan.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_anim_nuke_chan\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\install_whl.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blend\\blendfile.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blend\\blendfile_path_walker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\cli.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\pack.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\__main__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\blend\\blendfile.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\blend\\blendfile_copy.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\blend\\blendfile_pack.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\blend\\blendfile_pack_restore.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\blend\\blendfile_path_remap.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\blend\\blendfile_path_walker.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\blend\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\utils\\system.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\blender_bam-unpacked.whl\\bam\\utils\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\bl_utils\\pipe_non_blocking.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\bl_utils\\subprocess_helper.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_blend_utils\\utils\\system.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_coat3D\\coat.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_coat3D\\tex.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_coat3D\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\mesh\\dtm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\mesh\\terrain.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\mesh\\triangulate.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\mesh\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\pvl\\label.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\pvl\\parse.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\pvl\\patterns.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\pvl\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\ui\\importer.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old property registration functions like `bpy.props.StringProperty`, `bpy.props.FloatProperty`, and `bpy.props.BoolProperty` are now deprecated in favor of the new `bpy.props` module's annotation-based system. You should define properties as class annotations using type hints and assign the property function as the default value.\n\nHere is how you should update your code:\n\n```python\nfilter_glob: bpy.props.StringProperty(\n    name=\"Filter\",\n    default=\"*.ext\"\n)\n\ndtm_resolution: bpy.props.FloatProperty(\n    name=\"DTM Resolution\",\n    default=1.0\n)\n\nscaled_dtm_resolution: bpy.props.FloatProperty(\n    name=\"Scaled DTM Resolution\",\n    default=1.0\n)\n\nshould_setup_viewport: bpy.props.BoolProperty(\n    name=\"Setup Viewport\",\n    default=True\n)\n\nshould_setup_units: bpy.props.BoolProperty(\n    name=\"Setup Units\",\n    default=True\n)\n```\n\n**Key changes:**\n- Use the `:` (colon) for type annotation, not `=`.\n- Assign the property function (e.g., `bpy.props.FloatProperty(...)`) as the default value.\n- This syntax must be used inside a class definition (such as an `Operator` or `PropertyGroup`).\n\n**Example usage in a class:**\n```python\nclass MyOperator(bpy.types.Operator):\n    filter_glob: bpy.props.StringProperty(\n        name=\"Filter\",\n        default=\"*.ext\"\n    )\n    # ... other properties as above\n```\n\nThis is the Blender 4.4+ compatible way to define properties for operators and property groups[4][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\ui\\terrainpanel.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, custom properties should be registered using a **PropertyGroup** and assigned via a PointerProperty, as direct assignment to `bpy.types.Object` is deprecated. Here is the corrected code block:\n\n```python\nimport bpy\n\nclass MyObjectProperties(bpy.types.PropertyGroup):\n    dtm_resolution: bpy.props.FloatProperty()\n    scaled_dtm_resolution: bpy.props.FloatProperty()\n\nbpy.utils.register_class(MyObjectProperties)\nbpy.types.Object.my_props = bpy.props.PointerProperty(type=MyObjectProperties)\n```\n\nYou can then access the properties as `obj.my_props.dtm_resolution` and `obj.my_props.scaled_dtm_resolution` for any Blender object. This approach is fully compatible with Blender 4.4[5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_convert_image_to_mesh_img\\ui\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_curve_svg\\import_svg.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_curve_svg\\svg_colors.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_curve_svg\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\export_dxf.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\operator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\draw_blenders\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\model\\dxfLibrary.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate the deprecated Blender 2.79 imports to Blender 4.4, replace the old import lines with the following:\n\n```python\nimport bpy\nimport mathutils\nimport sys\n```\n\n- **bpy** replaces the old Blender module for scripting and accessing Blender data and operators.\n- **mathutils** is now a standalone module for math operations (vectors, matrices, etc.).\n- **sys** is a standard Python module and can be imported directly.\n- The modules **Window**, **Scene**, and **Draw** are no longer imported this way; their functionality is accessed through the bpy API.\n\nIf you need to access scene data, use:\n```python\nscene = bpy.context.scene\n```\n\nIf you need to draw in the UI, use the `bpy.types.SpaceView3D.draw_handler_add` API.\n\n**Do not use**:\n```python\n#import Blender\n#from Blender import Mathutils, Window, Scene, sys, Draw\n```\n\n**Use instead**:\n```python\nimport bpy\nimport mathutils\nimport sys\n```\nReplace any usage of the old modules with their bpy or mathutils equivalents as needed[3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\model\\migiusModel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\model\\model.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\model\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\base_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\camera_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\curve_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\empty_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\insert_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\lamp_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\mesh_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\text_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\viewborder_exporter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_export_dxf\\primitive_exporters\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\transverse_mercator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\acdsdata.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\blockssection.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\codepage.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\color.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\const.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\decode.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\defaultchunk.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\drawing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\dxfentities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\dxfobjects.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\entitysection.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\headersection.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\juliandate.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\layers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\linetypes.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\sections.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\styles.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\tablessection.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\tags.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfgrabber\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfimport\\convert.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfimport\\do.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfimport\\fake_entities.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfimport\\groupsort.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfimport\\is_.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfimport\\line_merger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_import_dxf\\dxfimport\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_pdb\\export_pdb.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_pdb\\import_pdb.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 2.8 and later (including 4.4), the **layers** property was removed from the Scene API. Instead, Blender uses the **ViewLayer** and **Collections** system. If you want to access the currently active view layer, use:\n\n```python\ncurrent_view_layer = bpy.context.view_layer\n```\n\nIf you need to access all view layers:\n\n```python\nall_view_layers = bpy.context.scene.view_layers\n```\n\nThere is no direct equivalent to the old `scene.layers` property. If your script logic depends on the old 20-layer system, you will need to refactor it to use collections and view layers. For most migration cases, replacing `bpy.context.scene.layers` with `bpy.context.view_layer` is the correct approach."
    ],
    "errors": []
  },
  {
    "file": "addons\\io_mesh_pdb\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_ply\\export_ply.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_ply\\import_ply.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_ply\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_raw\\export_raw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_raw\\import_raw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_raw\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_stl\\blender_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_stl\\stl_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_stl\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_uv_layout\\export_uv_eps.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_uv_layout\\export_uv_png.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_uv_layout\\export_uv_svg.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_mesh_uv_layout\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_online_sketchfab\\pack_for_export.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_online_sketchfab\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_3ds\\export_3ds.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_3ds\\import_3ds.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_3ds\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\data_types.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\encode_bin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\export_fbx.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\export_fbx_bin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\fbx2json.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\fbx_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\import_fbx.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\json2fbx.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\parse_fbx.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_fbx\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_ms3d\\ms3d_export.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_ms3d\\ms3d_import.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_ms3d\\ms3d_spec.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_ms3d\\ms3d_strings.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_ms3d\\ms3d_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_ms3d\\ms3d_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_ms3d\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_obj\\export_obj.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_obj\\import_obj.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_obj\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_vrml2\\export_vrml2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_vrml2\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_x\\export_x.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_x\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_x3d\\export_x3d.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_x3d\\import_x3d.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_scene_x3d\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_sequencer_edl\\import_edl.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_sequencer_edl\\parse_edl.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_sequencer_edl\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_shape_mdd\\export_mdd.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_shape_mdd\\import_mdd.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\io_shape_mdd\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\light_field_tools\\light_field_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\light_field_tools\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\materials_library_vx\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "The correct Blender 4.4 compatible code is:\n\n```python\ncmd: bpy.props.StringProperty(name=\"Command\", options={'HIDDEN'})\n```\n\n**Key changes:**\n- Use **type annotations** (PEP 526 style) for property declarations in Blender 2.80+.\n- The old assignment style (`cmd = bpy.props.StringProperty(...)`) is deprecated for class properties; use `cmd: bpy.props.StringProperty(...)` instead."
    ],
    "errors": []
  },
  {
    "file": "addons\\materials_utils\\materials_cycles_converter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\materials_utils\\material_converter.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\materials_utils\\texture_rename.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\materials_utils\\warning_messages_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\materials_utils\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\measureit\\measureit_geometry.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\measureit\\measureit_main.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the old scene layers system (`bpy.context.scene.layers`) has been replaced by the collections and view layers system. To check if an object is visible in a particular view layer, you should use the collections API. There is no direct equivalent to `scene.layers[x]`, but if you want to check if a collection is included in the active view layer, use:\n\n```python\nif bpy.context.view_layer.layer_collection.children[x].collection in bpy.context.view_layer.layer_collection.children:\n```\n\nOr, if you want to check if a specific collection is enabled in the current view layer:\n\n```python\nif bpy.context.view_layer.layer_collection.children[x].exclude is False:\n```\n\nReplace `x` with the index of the collection you want to check.\n\n**Note:** The concept of 20 numbered layers is gone; you now work with named collections and their inclusion/exclusion in view layers[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\measureit\\measureit_render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\measureit\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\face_inset_fillet.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_check.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_cut_faces.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_edges_floor_plan.py",
    "warnings": [
      "AST parse error in subclass check: invalid non-printable character U+FEFF (<unknown>, line 1)"
    ],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_edges_length.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_edgetools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_edge_roundifier.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_extrude_and_reshape.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_fastloop.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_filletplus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_help.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_mextrude_plus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_offset_edges.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_pen_tool.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_vertex_chamfer.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\pkhg_faces.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\random_vertices.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\split_solidify.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\vertex_align.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\vfe_specials.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\icons\\icons.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_index_select.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_info_select.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_selection_topokit.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_select_by_direction.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_select_by_edge_length.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_select_by_pi.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_select_by_type.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\mesh_select_connected_faces.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_extra_tools\\mesh_select_tools\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_inset\\geom.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_inset\\model.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_inset\\offset.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_inset\\triquad.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_inset\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\BIX.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\cad_module.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\CCEN.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\CFG.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties like IntProperty and FloatProperty must be defined as class attributes within a class derived from bpy.types.PropertyGroup, bpy.types.Operator, etc., not as standalone variables. The direct assignment to variables as in Blender 2.79 is deprecated.\n\n**Corrected code for Blender 4.4:**\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    num_verts: bpy.props.IntProperty(\n        name=\"Number of Vertices\",\n        description=\"Number of vertices\",\n        default=0\n    )\n    rescale: bpy.props.FloatProperty(\n        name=\"Rescale\",\n        description=\"Rescale factor\",\n        default=1.0\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes using the colon (:) syntax within a class derived from bpy.types.PropertyGroup[2].\n- The old assignment style (e.g., num_verts = bpy.props.IntProperty(...)) is no longer valid outside of a class context in Blender 4.4[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\E2F.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\V2X.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\VTX.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\XALL.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tiny_cad\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tissue\\colors_groups_exchanger.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tissue\\dual_mesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tissue\\lattice.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tissue\\tessellate_numpy.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tissue\\uv_to_mesh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mesh_tissue\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mocap\\mocap_constraints.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mocap\\mocap_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mocap\\retarget.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\mocap\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\modules\\cycles_shader_compat.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\modules\\rna_manual_reference.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated Blender 2.79 code:\n\n```python\nbpy.ops.transform.resize(value=(x, y, z))\n```\n\nwith the following Blender 4.4 compatible code (the API for `bpy.ops.transform.resize` remains the same for object and edit modes):\n\n```python\nbpy.ops.transform.resize(value=(x, y, z))\n```\n\n**Note:**  \n- The `bpy.ops.transform.resize` operator is still valid in Blender 4.4 for both object and edit modes[4][3].  \n- If you are scripting and want to avoid operator context issues, consider using direct data manipulation for mesh/object scaling:\n\n```python\nobj = bpy.context.active_object\nobj.scale = (x, y, z)\n```\n\nUse the operator for interactive/undoable transforms, and direct property assignment for scripts that do not require operator context."
    ],
    "errors": []
  },
  {
    "file": "addons\\modules\\selection_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\modules\\extensions_framework\\ui.py",
    "warnings": [],
    "api_suggestions": [
      "The correct way to define properties in Blender 4.4 is to use the property function directly in the class body, not as assignment to variables outside a class. Here is the migrated code block:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    msg_type: StringProperty(default='INFO')\n    msg_text: StringProperty(default='')\n```\n\nReplace your old property assignments with the above syntax inside a class derived from bpy.types.PropertyGroup."
    ],
    "errors": []
  },
  {
    "file": "addons\\modules\\extensions_framework\\util.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\modules\\extensions_framework\\validate.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\modules\\extensions_framework\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must use the function call syntax, not the class reference. The following are the corrected code lines:\n\n```python\nt = bpy.props.BoolProperty()\nt = bpy.props.EnumProperty(items=[('ITEM1', \"Item 1\", \"\"), ('ITEM2', \"Item 2\", \"\")])  # You must specify 'items' for EnumProperty\nt = bpy.props.FloatProperty()\nt = bpy.props.IntProperty()\nt = bpy.props.StringProperty()\n'type': bpy.props.IntProperty()\n```\n\n**Key changes:**\n- Added parentheses `()` to each property definition.\n- For `EnumProperty`, you must provide the `items` argument, as it is required.\n- For dictionary-style property definitions, use the property function, not just the type string.\n\nIf you have additional keyword arguments (like `name`, `default`, etc.), include them inside the parentheses."
    ],
    "errors": []
  },
  {
    "file": "addons\\netrender\\baking.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\balancing.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\client.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\master.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\master_html.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\model.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\operators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\repath.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\slave.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\thumbnail.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\versioning.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\netrender\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture\\fracture_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture\\fracture_setup.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture_cell\\fracture_cell_calc.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture_cell\\fracture_cell_setup.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture_cell\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture_crack\\crack_it.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture_crack\\operator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_fracture_crack\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_print3d_utils\\export.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_print3d_utils\\mesh_helpers.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_print3d_utils\\operators.py",
    "warnings": [],
    "api_suggestions": [
      "Here are the corrected code lines for Blender 4.4 compatibility:\n\n```python\n# For property definitions, use annotation syntax:\nthreshold: bpy.props.FloatProperty()\nsides: bpy.props.IntProperty()\n\n# The operator call remains the same, but ensure you use keyword arguments for clarity:\nbpy.ops.transform.resize(value=(scale, scale, scale))\n```\n\n**Key changes:**\n- Use **type annotations** (the colon syntax) for property definitions in classes, as assignment is deprecated.\n- The `bpy.ops.transform.resize` call is still valid, but using explicit tuples and keyword arguments is recommended for clarity and future compatibility[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\object_print3d_utils\\report.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_print3d_utils\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\object_print3d_utils\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\oscurart_animation.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\oscurart_files.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, direct assignment of properties to bpy.types.Scene at the module level is deprecated. Properties must be registered within a class using the annotation system and registered via bpy.utils.register_class. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty\n\nclass OSCProperties(bpy.types.PropertyGroup):\n    oscSearchText: StringProperty(\n        name=\"Search Text\",\n        default=\"Search Text\"\n    )\n    oscReplaceText: StringProperty(\n        name=\"Replace Text\",\n        default=\"\"\n    )\n\ndef register():\n    bpy.utils.register_class(OSCProperties)\n    bpy.types.Scene.osc_props = bpy.props.PointerProperty(type=OSCProperties)\n\ndef unregister():\n    del bpy.types.Scene.osc_props\n    bpy.utils.unregister_class(OSCProperties)\n```\n\nAccess the properties as bpy.context.scene.osc_props.oscSearchText and bpy.context.scene.osc_props.oscReplaceText."
    ],
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\oscurart_meshes.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\oscurart_objects.py",
    "warnings": [],
    "api_suggestions": [
      "The correct way to define a custom property in Blender 4.4 is to use the new annotations system. Replace your line with:\n\n```python\nbpy.types.Scene.RenameObjectOt: bpy.props.StringProperty(default=\"Type here\")\n```\n\nThis uses the colon (:) for property registration, which is required in Blender 2.80 and later."
    ],
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\oscurart_overrides.py",
    "warnings": [],
    "api_suggestions": [
      "The correct way to define an integer property in Blender 4.4+ is to use the new annotation syntax with : bpy.props.IntProperty(). The old assignment style is deprecated. Here is the migrated code:\n\n```python\nindex: bpy.props.IntProperty(min=0)\n```\n\nReplace all instances of the old assignment with this new annotation syntax."
    ],
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\oscurart_render.py",
    "warnings": [],
    "api_suggestions": [
      "Here are the corrected code lines for Blender 4.4. The main changes are:\n\n- Properties must be defined inside a bpy.types.PropertyGroup subclass, not as standalone variables.\n- Register the PropertyGroup and assign it to bpy.types.Scene via a PointerProperty.\n- EnumProperty is not a valid argument for IntProperty; use EnumProperty directly for enums.\n- All property definitions must be class attributes, not instance variables.\n\nBelow is a minimal migration of your code to Blender 4.4 style:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    use_render_scene: bpy.props.BoolProperty(default=False)\n    frametype: bpy.props.BoolProperty(default=False)\n    rcPARTS: bpy.props.IntProperty(default=0)\n    bin: bpy.props.BoolProperty(default=False)\n    size: bpy.props.IntProperty(name=\"Size in Bytes\", default=10, min=0)\n    my_enum: bpy.props.EnumProperty(\n        name=\"Type\",\n        items=[\n            ('OPT_A', \"Option A\", \"\"),\n            ('OPT_B', \"Option B\", \"\"),\n        ],\n        default='OPT_A'\n    )\n    filename: bpy.props.StringProperty(name=\"\", default=\"\")\n\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key points:**\n- All properties are now inside a PropertyGroup.\n- Use PointerProperty to attach the group to the Scene.\n- EnumProperty is used for enums, not as a type argument to IntProperty.\n- Register and unregister functions are required for proper add-on structure.\n\nThis code is compatible with Blender 4.4\u2019s Python API[2].",
      "In Blender 4.4, property definitions must be assigned as class attributes, not as variables. The following is the corrected code block for defining these properties in a Blender 4.4-compatible way:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    value: bpy.props.IntProperty(name=\"\", default=10)\n    fullpath: bpy.props.StringProperty(name=\"\", default=\"\")\n    checkbox: bpy.props.BoolProperty(name=\"\", default=True)\n```\n\nAssign properties as class attributes using the colon (:) syntax within a subclass of bpy.types.PropertyGroup. This is the required approach in Blender 2.80 and later, including 4.4[2][3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\oscurart_shapes.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\oscurart_tools\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\pie_clip_marker_of.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\pie_manipulator_of.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\pie_object_modes_of.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\pie_pivot_of.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\pie_shade_of.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\pie_snap_of.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\pie_view_of.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\pie_menus_official\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\13x8_wicker_globe.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\7x6.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\9x9_color.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\braided_coil.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\flower_mesh_(2d).py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\slinky_knot.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\snowflake_(2d).py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\sun_cross_(2d).py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\tripple_dna.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\curve.torus_knot_plus\\wicker_basket.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\default.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\m10.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\m12.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\m3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\m4.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\m5.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\m6.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.bolt_add\\m8.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.eroder\\default.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.eroder\\light_erosion.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.eroder\\medium_erosion.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.eroder\\strong_erosion.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.eroder\\thermal_diffusion.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\abstract.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\another_noise.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\billow.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\canion.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\canions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\cauliflower_hills.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\cliff.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\cristaline.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\default.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\default_large.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\dunes.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\flatstones.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\gully.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\lakes_1.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\lakes_2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\large_terrain.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\mesa.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\mounds.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\mountain_1.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\mountain_2.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\planet.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\planet_noise.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\ridged.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\river.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\rock.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\slick_rock.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\techno_cell.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\tech_effect.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\vlnoise_turbulence.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\voronoi_hills.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\vulcano.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.landscape_add\\yin_yang.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_round_cube_add\\Capsule.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_round_cube_add\\Clay_Bar.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_round_cube_add\\Cube.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_round_cube_add\\Grid_3D.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_round_cube_add\\Octahedron.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_round_cube_add\\Quadsphere.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_round_cube_add\\Rounded_Cube.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\bonbon.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\boy.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\catalan.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\catenoid.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\clifford_torus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\cochlea.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\cosinus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\dini.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\enneper.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\helicoidal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\helix.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\hexahedron.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\hyperhelicoidal.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\klein.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\moebius.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\pseudosphere.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\pseudo_catenoid.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\ridged_torus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\shell.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\sine.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\snake.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\sterosphere.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\torus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\presets\\operator\\mesh.primitive_xyz_function_surface\\twisted_torus.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_copy_settings\\operator.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_copy_settings\\panel.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_copy_settings\\presets.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_copy_settings\\translations.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_copy_settings\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_povray\\df3.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_povray\\nodes.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated usage of EnumProperty from bpy.props with the updated approach in Blender 4.4. In modern Blender (2.80+), EnumProperty is now accessed via bpy.types, and the recommended way is to define it as a class attribute within a PropertyGroup or Operator. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    map_type: bpy.props.EnumProperty(\n        name=\"Map Type\",\n        description=\"Choose the type of map\",\n        items=[\n            ('TYPE_A', \"Type A\", \"Description for Type A\"),\n            ('TYPE_B', \"Type B\", \"Description for Type B\"),\n            ('TYPE_C', \"Type C\", \"Description for Type C\"),\n        ],\n        default='TYPE_A'\n    )\n```\n\nKey changes:\n- Use the **annotation syntax** (the colon :) for property definitions within classes.\n- Define EnumProperty as a class attribute inside a PropertyGroup or Operator, not as a standalone variable[3][5].\n- Ensure you register the PropertyGroup and assign it to a relevant data block if needed.\n\nIf you had three identical lines, replace each with the above pattern, adjusting the class and property names as appropriate."
    ],
    "errors": []
  },
  {
    "file": "addons\\render_povray\\primitives.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate the deprecated Blender 2.79 code using bpy.ops.transform.resize to Blender 4.4, you should avoid using operators for programmatic transformations and instead set the object's scale directly via its data API. Here is the corrected code block:\n\n```python\nob.scale = obscale\n```\n\nReplace any use of:\n\n```python\nbpy.ops.transform.resize(value=obscale)\n# or\n# bpy.ops.transform.resize(value=(1,1,scaleZ), constraint_orientation='LOCAL')\n```\n\nwith direct assignment to the object's scale property as shown above. This is the recommended and robust approach for Blender 4.4 and later[4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\render_povray\\render.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_povray\\shading.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_povray\\ui.py",
    "warnings": [],
    "api_suggestions": [
      "The correct Blender 4.4 compatible code is:\n\n```python\nfilepath: bpy.props.StringProperty(name=\"Filepath\", subtype='FILE_PATH')\n```\n\n**Key change:**  \n- Use the new **type-annotation syntax** (with a colon) instead of assignment for property definitions in classes.  \n- This is required for all property declarations in Blender 2.80+ and is enforced in Blender 4.x."
    ],
    "errors": []
  },
  {
    "file": "addons\\render_povray\\update_files.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\render_povray\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, the recommended way to define properties is to use type annotations with assignment, rather than assigning the result of `bpy.props.*Property` directly to a class variable. The old style is deprecated. Here is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    value_unlimited: bpy.props.FloatProperty(default=0.0)\n    value_0_1: bpy.props.FloatProperty(min=0.0, max=1.0, default=0.0)\n    value_0_10: bpy.props.FloatProperty(min=0.0, max=10.0, default=0.0)\n    value_000001_10: bpy.props.FloatProperty(min=0.000001, max=10.0, default=0.0)\n    value_1_9: bpy.props.IntProperty(min=1, max=9, default=1)\n    value_0_255: bpy.props.IntProperty(min=0, max=255, default=0)\n    percent: bpy.props.FloatProperty(min=0.0, max=100.0, default=0.0)\n    default_value_0_1: bpy.props.FloatProperty(description=\"Input node Value_0_1\", min=0, max=1, default=0)\n    default_value_0_10: bpy.props.FloatProperty(description=\"Input node Value_0_10\", min=0, max=10, default=0)\n    default_value_10: bpy.props.FloatProperty(description=\"Input node Value_10\", min=-10, max=10, default=0)\n```\n\n**Key changes:**\n- Use **type annotations** (`:`) instead of assignment (`=`) for property definitions.\n- Each property must have a unique name within the class.\n- Group properties inside a `PropertyGroup` subclass for best practice in Blender 2.8+ and 4.x[2][3].\n\nThis code is compatible with Blender 4.4 and follows the current API conventions.",
      "The following code lines are updated for Blender 4.4 compatibility. The core property API for FloatProperty, IntProperty, and EnumProperty remains the same, but the use of default_value is incorrect; you should use default. The syntax for property definitions is unchanged, but ensure you use the correct keyword arguments and avoid deprecated patterns.\n\n```python\nvalue: bpy.props.FloatProperty(description=\"Input Node Value Positive\", min=0.0, default=0.0)\nvalue: bpy.props.FloatProperty(min=0.000001, max=10.0, default=0.000001)\nvalue: bpy.props.FloatProperty(default=0.0)\nvalue: bpy.props.IntProperty(description=\"Input node Value_1_9\", min=1, max=9, default=6)\nvalue: bpy.props.IntProperty(min=0, max=255, default=0)\nvalue: bpy.props.EnumProperty(\n    # items argument required here, example:\n    items=[\n        ('OPT_A', \"Option A\", \"\"),\n        ('OPT_B', \"Option B\", \"\"),\n    ],\n    default='OPT_A'\n)\nf: bpy.props.FloatProperty(default=0.0, min=0.0, max=1.0)\nt: bpy.props.FloatProperty(default=0.0, min=0.0, max=1.0)\nvalue: bpy.props.IntProperty()\nvalue: bpy.props.IntProperty(min=0, max=255, default=0)\n```\n\n**Key changes:**\n- Use a variable name (e.g., value, f, t) with a colon for type annotation, as per Blender 2.8+ conventions.\n- Use default, not default_value.\n- For EnumProperty, you must provide an items argument.\n- The property API itself is not deprecated, but the way properties are defined in classes has changed since Blender 2.8; use type annotations as shown above[2][3].",
      "To migrate your property definitions to Blender 4.4, you must use **keyword arguments** for all property parameters, as positional arguments are no longer supported[1]. Here are the corrected lines:\n\n```python\ndefault_value = bpy.props.IntProperty(min=0, max=255, default=0)\ndefault_value = bpy.props.FloatProperty(min=0.0, max=1.0)\nheight = bpy.props.FloatProperty(min=0.0, max=10.0)\nslope = bpy.props.FloatProperty(min=-10.0, max=10.0)\ndefault_value = bpy.props.StringProperty()\n```\n\n**Key change:**  \nAll arguments (`min`, `max`, `default`) must be specified as keywords, not as positional arguments. This is now required in Blender 4.4[1]. If your original code already used keyword arguments (as in your example), it is already compatible with Blender 4.4 and does not require further changes.\n\nIf you had any lines like this (using positional arguments):\n\n```python\ndefault_value = bpy.props.IntProperty(0, 255, 0)  # INVALID in 4.4\n```\n\nYou must rewrite them as:\n\n```python\ndefault_value = bpy.props.IntProperty(min=0, max=255, default=0)\n```\n\nBut your provided code is already in the correct, Blender 4.4-compatible form[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\generate.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarig_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rig_lists.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rig_ui_template.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, properties like `StringProperty` must be defined as class attributes within a subclass of `bpy.types.PropertyGroup` (or another Blender type), and then registered with Blender. The old style of assigning them directly to variables is deprecated.\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    uarm_fk: bpy.props.StringProperty(name=\"Upper Arm FK Name\")\n    farm_fk: bpy.props.StringProperty(name=\"Forearm FK Name\")\n    hand_fk: bpy.props.StringProperty(name=\"Hand FK Name\")\n    uarm_ik: bpy.props.StringProperty(name=\"Upper Arm IK Name\")\n    farm_ik: bpy.props.StringProperty(name=\"Forearm IK Name\")\n    hand_ik: bpy.props.StringProperty(name=\"Hand IK Name\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and type annotation.\n- All properties must be inside a class derived from `bpy.types.PropertyGroup` (or similar Blender type).\n- Register the class with `bpy.utils.register_class(MyPropertyGroup)` and assign it to a data path (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyPropertyGroup)`), if needed for use in the UI or elsewhere[1][3].\n\nThis approach is fully compatible with Blender 4.4 and avoids deprecated API usage.",
      "In **Blender 4.4**, properties like `StringProperty` must be defined as class attributes inside a class derived from `bpy.types.PropertyGroup` (or similar), and then registered with Blender. The old style of assigning properties directly to variables at the module level is deprecated.\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyRigProperties(bpy.types.PropertyGroup):\n    farm_ik: bpy.props.StringProperty(name=\"Forearm IK Name\")\n    hand_ik: bpy.props.StringProperty(name=\"Hand IK Name\")\n    pole: bpy.props.StringProperty(name=\"Pole IK Name\")\n    main_parent: bpy.props.StringProperty(name=\"Main Parent\", default=\"\")\n    thigh_fk: bpy.props.StringProperty(name=\"Thigh FK Name\")\n    shin_fk: bpy.props.StringProperty(name=\"Shin FK Name\")\n    foot_fk: bpy.props.StringProperty(name=\"Foot FK Name\")\n    mfoot_fk: bpy.props.StringProperty(name=\"MFoot FK Name\")\n    thigh_ik: bpy.props.StringProperty(name=\"Thigh IK Name\")\n    shin_ik: bpy.props.StringProperty(name=\"Shin IK Name\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with type annotations (`:` instead of `=`).\n- All properties are grouped inside a `PropertyGroup` subclass, which must be registered with Blender[1][3][5].\n\nYou must also register this class and assign it to a data block (e.g., `bpy.types.Object.my_rig_props = bpy.props.PointerProperty(type=MyRigProperties)`) in your add-on or script initialization, but the above block covers the direct migration of your property definitions.",
      "In Blender 4.4, properties such as StringProperty must be defined inside a class derived from bpy.types.PropertyGroup or similar, and registered using type annotations. The old direct assignment to variables is deprecated. The corrected code block is:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    foot_ik: bpy.props.StringProperty(name=\"Foot IK Name\")\n    mfoot_ik: bpy.props.StringProperty(name=\"MFoot IK Name\")\n    thigh_fk: bpy.props.StringProperty(name=\"Thigh FK Name\")\n    shin_fk: bpy.props.StringProperty(name=\"Shin FK Name\")\n    mfoot_fk: bpy.props.StringProperty(name=\"MFoot FK Name\")\n    foot_fk: bpy.props.StringProperty(name=\"Foot FK Name\", default=\"\")\n    thigh_ik: bpy.props.StringProperty(name=\"Thigh IK Name\")\n    shin_ik: bpy.props.StringProperty(name=\"Shin IK Name\")\n    footroll: bpy.props.StringProperty(name=\"Foot Roll Name\")\n```\n\nThis uses type annotations (the colon syntax) as required by Blender 2.8+ and 4.x[1][3].",
      "In **Blender 4.4**, property definitions must use the new-style type annotations within a class derived from bpy.types.PropertyGroup, rather than assigning properties directly to variables. The following is the corrected code block for your properties:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    pole: bpy.props.StringProperty(name=\"Pole IK Name\")\n    mfoot_ik: bpy.props.StringProperty(name=\"MFoot IK Name\")\n    main_parent: bpy.props.StringProperty(name=\"Main Parent\", default=\"\")\n```\n\nThis syntax is required for Blender 2.80 and later, including 4.4, and is the only supported way to define custom properties for use in add-ons or scripts[1][2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rot_mode.py",
    "warnings": [],
    "api_suggestions": [
      "Here are the corrected lines for Blender 4.4. The old bpy.props.EnumProperty and BoolProperty registration style is deprecated; you must use the new annotation-based registration with bpy.props. Also, IDStore is no longer used for custom properties\u2014use annotations on the class instead.\n\nReplace your code with the following:\n\n```python\nimport bpy\n\n# For Scene property\nbpy.types.Scene.order_list: bpy.props.EnumProperty(\n    items=items,\n    name='Convert to'\n)\n\n# For add-on or custom property (formerly IDStore)\nbpy.types.Scene.rigify_convert_only_selected: bpy.props.BoolProperty(\n    name=\"Convert Only Selected\"\n)\n```\n\nKey changes:\n- Use the annotation syntax (the colon : instead of =).\n- Register properties directly on bpy.types.Scene (or the appropriate type).\n- Do not use IDStore; attach properties directly to the type with annotations.\n\nThis is the Blender 4.4 compatible way to register properties[4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\ui.py",
    "warnings": [],
    "api_suggestions": [
      "Here is the **Blender 4.4 compatible code** for your property definitions. In Blender 2.8+ (including 4.4), property definitions must be declared as class attributes inside a subclass of bpy.types.PropertyGroup, bpy.types.Operator, or similar, and not as standalone variables. The API for property definitions remains the same, but the usage context has changed.\n\nBelow is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    theme: bpy.props.EnumProperty(\n        items=[\n            ('THEME01', 'THEME01', ''),\n        ]\n    )\n    idx: bpy.props.IntProperty()\n    bone_name: bpy.props.StringProperty(default='')\n    window: bpy.props.StringProperty(default='ALL')\n    toggle: bpy.props.BoolProperty(default=True)\n    value: bpy.props.BoolProperty(default=True)\n    bake: bpy.props.BoolProperty(default=True)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes using the colon (:) syntax.\n- All properties must be inside a class derived from bpy.types.PropertyGroup (or Operator, Panel, etc.).\n- Register your PropertyGroup and assign it to a context (e.g., bpy.types.Scene) as needed.\n\nNo changes are needed to the property types themselves, but the context and syntax must follow the new API requirements."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your Blender 2.79 property definitions to Blender 4.4, replace all uses of the deprecated direct assignment of properties (e.g., name = bpy.props.StringProperty()) with type annotations inside a class derived from bpy.types.PropertyGroup or similar, and register the class. For custom properties on built-in types, use bpy.types.<Type>.property_name = bpy.props.<PropertyType>(...) as before, but note that BoolProperty, IntProperty, and StringProperty are now imported from bpy.props, not bpy.props directly.\n\nHere are the corrected code lines for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty, BoolProperty, IntProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    name: StringProperty()\n    color_set: StringProperty(name=\"Color Set\", default=\" \")\n    standard_colors_lock: BoolProperty(default=True)\n    layer_name: StringProperty(name=\"Layer Name\", default=\" \")\n    row: IntProperty(name=\"Layer Row\", default=1, min=1, max=32, description='UI row for this layer')\n    selection_set: BoolProperty(name=\"Selection Set\", default=False, description='Add Selection Set for this layer')\n    bone_group: IntProperty(name=\"Bone Group\", default=0, min=0, max=32)\n\n# Register the property group\nbpy.utils.register_class(MyProperties)\n\n# Assign custom properties to built-in types as before\nbpy.types.PoseBone.rigify_type = StringProperty(name=\"Rigify Type\", description=\"Rig type for this bone\")\nbpy.types.Armature.rigify_colors_index = IntProperty(default=-1)\n```\n\n**Key changes:**\n- Use type annotations (e.g., name: StringProperty(...)) inside a PropertyGroup subclass.\n- Import property types from bpy.props.\n- Register your PropertyGroup class.\n- For properties on built-in types (like PoseBone, Armature), assignment remains the same, but use the new import style.\n\nThis code is compatible with Blender 4.4\u2019s Python API[1][2].",
      "To migrate your code to **Blender 4.4**, you must use the new property registration system. Direct assignment of properties to built-in types (like `bpy.types.Armature.rigify_colors_lock = ...`) and use of `IDStore` are deprecated and no longer supported. Instead, use the `bpy.props` system within a custom `PropertyGroup`, and register these properties with the appropriate context (e.g., scene, armature, etc.).\n\nBelow is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import (\n    BoolProperty,\n    EnumProperty,\n    IntProperty,\n    StringProperty,\n    PointerProperty,\n)\nfrom bpy.types import PropertyGroup\n\nclass RigifyProperties(PropertyGroup):\n    rigify_colors_lock: BoolProperty(default=True)\n    rigify_theme_to_add: EnumProperty(\n        items=(\n            ('THEME01', 'THEME01', ''),\n            # ... add other items as needed\n        )\n    )\n    rigify_collection: EnumProperty(\n        items=rig_lists.col_enum_list,  # Ensure rig_lists.col_enum_list is defined\n        default=\"All\"\n    )\n    rigify_active_type: IntProperty(\n        name=\"Rigify Active Type\",\n        description=\"The selected rig type\"\n    )\n    rigify_advanced_generation: BoolProperty(\n        name=\"Advanced Options\"\n    )\n    rigify_generate_mode: EnumProperty(\n        name=\"Rigify Generate Rig Mode\",\n        # ... add items as needed\n    )\n    rigify_force_widget_update: BoolProperty(\n        name=\"Force Widget Update\"\n    )\n    rigify_target_rig: StringProperty(\n        name=\"Rigify Target Rig\"\n    )\n    rigify_rig_ui: StringProperty(\n        name=\"Rigify Target Rig UI\"\n    )\n    rigify_rig_basename: StringProperty(\n        name=\"Rigify Rig Name\"\n    )\n\ndef register():\n    bpy.utils.register_class(RigifyProperties)\n    bpy.types.Armature.rigify_props = PointerProperty(type=RigifyProperties)\n\ndef unregister():\n    del bpy.types.Armature.rigify_props\n    bpy.utils.unregister_class(RigifyProperties)\n```\n\n**Key changes:**\n- All custom properties are now defined in a `PropertyGroup` subclass.\n- Properties are attached to `bpy.types.Armature` via a `PointerProperty`.\n- `IDStore` is not used; instead, properties are accessed as `armature.rigify_props.<property_name>`.\n\n**Usage example:**\n```python\narmature = bpy.context.object.data\narmature.rigify_props.rigify_colors_lock = True\n```\n\nThis approach is fully compatible with Blender 4.4 and follows current best practices for property registration.",
      "In Blender 4.4, direct assignment of custom properties to IDStore or similar \"ID property\" containers using bpy.props is deprecated. Instead, you should define a PropertyGroup subclass and register it, then assign it to the appropriate type (such as Scene, Object, etc.) using an annotation. Here is the migrated code block:\n\n```python\nimport bpy\n\nclass RigifyTransferProperties(bpy.types.PropertyGroup):\n    rigify_transfer_only_selected: bpy.props.BoolProperty(\n        name=\"Transfer Only Selected\",\n        description=\"Transfer selected bones only\",\n        default=True\n    )\n    rigify_transfer_start_frame: bpy.props.IntProperty(\n        name=\"Start Frame\",\n        description=\"First Frame to Transfer\",\n        default=0,\n        min=0\n    )\n    rigify_transfer_end_frame: bpy.props.IntProperty(\n        name=\"End Frame\",\n        description=\"Last Frame to Transfer\",\n        default=0,\n        min=0\n    )\n\nbpy.utils.register_class(RigifyTransferProperties)\nbpy.types.Scene.rigify_transfer = bpy.props.PointerProperty(type=RigifyTransferProperties)\n```\n\nThis code defines a PropertyGroup and attaches it to the Scene type, which is the recommended approach in Blender 4.4 for custom properties[1][2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\generate.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\metarig_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rig_lists.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rig_ui_pitchipoy_template.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, properties like `StringProperty` must be defined as class attributes within a subclass of `bpy.types.PropertyGroup` (or another Blender type), and then registered. The old style of assigning them directly to variables is deprecated.\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    uarm_fk: bpy.props.StringProperty(name=\"Upper Arm FK Name\")\n    farm_fk: bpy.props.StringProperty(name=\"Forearm FK Name\")\n    hand_fk: bpy.props.StringProperty(name=\"Hand FK Name\")\n    uarm_ik: bpy.props.StringProperty(name=\"Upper Arm IK Name\")\n    farm_ik: bpy.props.StringProperty(name=\"Forearm IK Name\")\n    hand_ik: bpy.props.StringProperty(name=\"Hand IK Name\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and type annotation.\n- All properties are grouped in a `PropertyGroup` subclass, which must be registered with Blender.\n- The old direct assignment style is no longer supported in Blender 4.4[1][3][5].\n\n**Note:** You must also register this class and assign it to a data block (e.g., `bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)`) for use, but the above block addresses only the property definition migration.",
      "In **Blender 4.4**, properties like `StringProperty` must be defined inside a class derived from `bpy.types.PropertyGroup` and registered as annotations, not as direct assignments. The correct migration is:\n\n```python\nimport bpy\n\nclass MyIKProperties(bpy.types.PropertyGroup):\n    farm_ik: bpy.props.StringProperty(name=\"Forearm IK Name\")\n    hand_ik: bpy.props.StringProperty(name=\"Hand IK Name\")\n    pole: bpy.props.StringProperty(name=\"Pole IK Name\")\n    thigh_fk: bpy.props.StringProperty(name=\"Thigh FK Name\")\n    shin_fk: bpy.props.StringProperty(name=\"Shin FK Name\")\n    foot_fk: bpy.props.StringProperty(name=\"Foot FK Name\")\n    mfoot_fk: bpy.props.StringProperty(name=\"MFoot FK Name\")\n    thigh_ik: bpy.props.StringProperty(name=\"Thigh IK Name\")\n    shin_ik: bpy.props.StringProperty(name=\"Shin IK Name\")\n    foot_ik: bpy.props.StringProperty(name=\"Foot IK Name\")\n```\nThis uses the **annotation syntax** (`name: bpy.props.StringProperty(...)`), which is required for Blender 2.80+ and fully compatible with Blender 4.4[1][3][5].",
      "In Blender 4.4, properties such as StringProperty must be defined as class attributes within a bpy.types.PropertyGroup or similar Blender type, not as standalone variables. The correct migration is:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    mfoot_ik: bpy.props.StringProperty(name=\"MFoot IK Name\")\n    thigh_fk: bpy.props.StringProperty(name=\"Thigh FK Name\")\n    shin_fk:  bpy.props.StringProperty(name=\"Shin FK Name\")\n    mfoot_fk: bpy.props.StringProperty(name=\"MFoot FK Name\")\n    foot_fk:  bpy.props.StringProperty(name=\"Foot FK Name\")\n    thigh_ik: bpy.props.StringProperty(name=\"Thigh IK Name\")\n    shin_ik:  bpy.props.StringProperty(name=\"Shin IK Name\")\n    foot_ik:  bpy.props.StringProperty(name=\"Foot IK Name\")\n    footroll: bpy.props.StringProperty(name=\"Foot Roll Name\")\n    pole:     bpy.props.StringProperty(name=\"Pole IK Name\")\n```\n\nKey changes:\n- Properties are now defined as class attributes with a colon (:) and not as assignments.\n- They must be inside a class derived from bpy.types.PropertyGroup (or another Blender type)[1][3].",
      "The correct way to define a property in Blender 4.4+ is to use the annotation syntax. Replace your line with:\n\n```python\nmfoot_ik: bpy.props.StringProperty(name=\"MFoot IK Name\")\n```\n\nThis change is required because the assignment syntax using = is deprecated for property definitions in Blender 2.8 and later. Use the colon (:) annotation instead."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rig_ui_template.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, properties like StringProperty must be defined as class attributes inside a class derived from bpy.types.PropertyGroup, and then registered. The old style of assigning them directly to variables is deprecated. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    uarm_fk: bpy.props.StringProperty(name=\"Upper Arm FK Name\")\n    farm_fk: bpy.props.StringProperty(name=\"Forearm FK Name\")\n    hand_fk: bpy.props.StringProperty(name=\"Hand FK Name\")\n    uarm_ik: bpy.props.StringProperty(name=\"Upper Arm IK Name\")\n    farm_ik: bpy.props.StringProperty(name=\"Forearm IK Name\")\n    hand_ik: bpy.props.StringProperty(name=\"Hand IK Name\")\n```\nYou must then register this PropertyGroup and assign it to a data block (such as bpy.types.Object, Scene, etc.) as needed[1][3].",
      "In Blender 4.4, properties such as StringProperty must be defined inside a class derived from bpy.types.PropertyGroup or similar, and registered using type annotations. The old assignment style is deprecated. The corrected code block is:\n\n```python\nimport bpy\n\nclass MyIKProperties(bpy.types.PropertyGroup):\n    farm_ik: bpy.props.StringProperty(name=\"Forearm IK Name\")\n    hand_ik: bpy.props.StringProperty(name=\"Hand IK Name\")\n    pole: bpy.props.StringProperty(name=\"Pole IK Name\")\n    thigh_fk: bpy.props.StringProperty(name=\"Thigh FK Name\")\n    shin_fk: bpy.props.StringProperty(name=\"Shin FK Name\")\n    foot_fk: bpy.props.StringProperty(name=\"Foot FK Name\")\n    mfoot_fk: bpy.props.StringProperty(name=\"MFoot FK Name\")\n    thigh_ik: bpy.props.StringProperty(name=\"Thigh IK Name\")\n    shin_ik: bpy.props.StringProperty(name=\"Shin IK Name\")\n    foot_ik: bpy.props.StringProperty(name=\"Foot IK Name\")\n```\nThis uses type annotations (the colon syntax) as required by Blender 2.8+ and 4.x[1][3].",
      "In **Blender 4.4**, properties like `StringProperty` must be defined as class attributes within a `bpy.types.PropertyGroup` or similar Blender type, and registered using `bpy.utils.register_class`. The old style of assigning properties directly to variables at the module level is deprecated.\n\nHere is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    mfoot_ik: bpy.props.StringProperty(name=\"MFoot IK Name\")\n    thigh_fk: bpy.props.StringProperty(name=\"Thigh FK Name\")\n    shin_fk:  bpy.props.StringProperty(name=\"Shin FK Name\")\n    mfoot_fk: bpy.props.StringProperty(name=\"MFoot FK Name\")\n    thigh_ik: bpy.props.StringProperty(name=\"Thigh IK Name\")\n    shin_ik:  bpy.props.StringProperty(name=\"Shin IK Name\")\n    foot_ik:  bpy.props.StringProperty(name=\"Foot IK Name\")\n    footroll: bpy.props.StringProperty(name=\"Foot Roll Name\")\n    pole:     bpy.props.StringProperty(name=\"Pole IK Name\")\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and type annotation, not as assignments (`=`) at the module level.\n- Properties must be inside a class derived from `bpy.types.PropertyGroup` (or another Blender type)[1][3].\n- Register the class with `bpy.utils.register_class(MyPropertyGroup)` when using it in your add-on or script.\n\nThis is the Blender 4.4-compliant way to define custom properties for use in add-ons or scripts."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "Here are the corrected code lines for Blender 4.4. In Blender 2.8+ (including 4.4), property definitions must be inside a class derived from bpy.types.PropertyGroup, bpy.types.Operator, or similar, and registered as class attributes\u2014not as standalone assignments. The IDStore type is also deprecated; use bpy.types.Scene or a custom PropertyGroup.\n\nBelow is the migrated code block:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty, IntProperty, EnumProperty\nfrom bpy.types import PropertyGroup\n\nclass MyProperties(PropertyGroup):\n    name: StringProperty(\n        name=\"Layer Name\",\n        default=\" \"\n    )\n    row: IntProperty(\n        name=\"Layer Row\",\n        default=1,\n        min=1,\n        max=32\n    )\n\n# Register the property group\nbpy.utils.register_class(MyProperties)\nbpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\n# For PoseBone custom property\nbpy.types.PoseBone.rigify_type = StringProperty(\n    name=\"Rigify Type\",\n    description=\"Rig type for this bone\"\n)\n\n# For collection and active type, use Scene or a custom PropertyGroup\nbpy.types.Scene.rigify_collection = EnumProperty(\n    items=rig_lists.col_enum_list,\n    default=\"All\",\n    name=\"Rigify Active Collection\",\n    description=\"The selected rig collection\"\n)\nbpy.types.Scene.rigify_active_type = IntProperty(\n    name=\"Rigify Active Type\",\n    description=\"The selected rig type\"\n)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes inside a PropertyGroup.\n- Use PointerProperty to attach the PropertyGroup to bpy.types.Scene.\n- Use bpy.types.Scene for global properties instead of IDStore.\n- Direct assignment to bpy.types.PoseBone for custom bone properties remains valid.\n\nThis structure is fully compatible with Blender 4.4\u2019s Python API."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\metarigs\\human.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\metarigs\\pitchipoy_human.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\metarigs\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\finger.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions like `bpy.props.EnumProperty`, `BoolProperty`, etc., must be declared as class attributes within a subclass of `bpy.types.PropertyGroup` or similar, and registered with Blender. Direct assignment to an instance (e.g., `params.primary_rotation_axis = ...`) is deprecated and will not work.\n\nHere is the **migrated code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    primary_rotation_axis: bpy.props.EnumProperty(\n        items=items,\n        name=\"Primary Rotation Axis\",\n        default='X'\n    )\n    separate_extra_layers: bpy.props.BoolProperty(\n        name=\"Separate Secondary Control Layers:\",\n        default=False,\n        description=\"Enable putting the secondary controls on a separate layer from the primary controls\"\n    )\n    use_digit_twist: bpy.props.BoolProperty(\n        name=\"Digit Twist\",\n        default=True,\n        description=\"Generate the dual-bone twist setup for the first finger digit\"\n    )\n\n# Register the property group\nbpy.utils.register_class(MyParams)\n\n# Attach to a suitable data-block, e.g., scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes in a `PropertyGroup` subclass.\n- Use the `:` (colon) syntax, not assignment (`=`), for property definitions.\n- Register the class and attach it to a data-block (e.g., `Scene`) using a `PointerProperty`.\n\nThis approach is required for Blender 2.80+ and fully compatible with Blender 4.4[4][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\neck_short.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\palm.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated assignment to the property with a class-level definition inside your PropertyGroup or relevant class. In Blender 4.4, properties must be defined as class attributes, not assigned at runtime.\n\n**Corrected code for Blender 4.4:**\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    palm_rotation_axis: bpy.props.EnumProperty(\n        items=items,\n        name=\"Palm Rotation Axis\",\n        default='X'\n    )\n```\n\n**Key changes:**\n- Define the property as a class attribute using a colon (`:`) and not by assignment (`=`) on an instance or variable.\n- Place this inside a class derived from `bpy.types.PropertyGroup` (or the appropriate Blender type).\n\nThis is the required migration for Blender 2.8+ and is fully compatible with Blender 4.4[3][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\spine.py",
    "warnings": [],
    "api_suggestions": [
      "To migrate your code to Blender 4.4, you must use the new annotation-based property definitions. The direct assignment of bpy.props.*Property to class attributes is deprecated. Instead, use type annotations with a colon and assign the property to the class, not to an instance.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import StringProperty, FloatProperty\n\nclass MyParams(bpy.types.PropertyGroup):\n    spine_main_control_name: StringProperty(\n        name=\"Main control name\",\n        default=\"torso\",\n        description=\"Name that the main control bone should be given\"\n    )\n    rest_pivot_slide: FloatProperty(\n        name=\"Rest Pivot Slide\",\n        default=0.0,\n        min=0.0,\n        max=1.0,\n        soft_min=0.0,\n        soft_max=1.0,\n        description=\"The pivot slide value in the rest pose\"\n    )\n    chain_bone_controls: StringProperty(\n        name=\"Control bone list\",\n        default=\"\",\n        description=\"Define which bones have controls\"\n    )\n```\n\n**Key changes:**\n- Use a class derived from bpy.types.PropertyGroup.\n- Use type annotations (:) instead of assignment (=) for properties.\n- Register the PropertyGroup and assign it to a PointerProperty on another type as needed.\n\nThis approach is required for Blender 2.80+ and is fully compatible with Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\basic\\copy.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of the old-style property assignment (e.g., `params.make_control = bpy.props.BoolProperty(...)`) is deprecated. Properties must now be declared as class attributes within a class derived from `bpy.types.PropertyGroup` or similar, and registered with Blender. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    make_control: bpy.props.BoolProperty(\n        name=\"Control\",\n        default=True,\n        description=\"Create a control bone for the copy\"\n    )\n    make_deform: bpy.props.BoolProperty(\n        name=\"Deform\",\n        default=True,\n        description=\"Create a deform bone for the copy\"\n    )\n\n# Register the property group (required)\nbpy.utils.register_class(MyParams)\n```\n\n**Key changes:**\n- Use the colon (`:`) syntax for property declarations inside a class derived from `bpy.types.PropertyGroup`.\n- Register the class with `bpy.utils.register_class`.\n- Attach the property group to a data block (e.g., `bpy.types.Scene.my_params: PointerProperty(type=MyParams)`) as needed in your script.\n\nThis approach is fully compatible with Blender 4.4 and avoids deprecated API usage."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\basic\\copy_chain.py",
    "warnings": [],
    "api_suggestions": [
      "The use of bpy.props.BoolProperty as a direct assignment to an instance attribute (e.g., params.make_controls = ...) is deprecated and no longer supported in Blender 4.4. Properties must be defined as class attributes within a subclass of bpy.types.PropertyGroup, and then registered with Blender.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    make_controls: bpy.props.BoolProperty(\n        name=\"Controls\",\n        default=True,\n        description=\"Create control bones for the copy\"\n    )\n    make_deforms: bpy.props.BoolProperty(\n        name=\"Deform\",\n        default=True,\n        description=\"Create deform bones for the copy\"\n    )\n\n# Register the property group\nbpy.utils.register_class(MyParams)\n\n# Attach to e.g. bpy.types.Scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\nReplace params.make_controls and params.make_deforms with bpy.context.scene.my_params.make_controls and bpy.context.scene.my_params.make_deforms, or wherever you attach the property group."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\basic\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\limb_common.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\arm\\deform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\arm\\fk.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\arm\\ik.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\arm\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must be declared as class attributes within a subclass of `bpy.types.PropertyGroup` (or similar), and registered with `bpy.utils.register_class`. The direct assignment of `bpy.props.*Property` to arbitrary objects (like `params`) is deprecated and will not work.\n\nHere is the **corrected code block** for Blender 4.4+:\n\n```python\nimport bpy\n\nclass MyArmRigProperties(bpy.types.PropertyGroup):\n    use_complex_arm: bpy.props.BoolProperty(\n        name=\"Complex Arm Rig\",\n        default=True,\n        description=\"Generate the full, complex arm rig with twist bones and rubber-hose controls\"\n    )\n    bend_hint: bpy.props.BoolProperty(\n        name=\"Bend Hint\",\n        default=True,\n        description=\"Give IK chain a hint about which way to bend. Useful for perfectly straight chains\"\n    )\n    primary_rotation_axis: bpy.props.EnumProperty(\n        items=items,\n        name=\"Primary Rotation Axis\",\n        default='X'\n    )\n    elbow_base_name: bpy.props.StringProperty(\n        name=\"Elbow Name\",\n        default=\"elbow\",\n        description=\"Base name for the generated elbow-related controls\"\n    )\n    separate_ik_layers: bpy.props.BoolProperty(\n        name=\"Separate IK Control Layers:\",\n        default=False,\n        description=\"Enable putting the ik controls on a separate layer from the fk controls\"\n    )\n    separate_hose_layers: bpy.props.BoolProperty(\n        name=\"Separate Rubber-hose Control Layers:\",\n        default=False,\n        description=\"Enable putting the rubber-hose controls on a separate layer from the other controls\"\n    )\n\n# Register the property group\nbpy.utils.register_class(MyArmRigProperties)\n\n# Attach to e.g. Scene (or another suitable type)\nbpy.types.Scene.my_arm_rig_props = bpy.props.PointerProperty(type=MyArmRigProperties)\n```\n\n**Key changes:**\n- Properties are now class attributes of a `PropertyGroup` subclass, not assigned to arbitrary objects.\n- Use the `:` syntax for property declarations.\n- Register the class and attach it to a Blender data block (e.g., `Scene`) using a `PointerProperty`.\n\nThis approach is fully compatible with Blender 4.4 and follows current API best practices."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\leg\\deform.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\leg\\fk.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\leg\\ik.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\biped\\leg\\__init__.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties must be defined as class attributes inside a subclass of bpy.types.PropertyGroup, not as assignments to an instance (like params.use_complex_leg = ...). The correct approach is:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    use_complex_leg: bpy.props.BoolProperty(\n        name=\"Complex Leg Rig\",\n        default=True,\n        description=\"Generate the full, complex leg rig with twist bones and rubber-hose controls\"\n    )\n    bend_hint: bpy.props.BoolProperty(\n        name=\"Bend Hint\",\n        default=True,\n        description=\"Give IK chain a hint about which way to bend (useful for perfectly straight chains)\"\n    )\n    primary_rotation_axis: bpy.props.EnumProperty(\n        items=items,\n        name=\"Primary Rotation Axis\",\n        default='X'\n    )\n    knee_base_name: bpy.props.StringProperty(\n        name=\"Knee Name\",\n        default=\"knee\",\n        description=\"Base name for the generated knee-related controls\"\n    )\n    separate_ik_layers: bpy.props.BoolProperty(\n        name=\"Separate IK Control Layers:\",\n        default=False,\n        description=\"Enable putting the ik controls on a separate layer from the fk controls\"\n    )\n    separate_hose_layers: bpy.props.BoolProperty(\n        name=\"Separate Rubber-hose Control Layers:\",\n        default=False,\n        description=\"Enable putting the rubber-hose controls on a separate layer from the other controls\"\n    )\n```\n\nYou must then register this PropertyGroup and assign it to a data-block (e.g., bpy.types.Scene, bpy.types.Object, etc.) as needed. The key changes are:\n\n- Use a subclass of bpy.types.PropertyGroup.\n- Define properties as class attributes with type annotations (the colon syntax).\n- Do not assign properties to an instance; assign them to the class.\n\nThis is the Blender 4.4+ compatible way to define custom properties."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\misc\\delta.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\misc\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\simple_tentacle.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated assignment with the following, which is compatible with Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    tweak_extra_layers: BoolProperty(\n        name=\"Tweak Extra Layers\",\n        description=\"Enable extra tweak layers\",\n        default=False,\n    )\n```\n\n**Key changes:**\n- Use the **annotation syntax** (`tweak_extra_layers: BoolProperty(...)`) inside a `PropertyGroup` subclass, as direct assignment (e.g., `params.tweak_extra_layers = ...`) is no longer supported in Blender 2.8+ and 4.x[2][4].\n- Register the `PropertyGroup` with Blender if not already done."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\super_copy.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of the old `bpy.props.BoolProperty` assignment directly to arbitrary objects (like `params.make_control = bpy.props.BoolProperty(...)`) is deprecated. Properties must be defined as class attributes within a subclass of `bpy.types.PropertyGroup`, and then registered with Blender. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    make_control: bpy.props.BoolProperty(\n        name=\"Make Control\",\n        description=\"Enable control\",\n        default=False\n    )\n    make_widget: bpy.props.BoolProperty(\n        name=\"Make Widget\",\n        description=\"Enable widget\",\n        default=False\n    )\n    make_deform: bpy.props.BoolProperty(\n        name=\"Make Deform\",\n        description=\"Enable deform\",\n        default=False\n    )\n\n# Register the property group\nbpy.utils.register_class(MyParams)\n\n# Attach to a suitable data path, e.g., scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\nReplace `params.make_control = ...` with the above class-based property definition and registration. Access the properties via `bpy.context.scene.my_params.make_control` in your scripts."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\super_face.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions like BoolProperty must be declared as class attributes within a subclass of bpy.types.PropertyGroup, not assigned dynamically as in Blender 2.79. The correct migration is:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    primary_layers_extra: bpy.props.BoolProperty()\n    secondary_layers_extra: bpy.props.BoolProperty()\n```\n\nYou must then register this PropertyGroup and assign it to your desired context (e.g., scene, object) as appropriate. The key change is using the colon (:) syntax and defining properties as class attributes, not as assignments to an instance or variable."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\super_finger.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, you should define properties like EnumProperty as class attributes using the annotation syntax, not by assigning the result of bpy.props.EnumProperty to an instance variable. The correct migration is:\n\n```python\nimport bpy\n\nitems = [\n    ('X', \"X\", \"X Axis\"),\n    ('Y', \"Y\", \"Y Axis\"),\n    ('Z', \"Z\", \"Z Axis\"),\n]\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    primary_rotation_axis: bpy.props.EnumProperty(\n        items=items,\n        name=\"Primary Rotation Axis\",\n        default='X'\n    )\n```\n\nReplace your original line with the above class attribute definition. EnumProperty must be defined as a class attribute with a colon (:) and not assigned to an instance or variable[3][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\super_palm.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must be declared as class attributes, not assigned at runtime. The following is the correct way to define an `EnumProperty` for a class:\n\n```python\nimport bpy\n\nclass MyClass(bpy.types.PropertyGroup):\n    palm_rotation_axis: bpy.props.EnumProperty(\n        name=\"Palm Rotation Axis\",\n        description=\"Axis for palm rotation\",\n        items=[\n            ('X', \"X Axis\", \"Rotate around X axis\"),\n            ('Y', \"Y Axis\", \"Rotate around Y axis\"),\n            ('Z', \"Z Axis\", \"Rotate around Z axis\"),\n        ],\n        default='X'\n    )\n```\n\n**Key changes:**\n- Use a colon (`:`) instead of assignment (`=`) for property definitions in class bodies.\n- Define the property as a class attribute, not as a runtime assignment[5][3].\n\nReplace your original line with the above pattern inside your `PropertyGroup` or relevant class."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\super_torso_turbo.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions like IntProperty and BoolProperty must be declared as class attributes within a subclass of bpy.types.PropertyGroup, not as instance attributes. The old usage (e.g., params.neck_pos = bpy.props.IntProperty(...)) is deprecated.\n\nHere is the corrected code block for Blender 4.4+:\n\n```python\nimport bpy\nfrom bpy.props import IntProperty, BoolProperty\n\nclass MyParams(bpy.types.PropertyGroup):\n    neck_pos: IntProperty(\n        name=\"Neck Position\",\n        default=0\n    )\n    pivot_pos: IntProperty(\n        name=\"Pivot Position\",\n        default=0\n    )\n    tail_pos: IntProperty(\n        name=\"Tail Position\",\n        default=0\n    )\n    tweak_extra_layers: BoolProperty(\n        name=\"Tweak Extra Layers\",\n        default=False\n    )\n```\n\n**Key changes:**\n- Properties are now defined as class attributes using the colon (:) syntax.\n- The class must inherit from bpy.types.PropertyGroup.\n- Register the class and assign it to a bpy.types.ID property (e.g., bpy.types.Scene) as needed.\n\nThis approach is required for Blender 2.80 and later, including 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\super_widgets.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\tentacle.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of bpy.props directly on arbitrary objects (like params) is deprecated. Properties should be defined as class attributes within a subclass of bpy.types.PropertyGroup, and then registered. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    make_rotations: bpy.props.BoolProperty(\n        name=\"Make Rotations\",\n        description=\"Enable making rotations\",\n        default=False\n    )\n    tweak_extra_layers: bpy.props.BoolProperty(\n        name=\"Tweak Extra Layers\",\n        description=\"Enable tweaking extra layers\",\n        default=False\n    )\n\n# Register the property group\nbpy.utils.register_class(MyParams)\n\n# Attach to a suitable data path, e.g., Scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\nReplace usage of params.make_rotations and params.tweak_extra_layers with bpy.context.scene.my_params.make_rotations and bpy.context.scene.my_params.tweak_extra_layers, or wherever you attach the property group."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\limbs\\arm.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\limbs\\leg.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\limbs\\limb_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\limbs\\paw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\limbs\\super_limb.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must use the `bpy.props` functions directly in the class body, not as assignments to instance attributes. The old pattern:\n\n```python\nparams.limb_type = bpy.props.EnumProperty(...)\n```\n\nis deprecated. Instead, define properties as class attributes inside a subclass of `bpy.types.PropertyGroup` (or `Operator`, etc.), and register the class. Here is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    limb_type: bpy.props.EnumProperty(\n        name=\"Limb Type\",\n        items=[('ARM', \"Arm\", \"\"), ('LEG', \"Leg\", \"\")]\n    )\n    rotation_axis: bpy.props.EnumProperty(\n        name=\"Rotation Axis\",\n        items=[('X', \"X\", \"\"), ('Y', \"Y\", \"\"), ('Z', \"Z\", \"\")]\n    )\n    segments: bpy.props.IntProperty(\n        name=\"Segments\",\n        default=1,\n        min=1\n    )\n    bbones: bpy.props.IntProperty(\n        name=\"B-Bones\",\n        default=0,\n        min=0\n    )\n    tweak_extra_layers: bpy.props.BoolProperty(\n        name=\"Tweak Extra Layers\",\n        default=False\n    )\n    fk_extra_layers: bpy.props.BoolProperty(\n        name=\"FK Extra Layers\",\n        default=False\n    )\n\nbpy.utils.register_class(MyParams)\n```\n\n**Key changes:**\n- Use **class attributes** with type annotations (`:`) for each property.\n- Place all property definitions inside a `PropertyGroup` subclass.\n- Register the class with `bpy.utils.register_class`.\n\nThis is the Blender 4.4 compatible way to define custom properties[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\limbs\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\legacy\\rigs\\pitchipoy\\limbs\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\human.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Animals\\bird.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Animals\\cat.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Animals\\horse.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Animals\\shark.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Animals\\wolf.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Animals\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Basic\\basic_human.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\metarigs\\Basic\\basic_quadruped.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\widgets.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\basic\\copy_chain.py",
    "warnings": [],
    "api_suggestions": [
      "The use of **bpy.props.BoolProperty** directly on an instance (like params.make_controls = ...) is deprecated and no longer supported in Blender 4.4. Properties must be defined as class attributes within a subclass of bpy.types.PropertyGroup, bpy.types.Operator, or similar, and registered with Blender.\n\nHere is the corrected code block for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    make_controls: bpy.props.BoolProperty(\n        name=\"Controls\",\n        default=True,\n        description=\"Create control bones for the copy\"\n    )\n    make_deforms: bpy.props.BoolProperty(\n        name=\"Deform\",\n        default=True,\n        description=\"Create deform bones for the copy\"\n    )\n\n# Register the property group (if not already registered)\nbpy.utils.register_class(MyParams)\n\n# Assign to some context, e.g., scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes inside a PropertyGroup subclass.\n- Use the colon (:) syntax, not assignment (=), for property definitions.\n- Register the class and assign the property group to a data block (e.g., Scene) as needed."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\basic\\super_copy.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, the use of `bpy.props.BoolProperty` directly on arbitrary objects (like `params.make_control = bpy.props.BoolProperty(...)`) is deprecated and no longer supported. Properties must be defined within a class derived from `bpy.types.PropertyGroup` and registered with Blender. Here is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    make_control: bpy.props.BoolProperty()\n    make_widget: bpy.props.BoolProperty()\n    make_deform: bpy.props.BoolProperty()\n\n# Register the property group\nbpy.utils.register_class(MyParams)\n\n# Assign to a suitable RNA path, e.g., Scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes inside a `PropertyGroup` subclass.\n- The class must be registered.\n- The property group is attached to an RNA path (like `Scene`) using a `PointerProperty`.\n\nDirect assignment like `params.make_control = bpy.props.BoolProperty()` is no longer valid in Blender 4.4[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\basic\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\experimental\\super_chain.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must be declared as class attributes, not as assignments to an instance (like params). The correct way is to define them inside a class derived from bpy.types.PropertyGroup, Operator, or Panel, using annotations. The old usage of bpy.props.*Property as assignment is deprecated.\n\nHere is the **migrated code** for Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    tweak_axis: bpy.props.EnumProperty(\n        name=\"Tweak Axis\",\n        items=[\n            ('X', \"X\", \"\"),\n            ('Y', \"Y\", \"\"),\n            ('Z', \"Z\", \"\")\n        ]\n    )\n    conv_bone: bpy.props.StringProperty(\n        name=\"Conv Bone\"\n    )\n    bbones: bpy.props.IntProperty(\n        name=\"BBones\"\n    )\n    # neck_pos: bpy.props.IntProperty(\n    #     name=\"Neck Pos\"\n    # )\n    # pivot_pos: bpy.props.IntProperty(\n    #     name=\"Pivot Pos\"\n    # )\n    # tail_pos: bpy.props.IntProperty(\n    #     name=\"Tail Pos\"\n    # )\n    tweak_extra_layers: bpy.props.BoolProperty(\n        name=\"Tweak Extra Layers\"\n    )\n```\n\n**Key changes:**\n- Use **class annotations** (the colon syntax) inside a class derived from bpy.types.PropertyGroup.\n- Do **not** assign properties to an instance (like params.tweak_axis = ...).\n- Register the PropertyGroup and assign it to a context (e.g., bpy.types.Scene.my_props = PointerProperty(type=MyProperties)) as needed.\n\nThis is the Blender 4.4 compatible way to define custom properties[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\experimental\\super_eye.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\experimental\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\faces\\super_face.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions like BoolProperty must be assigned as class attributes within a subclass of bpy.types.PropertyGroup, not as direct assignments to variables. The correct migration is:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty\n\nclass MyProperties(bpy.types.PropertyGroup):\n    primary_layers_extra: BoolProperty()\n    secondary_layers_extra: BoolProperty()\n```\n\nYou must then register this PropertyGroup and assign it to a context (such as bpy.types.Scene) as needed. The key change is using the colon (:) syntax and defining properties inside a PropertyGroup subclass."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\faces\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\arm.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions must be declared as class attributes, not assigned dynamically to instances or objects. The correct way is to define them inside a class derived from bpy.types.PropertyGroup or similar, using type annotations. Here is the migrated code block:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    rotation_axis: bpy.props.EnumProperty(\n        name=\"Rotation Axis\",\n        items=[\n            ('X', \"X\", \"\"),\n            ('Y', \"Y\", \"\"),\n            ('Z', \"Z\", \"\")\n        ]\n    )\n    segments: bpy.props.IntProperty(\n        name=\"Segments\",\n        default=8,\n        min=1\n    )\n    bbones: bpy.props.IntProperty(\n        name=\"B-Bones\",\n        default=0,\n        min=0\n    )\n    tweak_extra_layers: bpy.props.BoolProperty(\n        name=\"Tweak Extra Layers\",\n        default=False\n    )\n    fk_extra_layers: bpy.props.BoolProperty(\n        name=\"FK Extra Layers\",\n        default=False\n    )\n```\n\nKey changes:\n- Properties are now class attributes with type annotations (using a colon :).\n- Properties must be defined inside a class derived from bpy.types.PropertyGroup.\n- Register the class and assign it to a PointerProperty on another type (not shown here).\n\nThis is the Blender 4.4 compatible way to define custom properties[1]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\leg.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, the use of `bpy.props.*Property` directly on arbitrary objects (like `params.rotation_axis = bpy.props.EnumProperty(...)`) is deprecated and will raise errors. Properties must be defined as class attributes within a subclass of `bpy.types.PropertyGroup`, and then registered with Blender. Here is the **corrected code block** for Blender 4.4:\n\n```python\nimport bpy\nfrom bpy.props import EnumProperty, BoolProperty, IntProperty\n\nclass MyParams(bpy.types.PropertyGroup):\n    rotation_axis: EnumProperty(\n        name=\"Rotation Axis\",\n        items=[\n            ('X', \"X\", \"\"),\n            ('Y', \"Y\", \"\"),\n            ('Z', \"Z\", \"\"),\n        ],\n        default='X'\n    )\n    auto_align_extremity: BoolProperty(\n        name=\"Auto Align Extremity\",\n        default=False\n    )\n    segments: IntProperty(\n        name=\"Segments\",\n        default=1,\n        min=1\n    )\n    bbones: IntProperty(\n        name=\"B-Bones\",\n        default=1,\n        min=1\n    )\n    tweak_extra_layers: BoolProperty(\n        name=\"Tweak Extra Layers\",\n        default=False\n    )\n    fk_extra_layers: BoolProperty(\n        name=\"FK Extra Layers\",\n        default=False\n    )\n\n# Register the PropertyGroup\nbpy.utils.register_class(MyParams)\n\n# Attach to a Blender data-block, e.g., Scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes inside a `bpy.types.PropertyGroup` subclass.\n- Use the colon (`:`) syntax, not assignment (`=`), for property definitions.\n- Register the class and attach it to a data-block (e.g., `Scene`) using a `PointerProperty`.\n\nThis is the required migration for Blender 4.4 compatibility."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\limb_utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\paw.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, the use of `bpy.props.*Property` directly on arbitrary objects (like `params.rotation_axis = bpy.props.EnumProperty(...)`) is deprecated and no longer supported. Properties must be defined as class attributes within a subclass of `bpy.types.PropertyGroup`, and then registered with Blender. Here is how you should migrate your code:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    rotation_axis: bpy.props.EnumProperty(\n        name=\"Rotation Axis\",\n        items=[\n            ('X', \"X\", \"\"),\n            ('Y', \"Y\", \"\"),\n            ('Z', \"Z\", \"\"),\n        ],\n        default='X'\n    )\n    auto_align_extremity: bpy.props.BoolProperty(\n        name=\"Auto Align Extremity\",\n        default=False\n    )\n    segments: bpy.props.IntProperty(\n        name=\"Segments\",\n        default=1,\n        min=1\n    )\n    bbones: bpy.props.IntProperty(\n        name=\"B-Bones\",\n        default=0,\n        min=0\n    )\n    tweak_extra_layers: bpy.props.BoolProperty(\n        name=\"Tweak Extra Layers\",\n        default=False\n    )\n    fk_extra_layers: bpy.props.BoolProperty(\n        name=\"FK Extra Layers\",\n        default=False\n    )\n\n# Register the PropertyGroup\nbpy.utils.register_class(MyParams)\n\n# Assign to a context, e.g., scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`) and not assigned at runtime.\n- The class must inherit from `bpy.types.PropertyGroup`.\n- Register the class with `bpy.utils.register_class`.\n- Attach the property group to a Blender data block (e.g., `bpy.types.Scene`) using a `PointerProperty`.\n\nThis is the Blender 4.4 compatible way to define and use custom properties[1][5]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\rear_paw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\simple_tentacle.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated assignment with the following, using the modern annotation syntax for Blender 2.8+ and 4.x:\n\n```python\nimport bpy\nfrom bpy.props import BoolProperty\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    tweak_extra_layers: BoolProperty(\n        name=\"Tweak Extra Layers\",\n        description=\"Enable extra tweak layers\",\n        default=False,\n    )\n```\n\n**Key changes:**\n- Use the colon (:) annotation syntax instead of assignment with = for property definitions inside classes[2][4].\n- Ensure all parameters to `BoolProperty` are passed as keywords[2].\n- Register your `PropertyGroup` as needed in your add-on or script."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\super_finger.py",
    "warnings": [],
    "api_suggestions": [
      "params.primary_rotation_axis: bpy.props.EnumProperty(items=items, name=\"Primary Rotation Axis\", default='X')\n\n# Blender 4.4+ compatible code:\nfrom bpy.props import EnumProperty\n\nprimary_rotation_axis: EnumProperty(\n    name=\"Primary Rotation Axis\",\n    items=items,\n    default='X'\n)"
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\super_limb.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, property definitions must be declared as class attributes within a subclass of `bpy.types.PropertyGroup` (or similar Blender types), not as assignments to an instance or variable. The direct assignment pattern you showed is deprecated and will not work.\n\nHere is the **corrected code block** for Blender 4.4, assuming these properties are meant to be part of a `PropertyGroup`:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    limb_type: bpy.props.EnumProperty(\n        name=\"Limb Type\",\n        items=[\n            ('ARM', \"Arm\", \"\"),\n            ('LEG', \"Leg\", \"\"),\n        ],\n        default='ARM'\n    )\n    rotation_axis: bpy.props.EnumProperty(\n        name=\"Rotation Axis\",\n        items=[\n            ('X', \"X\", \"\"),\n            ('Y', \"Y\", \"\"),\n            ('Z', \"Z\", \"\"),\n        ],\n        default='X'\n    )\n    auto_align_extremity: bpy.props.BoolProperty(\n        name=\"Auto Align Extremity\",\n        default=False\n    )\n    segments: bpy.props.IntProperty(\n        name=\"Segments\",\n        default=1,\n        min=1\n    )\n    bbones: bpy.props.IntProperty(\n        name=\"B-Bones\",\n        default=0,\n        min=0\n    )\n    tweak_extra_layers: bpy.props.BoolProperty(\n        name=\"Tweak Extra Layers\",\n        default=False\n    )\n    fk_extra_layers: bpy.props.BoolProperty(\n        name=\"FK Extra Layers\",\n        default=False\n    )\n\n# Register the property group\nbpy.utils.register_class(MyParams)\n\n# Attach to a Blender data block, e.g., Scene\nbpy.types.Scene.my_params = bpy.props.PointerProperty(type=MyParams)\n```\n\n**Key changes:**\n- Properties are now defined as class attributes with a colon (`:`), not assigned to an instance or variable.\n- The containing class must inherit from `bpy.types.PropertyGroup`.\n- Register the class and attach it to a data block (e.g., `Scene`) using a `PointerProperty`.\n\nThis is the required pattern for all custom properties in Blender 2.80+ and is fully compatible with Blender 4.4[3]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\super_palm.py",
    "warnings": [],
    "api_suggestions": [
      "In **Blender 4.4**, properties like `EnumProperty` must be defined as class attributes inside a `PropertyGroup` or similar class, not assigned dynamically to an instance or variable. The correct approach is:\n\n```python\nimport bpy\n\nclass MyPropertyGroup(bpy.types.PropertyGroup):\n    palm_rotation_axis: bpy.props.EnumProperty(\n        name=\"Palm Rotation Axis\",\n        description=\"Axis for palm rotation\",\n        items=[\n            ('X', \"X Axis\", \"Rotate around X axis\"),\n            ('Y', \"Y Axis\", \"Rotate around Y axis\"),\n            ('Z', \"Z Axis\", \"Rotate around Z axis\"),\n        ],\n        default='X'\n    )\n```\n\n**Key changes:**\n- Use a colon (`:`) instead of assignment (`=`) for property definitions inside the class.\n- Define the property as a class attribute of a `PropertyGroup` subclass, not as a variable or on an instance[4][5].\n- Register the class with `bpy.utils.register_class(MyPropertyGroup)` as needed.\n\nReplace your deprecated line with the above pattern."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\limbs\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\spines\\super_spine.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties such as IntProperty and BoolProperty must be defined as class attributes within a subclass of bpy.types.PropertyGroup, not as instance attributes. You should also use type annotations. Here is the corrected code block:\n\n```python\nimport bpy\n\nclass MyParams(bpy.types.PropertyGroup):\n    neck_pos: bpy.props.IntProperty()\n    pivot_pos: bpy.props.IntProperty()\n    tail_pos: bpy.props.IntProperty()\n    use_tail: bpy.props.BoolProperty()\n    use_head: bpy.props.BoolProperty()\n    tweak_extra_layers: bpy.props.BoolProperty()\n```\n\nRegister this PropertyGroup and assign it to your object, scene, or other data block as needed. Defining properties directly on an instance (e.g., params.neck_pos = ...) is no longer supported in Blender 4.4[1][2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\rigify\\rigs\\spines\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\audio_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\datamosh.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\eco.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\exiftool.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\functions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\jumptocut.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\operators_extra_actions.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\proxy_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\random_editor.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\recursive_loader.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\sequencer_kinoraw_tools\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\brushes.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\brush_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\curve_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\dyntopo_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\stroke_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\symmetry_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\texture_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\utils_core.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_brush_menus\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\display.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\fast_navigate.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\modifier_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\scene_vis.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\selection_restrictor.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\select_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\shading_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\useless_tools.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_display_tools\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_math_vis\\draw.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_math_vis\\utils.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_math_vis\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_align_menu.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated operator-based scaling with direct property assignment using the object's scale attribute. In Blender 4.4, you should use:\n\n```python\nobj = bpy.context.active_object  # or reference your object directly\nobj.scale = (sx, sy, sz)  # Replace sx, sy, sz with your desired scale factors\n```\n\nFor example, to double the size in all directions:\n\n```python\nobj = bpy.context.active_object\nobj.scale = (2.0, 2.0, 2.0)\n```\n\nThis approach is fully compatible with Blender 4.4 and avoids deprecated API usage."
    ],
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_animation_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_apply_transform_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_cursor.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_delete_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_editor_switch_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_manipulator_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_modes_menu.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, property definitions like StringProperty must be assigned as class attributes within a PropertyGroup, Operator, or Panel, not as standalone variables. The direct assignment you provided is deprecated.\n\n**Blender 4.4 compatible code:**\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    mode: bpy.props.StringProperty(\n        name=\"Interactive mode\",\n        default=\"OBJECT\"\n    )\n\n# Register the property group and add it to a context (e.g., scene)\ndef register():\n    bpy.utils.register_class(MyProperties)\n    bpy.types.Scene.my_props = bpy.props.PointerProperty(type=MyProperties)\n\ndef unregister():\n    del bpy.types.Scene.my_props\n    bpy.utils.unregister_class(MyProperties)\n```\n\n**Key changes:**\n- Define the property as a class attribute inside a subclass of `bpy.types.PropertyGroup`.\n- Register the class and attach it to a data block (e.g., `Scene`) using a `PointerProperty`."
    ],
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_orientation_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_origin.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_pivot_point_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_proportional_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_save_open_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_sculpt_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_select_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_shading_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_snap_menu.py",
    "warnings": [],
    "api_suggestions": [
      "In Blender 4.4, properties must be defined as class attributes inside a class derived from bpy.types.PropertyGroup, bpy.types.Operator, or similar, not as standalone variables. The following is the correct way to define a string property in Blender 4.4:\n\n```python\nimport bpy\n\nclass MyProperties(bpy.types.PropertyGroup):\n    my_string: bpy.props.StringProperty(\n        name=\"My String\",\n        description=\"A sample string property\",\n        default=\"\"\n    )\n```\n\nYou must then register the PropertyGroup and assign it to a data block (e.g., scene, object) as needed. The direct assignment:\n\n```python\nvariable = bpy.props.StringProperty()\n```\n\nis no longer valid in Blender 4.4[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\pie_views_numpad_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_pie_menus\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_stored_views\\core.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_stored_views\\io.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_stored_views\\operators.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_stored_views\\properties.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_stored_views\\ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\space_view3d_stored_views\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\system_demo_mode\\config.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\system_demo_mode\\demo_mode.py",
    "warnings": [],
    "api_suggestions": [
      "Replace the deprecated usage of `bpy.props.EnumProperty` as a class attribute assignment with the new annotation-based syntax required in Blender 2.80+ (and still valid in 4.4):\n\n```python\nmode: bpy.props.EnumProperty(\n    items=[\n        # Example items; replace with your actual enum items\n        ('OPT_A', \"Option A\", \"Description for option A\"),\n        ('OPT_B', \"Option B\", \"Description for option B\"),\n    ]\n)\n```\n\n**Key changes:**\n- Use a type annotation (`mode:`) instead of assignment (`mode =`).\n- Use a list (`[]`) for `items` instead of a tuple (`()`), though both are accepted, list is now preferred[3].\n- Place this inside your class definition (e.g., `bpy.types.Operator` or `bpy.types.PropertyGroup`).\n\n**Example in context:**\n```python\nclass MyOperator(bpy.types.Operator):\n    bl_idname = \"object.my_operator\"\n    bl_label = \"My Operator\"\n\n    mode: bpy.props.EnumProperty(\n        items=[\n            ('OPT_A', \"Option A\", \"Description for option A\"),\n            ('OPT_B', \"Option B\", \"Description for option B\"),\n        ]\n    )\n```\nThis syntax is compatible with Blender 4.4[3][4]."
    ],
    "errors": []
  },
  {
    "file": "addons\\system_demo_mode\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ui_translate\\edit_translation.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ui_translate\\settings.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ui_translate\\update_addon.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ui_translate\\update_svn.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ui_translate\\update_ui.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\ui_translate\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_common.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_cpuv_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_cpuv_selseq_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_fliprot_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_menu.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_mirroruv_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_mvuv_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_packuv_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_preferences.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_preserve_uv_aspect.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_props.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_texlock_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_texproj_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_transuv_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_unwrapconst_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_uvbb_ops.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\muv_wsuv_ops.py",
    "warnings": [],
    "api_suggestions": [
      "The bpy.ops.transform.resize operator is still available in Blender 4.4, but its API has changed over time. The main migration is to ensure you use the correct keyword arguments and avoid deprecated or positional-only usage. Here is the updated usage for Blender 4.4:\n\n```python\nbpy.ops.transform.resize(value=(1.0, 1.0, 1.0))\n```\nReplace (1.0, 1.0, 1.0) with your desired scale factors. All arguments should be passed as keywords, not as positional arguments[2]."
    ],
    "errors": []
  },
  {
    "file": "addons\\uv_magic_uv\\__init__.py",
    "warnings": [],
    "api_suggestions": null,
    "errors": []
  }
]